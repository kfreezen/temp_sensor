
# 1 "packets.c"

# 14 "globaldef.h"
typedef unsigned char byte;
typedef unsigned short word;
typedef unsigned long u32;

# 18 "packets.h"
typedef struct {
unsigned short magic;
unsigned short crc16;
byte revision;
byte command;
unsigned short reserved;
} PacketHeader;


typedef union {

struct {
PacketHeader header;

union {

struct {
word thermistorResistance;
word thermistorResistance25C;
word thermistorBeta;
word topResistorValue;
} report;

struct {
short thermistorResistance25CAdjust;
short topResistorValueAdjust;
} calibration;

struct {
word interval;
} interval;

struct {
word networkID;
byte preambleID;
} set_id;

struct {
byte address[8];
} receiver_address;
};
};

byte packet_data[32];
} Packet;

void SendReport(int thermistorResistance, int thermRes25C, int thermBeta, int topResValue);

void SendReceiverBroadcastRequest();

void SendPacket(Packet* packet);

# 38 "platform_defines.h"
typedef struct {
unsigned short magic;
short thermistorValue25CAdjust;
short topResistorValueAdjust;
} CalibrationData;


typedef struct {
word magic;
word interval;
} IntervalData;

# 16 "adc.h"
void ADC_Enable(int select, int port_pin);
unsigned ADC_ReadOne(int channel);
unsigned ADC_Read(int channel);

# 14 "crc16.h"
unsigned char CRC16_High, CRC16_Low;

void CRC16_Init( void );
void CRC16_Update4Bits( unsigned char val );
void CRC16_Update( unsigned char val );
unsigned short CRC16_Generate(unsigned char* msg, int len);

# 25 "xbee.h"
void XBee_Enable(int baud);

# 30
inline void XBee_Disable();
inline void XBee_Sleep();
inline void XBee_Wake();

# 40
void XBee_Send(const char* msg, int len, const char end_char);

# 49
void XBee_Recv(char* buf, int max_len, const char end_char);

# 73
typedef struct __XBeeAddress {
unsigned char addr[8];
} XBeeAddress;

int XBAPI_Command(unsigned short command, unsigned long data, int id, int data_valid);
void XBAPI_Transmit(XBeeAddress* address, const unsigned char* data, int length, int id);

# 93
int XBAPI_HandleFrame(int expected);

# 97
typedef struct {
byte start_delimiter;
byte length[2];
byte frame_type;
byte frame_id;

union {
unsigned short command;
byte command_bytes[2];
};

unsigned long data;
byte checksum;
} ATCmdFrame;

typedef struct {
byte start_delimiter;
byte length[2];
byte frame_type;
byte frame_id;

union {
unsigned short command;
byte command_bytes[2];
};

byte checksum;
} ATCmdFrame_NoData;

typedef struct {
byte start_delimiter;
byte length[2];
byte frame_type;
byte frame_id;
XBeeAddress source_address;
unsigned short reserved;
byte receive_options;
Packet packet;
byte checksum;
} RxFrame;

typedef struct {
byte start_delimiter;
byte length[2];
byte frame_type;
byte frame_id;
XBeeAddress destination_address;
unsigned short reserved;
byte broadcast_radius;
byte transmit_options;
Packet packet;
byte checksum;
} TxFrame;

typedef struct {
byte start_delimiter;
byte length[2];
byte frame_type;
byte frame_id;
unsigned short reserved;
byte transmit_retry_count;
byte delivery_status;
byte discovery_status;
byte checksum;
} TxStatusFrame;

typedef union {
RxFrame rx;
TxFrame tx;
TxStatusFrame txStatus;

ATCmdFrame atCmd;
ATCmdFrame_NoData atCmdNoData;

byte buffer[60];

} Frame;

# 7 "packets.c"
Packet packet_buffer;
XBeeAddress dest_address = {{0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF}};

void SendReport(int thermistorResistance, int thermRes25C, int thermBeta, int topResValue) {

packet_buffer.header.command = 0x00;
packet_buffer.header.magic = 0xAA55;
packet_buffer.header.revision = 0;
packet_buffer.report.thermistorBeta = thermBeta;
packet_buffer.report.thermistorResistance = thermistorResistance;
packet_buffer.report.thermistorResistance25C = thermRes25C;
packet_buffer.report.topResistorValue = topResValue;
packet_buffer.header.crc16 = CRC16_Generate((byte*)&packet_buffer, sizeof(Packet));

SendPacket(&packet_buffer);
}

void SendReceiverBroadcastRequest() {
packet_buffer.header.command = 0x04;
packet_buffer.header.magic = 0xAA55;
packet_buffer.header.revision = 0;
packet_buffer.header.crc16 = CRC16_Generate((byte*)&packet_buffer, sizeof(Packet));

SendPacket(&packet_buffer);
}

unsigned char frame_id_itr = 0;

void __doTestSendPacket() {
SendPacket(&packet_buffer);
}

void SendPacket(Packet* packet) {
if(frame_id_itr == 0) {
frame_id_itr++;
}
XBAPI_Transmit(&dest_address, (byte*) packet, sizeof(Packet), 0);
}
