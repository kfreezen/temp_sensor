

Microchip Technology PIC LITE Macro Assembler V1.20 build 52243 
                                                                                               Sat Jul 27 06:21:36 2013

Microchip Technology Omniscient Code Generator (Lite mode) build 52243
     1                           	processor	16LF1783
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	inittext,global,class=CODE,delta=2
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2
    22                           	psect	text5,local,class=CODE,merge=1,delta=2
    23                           	psect	text6,local,class=CODE,merge=1,delta=2
    24                           	psect	text7,local,class=CODE,merge=1,delta=2
    25                           	psect	text8,local,class=CODE,merge=1,delta=2
    26                           	psect	text9,local,class=CODE,merge=1,delta=2
    27                           	psect	text10,local,class=CODE,merge=1,delta=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2
    30                           	psect	text13,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text14,local,class=CODE,merge=1,delta=2
    32                           	psect	text15,local,class=CODE,merge=1,delta=2
    33                           	psect	text16,local,class=CODE,merge=1,delta=2
    34                           	psect	text17,local,class=CODE,merge=1,delta=2
    35                           	psect	text18,local,class=CODE,merge=1,delta=2
    36                           	psect	text19,local,class=CODE,merge=1,delta=2
    37                           	psect	text20,local,class=CODE,merge=1,delta=2
    38                           	psect	text21,local,class=CODE,merge=1,delta=2
    39                           	psect	text22,local,class=CODE,merge=1,delta=2
    40                           	psect	text23,local,class=CODE,merge=1,delta=2
    41                           	psect	text24,local,class=CODE,merge=1,delta=2
    42                           	psect	text25,local,class=CODE,merge=1,delta=2
    43                           	psect	text26,local,class=CODE,merge=1,delta=2
    44                           	psect	text27,local,class=CODE,merge=1,delta=2
    45                           	psect	text28,local,class=CODE,merge=1,delta=2
    46                           	psect	text29,local,class=CODE,merge=1,delta=2
    47                           	psect	text30,local,class=CODE,merge=1,delta=2
    48                           	psect	text31,local,class=CODE,merge=1,delta=2
    49                           	psect	text32,local,class=CODE,merge=1,delta=2
    50                           	psect	text33,local,class=CODE,merge=1,delta=2
    51                           	psect	text34,local,class=CODE,merge=1,delta=2
    52                           	psect	text35,local,class=CODE,merge=1,delta=2
    53                           	psect	text36,local,class=CODE,merge=1,delta=2
    54                           	psect	text37,local,class=CODE,merge=1,delta=2
    55                           	psect	text38,local,class=CODE,merge=1,delta=2
    56                           	psect	text39,local,class=CODE,merge=1,delta=2
    57                           	psect	intentry,global,class=CODE,delta=2
    58                           	psect	functab,global,reloc=256,class=CODE,delta=2
    59                           	dabs	1,0x7E,2
    60  0000                     	;# 
    61  0001                     	;# 
    62  0002                     	;# 
    63  0003                     	;# 
    64  0004                     	;# 
    65  0005                     	;# 
    66  0006                     	;# 
    67  0007                     	;# 
    68  0008                     	;# 
    69  0009                     	;# 
    70  000A                     	;# 
    71  000B                     	;# 
    72  000C                     	;# 
    73  000D                     	;# 
    74  000E                     	;# 
    75  0010                     	;# 
    76  0011                     	;# 
    77  0012                     	;# 
    78  0014                     	;# 
    79  0015                     	;# 
    80  0016                     	;# 
    81  0016                     	;# 
    82  0017                     	;# 
    83  0018                     	;# 
    84  0019                     	;# 
    85  001A                     	;# 
    86  001B                     	;# 
    87  001C                     	;# 
    88  008C                     	;# 
    89  008D                     	;# 
    90  008E                     	;# 
    91  0090                     	;# 
    92  0091                     	;# 
    93  0092                     	;# 
    94  0094                     	;# 
    95  0095                     	;# 
    96  0096                     	;# 
    97  0097                     	;# 
    98  0098                     	;# 
    99  0099                     	;# 
   100  009A                     	;# 
   101  009B                     	;# 
   102  009B                     	;# 
   103  009C                     	;# 
   104  009D                     	;# 
   105  009E                     	;# 
   106  009F                     	;# 
   107  010C                     	;# 
   108  010D                     	;# 
   109  010E                     	;# 
   110  0111                     	;# 
   111  0112                     	;# 
   112  0113                     	;# 
   113  0114                     	;# 
   114  0115                     	;# 
   115  0116                     	;# 
   116  0117                     	;# 
   117  0118                     	;# 
   118  0119                     	;# 
   119  011D                     	;# 
   120  011D                     	;# 
   121  011E                     	;# 
   122  011F                     	;# 
   123  018C                     	;# 
   124  018D                     	;# 
   125  0191                     	;# 
   126  0191                     	;# 
   127  0192                     	;# 
   128  0193                     	;# 
   129  0193                     	;# 
   130  0193                     	;# 
   131  0194                     	;# 
   132  0195                     	;# 
   133  0196                     	;# 
   134  0199                     	;# 
   135  0199                     	;# 
   136  0199                     	;# 
   137  019A                     	;# 
   138  019A                     	;# 
   139  019A                     	;# 
   140  019B                     	;# 
   141  019B                     	;# 
   142  019B                     	;# 
   143  019B                     	;# 
   144  019B                     	;# 
   145  019C                     	;# 
   146  019C                     	;# 
   147  019C                     	;# 
   148  019D                     	;# 
   149  019D                     	;# 
   150  019D                     	;# 
   151  019E                     	;# 
   152  019E                     	;# 
   153  019E                     	;# 
   154  019F                     	;# 
   155  019F                     	;# 
   156  019F                     	;# 
   157  019F                     	;# 
   158  019F                     	;# 
   159  020C                     	;# 
   160  020D                     	;# 
   161  020E                     	;# 
   162  0210                     	;# 
   163  0211                     	;# 
   164  0211                     	;# 
   165  0212                     	;# 
   166  0212                     	;# 
   167  0213                     	;# 
   168  0213                     	;# 
   169  0214                     	;# 
   170  0214                     	;# 
   171  0215                     	;# 
   172  0215                     	;# 
   173  0215                     	;# 
   174  0216                     	;# 
   175  0216                     	;# 
   176  0217                     	;# 
   177  0217                     	;# 
   178  028C                     	;# 
   179  028D                     	;# 
   180  028E                     	;# 
   181  0291                     	;# 
   182  0291                     	;# 
   183  0292                     	;# 
   184  0293                     	;# 
   185  0298                     	;# 
   186  0298                     	;# 
   187  0299                     	;# 
   188  029A                     	;# 
   189  030C                     	;# 
   190  030D                     	;# 
   191  030E                     	;# 
   192  038C                     	;# 
   193  038D                     	;# 
   194  038E                     	;# 
   195  0390                     	;# 
   196  0391                     	;# 
   197  0392                     	;# 
   198  0393                     	;# 
   199  0394                     	;# 
   200  0395                     	;# 
   201  0396                     	;# 
   202  0397                     	;# 
   203  0398                     	;# 
   204  0399                     	;# 
   205  039D                     	;# 
   206  039E                     	;# 
   207  039F                     	;# 
   208  0511                     	;# 
   209  0513                     	;# 
   210  051A                     	;# 
   211  0811                     	;# 
   212  0812                     	;# 
   213  0813                     	;# 
   214  0814                     	;# 
   215  0815                     	;# 
   216  0816                     	;# 
   217  0817                     	;# 
   218  0818                     	;# 
   219  0819                     	;# 
   220  081A                     	;# 
   221  081B                     	;# 
   222  081C                     	;# 
   223  081D                     	;# 
   224  081E                     	;# 
   225  081F                     	;# 
   226  0820                     	;# 
   227  0821                     	;# 
   228  0821                     	;# 
   229  0822                     	;# 
   230  0823                     	;# 
   231  0823                     	;# 
   232  0824                     	;# 
   233  0825                     	;# 
   234  0825                     	;# 
   235  0826                     	;# 
   236  0827                     	;# 
   237  0827                     	;# 
   238  0828                     	;# 
   239  0829                     	;# 
   240  082A                     	;# 
   241  082B                     	;# 
   242  082C                     	;# 
   243  082D                     	;# 
   244  082E                     	;# 
   245  082F                     	;# 
   246  0831                     	;# 
   247  0832                     	;# 
   248  0833                     	;# 
   249  0834                     	;# 
   250  0835                     	;# 
   251  0836                     	;# 
   252  0837                     	;# 
   253  0838                     	;# 
   254  0839                     	;# 
   255  083A                     	;# 
   256  083B                     	;# 
   257  083C                     	;# 
   258  083D                     	;# 
   259  083E                     	;# 
   260  083F                     	;# 
   261  0840                     	;# 
   262  0841                     	;# 
   263  0841                     	;# 
   264  0842                     	;# 
   265  0843                     	;# 
   266  0843                     	;# 
   267  0844                     	;# 
   268  0845                     	;# 
   269  0845                     	;# 
   270  0846                     	;# 
   271  0847                     	;# 
   272  0847                     	;# 
   273  0848                     	;# 
   274  0849                     	;# 
   275  084A                     	;# 
   276  084B                     	;# 
   277  084C                     	;# 
   278  084D                     	;# 
   279  084E                     	;# 
   280  084F                     	;# 
   281  0FE4                     	;# 
   282  0FE5                     	;# 
   283  0FE6                     	;# 
   284  0FE7                     	;# 
   285  0FE8                     	;# 
   286  0FE9                     	;# 
   287  0FEA                     	;# 
   288  0FEB                     	;# 
   289  0FED                     	;# 
   290  0FEE                     	;# 
   291  0FEF                     	;# 
   292  0000                     	;# 
   293  0001                     	;# 
   294  0002                     	;# 
   295  0003                     	;# 
   296  0004                     	;# 
   297  0005                     	;# 
   298  0006                     	;# 
   299  0007                     	;# 
   300  0008                     	;# 
   301  0009                     	;# 
   302  000A                     	;# 
   303  000B                     	;# 
   304  000C                     	;# 
   305  000D                     	;# 
   306  000E                     	;# 
   307  0010                     	;# 
   308  0011                     	;# 
   309  0012                     	;# 
   310  0014                     	;# 
   311  0015                     	;# 
   312  0016                     	;# 
   313  0016                     	;# 
   314  0017                     	;# 
   315  0018                     	;# 
   316  0019                     	;# 
   317  001A                     	;# 
   318  001B                     	;# 
   319  001C                     	;# 
   320  008C                     	;# 
   321  008D                     	;# 
   322  008E                     	;# 
   323  0090                     	;# 
   324  0091                     	;# 
   325  0092                     	;# 
   326  0094                     	;# 
   327  0095                     	;# 
   328  0096                     	;# 
   329  0097                     	;# 
   330  0098                     	;# 
   331  0099                     	;# 
   332  009A                     	;# 
   333  009B                     	;# 
   334  009B                     	;# 
   335  009C                     	;# 
   336  009D                     	;# 
   337  009E                     	;# 
   338  009F                     	;# 
   339  010C                     	;# 
   340  010D                     	;# 
   341  010E                     	;# 
   342  0111                     	;# 
   343  0112                     	;# 
   344  0113                     	;# 
   345  0114                     	;# 
   346  0115                     	;# 
   347  0116                     	;# 
   348  0117                     	;# 
   349  0118                     	;# 
   350  0119                     	;# 
   351  011D                     	;# 
   352  011D                     	;# 
   353  011E                     	;# 
   354  011F                     	;# 
   355  018C                     	;# 
   356  018D                     	;# 
   357  0191                     	;# 
   358  0191                     	;# 
   359  0192                     	;# 
   360  0193                     	;# 
   361  0193                     	;# 
   362  0193                     	;# 
   363  0194                     	;# 
   364  0195                     	;# 
   365  0196                     	;# 
   366  0199                     	;# 
   367  0199                     	;# 
   368  0199                     	;# 
   369  019A                     	;# 
   370  019A                     	;# 
   371  019A                     	;# 
   372  019B                     	;# 
   373  019B                     	;# 
   374  019B                     	;# 
   375  019B                     	;# 
   376  019B                     	;# 
   377  019C                     	;# 
   378  019C                     	;# 
   379  019C                     	;# 
   380  019D                     	;# 
   381  019D                     	;# 
   382  019D                     	;# 
   383  019E                     	;# 
   384  019E                     	;# 
   385  019E                     	;# 
   386  019F                     	;# 
   387  019F                     	;# 
   388  019F                     	;# 
   389  019F                     	;# 
   390  019F                     	;# 
   391  020C                     	;# 
   392  020D                     	;# 
   393  020E                     	;# 
   394  0210                     	;# 
   395  0211                     	;# 
   396  0211                     	;# 
   397  0212                     	;# 
   398  0212                     	;# 
   399  0213                     	;# 
   400  0213                     	;# 
   401  0214                     	;# 
   402  0214                     	;# 
   403  0215                     	;# 
   404  0215                     	;# 
   405  0215                     	;# 
   406  0216                     	;# 
   407  0216                     	;# 
   408  0217                     	;# 
   409  0217                     	;# 
   410  028C                     	;# 
   411  028D                     	;# 
   412  028E                     	;# 
   413  0291                     	;# 
   414  0291                     	;# 
   415  0292                     	;# 
   416  0293                     	;# 
   417  0298                     	;# 
   418  0298                     	;# 
   419  0299                     	;# 
   420  029A                     	;# 
   421  030C                     	;# 
   422  030D                     	;# 
   423  030E                     	;# 
   424  038C                     	;# 
   425  038D                     	;# 
   426  038E                     	;# 
   427  0390                     	;# 
   428  0391                     	;# 
   429  0392                     	;# 
   430  0393                     	;# 
   431  0394                     	;# 
   432  0395                     	;# 
   433  0396                     	;# 
   434  0397                     	;# 
   435  0398                     	;# 
   436  0399                     	;# 
   437  039D                     	;# 
   438  039E                     	;# 
   439  039F                     	;# 
   440  0511                     	;# 
   441  0513                     	;# 
   442  051A                     	;# 
   443  0811                     	;# 
   444  0812                     	;# 
   445  0813                     	;# 
   446  0814                     	;# 
   447  0815                     	;# 
   448  0816                     	;# 
   449  0817                     	;# 
   450  0818                     	;# 
   451  0819                     	;# 
   452  081A                     	;# 
   453  081B                     	;# 
   454  081C                     	;# 
   455  081D                     	;# 
   456  081E                     	;# 
   457  081F                     	;# 
   458  0820                     	;# 
   459  0821                     	;# 
   460  0821                     	;# 
   461  0822                     	;# 
   462  0823                     	;# 
   463  0823                     	;# 
   464  0824                     	;# 
   465  0825                     	;# 
   466  0825                     	;# 
   467  0826                     	;# 
   468  0827                     	;# 
   469  0827                     	;# 
   470  0828                     	;# 
   471  0829                     	;# 
   472  082A                     	;# 
   473  082B                     	;# 
   474  082C                     	;# 
   475  082D                     	;# 
   476  082E                     	;# 
   477  082F                     	;# 
   478  0831                     	;# 
   479  0832                     	;# 
   480  0833                     	;# 
   481  0834                     	;# 
   482  0835                     	;# 
   483  0836                     	;# 
   484  0837                     	;# 
   485  0838                     	;# 
   486  0839                     	;# 
   487  083A                     	;# 
   488  083B                     	;# 
   489  083C                     	;# 
   490  083D                     	;# 
   491  083E                     	;# 
   492  083F                     	;# 
   493  0840                     	;# 
   494  0841                     	;# 
   495  0841                     	;# 
   496  0842                     	;# 
   497  0843                     	;# 
   498  0843                     	;# 
   499  0844                     	;# 
   500  0845                     	;# 
   501  0845                     	;# 
   502  0846                     	;# 
   503  0847                     	;# 
   504  0847                     	;# 
   505  0848                     	;# 
   506  0849                     	;# 
   507  084A                     	;# 
   508  084B                     	;# 
   509  084C                     	;# 
   510  084D                     	;# 
   511  084E                     	;# 
   512  084F                     	;# 
   513  0FE4                     	;# 
   514  0FE5                     	;# 
   515  0FE6                     	;# 
   516  0FE7                     	;# 
   517  0FE8                     	;# 
   518  0FE9                     	;# 
   519  0FEA                     	;# 
   520  0FEB                     	;# 
   521  0FED                     	;# 
   522  0FEE                     	;# 
   523  0FEF                     	;# 
   524  0000                     	;# 
   525  0001                     	;# 
   526  0002                     	;# 
   527  0003                     	;# 
   528  0004                     	;# 
   529  0005                     	;# 
   530  0006                     	;# 
   531  0007                     	;# 
   532  0008                     	;# 
   533  0009                     	;# 
   534  000A                     	;# 
   535  000B                     	;# 
   536  000C                     	;# 
   537  000D                     	;# 
   538  000E                     	;# 
   539  0010                     	;# 
   540  0011                     	;# 
   541  0012                     	;# 
   542  0014                     	;# 
   543  0015                     	;# 
   544  0016                     	;# 
   545  0016                     	;# 
   546  0017                     	;# 
   547  0018                     	;# 
   548  0019                     	;# 
   549  001A                     	;# 
   550  001B                     	;# 
   551  001C                     	;# 
   552  008C                     	;# 
   553  008D                     	;# 
   554  008E                     	;# 
   555  0090                     	;# 
   556  0091                     	;# 
   557  0092                     	;# 
   558  0094                     	;# 
   559  0095                     	;# 
   560  0096                     	;# 
   561  0097                     	;# 
   562  0098                     	;# 
   563  0099                     	;# 
   564  009A                     	;# 
   565  009B                     	;# 
   566  009B                     	;# 
   567  009C                     	;# 
   568  009D                     	;# 
   569  009E                     	;# 
   570  009F                     	;# 
   571  010C                     	;# 
   572  010D                     	;# 
   573  010E                     	;# 
   574  0111                     	;# 
   575  0112                     	;# 
   576  0113                     	;# 
   577  0114                     	;# 
   578  0115                     	;# 
   579  0116                     	;# 
   580  0117                     	;# 
   581  0118                     	;# 
   582  0119                     	;# 
   583  011D                     	;# 
   584  011D                     	;# 
   585  011E                     	;# 
   586  011F                     	;# 
   587  018C                     	;# 
   588  018D                     	;# 
   589  0191                     	;# 
   590  0191                     	;# 
   591  0192                     	;# 
   592  0193                     	;# 
   593  0193                     	;# 
   594  0193                     	;# 
   595  0194                     	;# 
   596  0195                     	;# 
   597  0196                     	;# 
   598  0199                     	;# 
   599  0199                     	;# 
   600  0199                     	;# 
   601  019A                     	;# 
   602  019A                     	;# 
   603  019A                     	;# 
   604  019B                     	;# 
   605  019B                     	;# 
   606  019B                     	;# 
   607  019B                     	;# 
   608  019B                     	;# 
   609  019C                     	;# 
   610  019C                     	;# 
   611  019C                     	;# 
   612  019D                     	;# 
   613  019D                     	;# 
   614  019D                     	;# 
   615  019E                     	;# 
   616  019E                     	;# 
   617  019E                     	;# 
   618  019F                     	;# 
   619  019F                     	;# 
   620  019F                     	;# 
   621  019F                     	;# 
   622  019F                     	;# 
   623  020C                     	;# 
   624  020D                     	;# 
   625  020E                     	;# 
   626  0210                     	;# 
   627  0211                     	;# 
   628  0211                     	;# 
   629  0212                     	;# 
   630  0212                     	;# 
   631  0213                     	;# 
   632  0213                     	;# 
   633  0214                     	;# 
   634  0214                     	;# 
   635  0215                     	;# 
   636  0215                     	;# 
   637  0215                     	;# 
   638  0216                     	;# 
   639  0216                     	;# 
   640  0217                     	;# 
   641  0217                     	;# 
   642  028C                     	;# 
   643  028D                     	;# 
   644  028E                     	;# 
   645  0291                     	;# 
   646  0291                     	;# 
   647  0292                     	;# 
   648  0293                     	;# 
   649  0298                     	;# 
   650  0298                     	;# 
   651  0299                     	;# 
   652  029A                     	;# 
   653  030C                     	;# 
   654  030D                     	;# 
   655  030E                     	;# 
   656  038C                     	;# 
   657  038D                     	;# 
   658  038E                     	;# 
   659  0390                     	;# 
   660  0391                     	;# 
   661  0392                     	;# 
   662  0393                     	;# 
   663  0394                     	;# 
   664  0395                     	;# 
   665  0396                     	;# 
   666  0397                     	;# 
   667  0398                     	;# 
   668  0399                     	;# 
   669  039D                     	;# 
   670  039E                     	;# 
   671  039F                     	;# 
   672  0511                     	;# 
   673  0513                     	;# 
   674  051A                     	;# 
   675  0811                     	;# 
   676  0812                     	;# 
   677  0813                     	;# 
   678  0814                     	;# 
   679  0815                     	;# 
   680  0816                     	;# 
   681  0817                     	;# 
   682  0818                     	;# 
   683  0819                     	;# 
   684  081A                     	;# 
   685  081B                     	;# 
   686  081C                     	;# 
   687  081D                     	;# 
   688  081E                     	;# 
   689  081F                     	;# 
   690  0820                     	;# 
   691  0821                     	;# 
   692  0821                     	;# 
   693  0822                     	;# 
   694  0823                     	;# 
   695  0823                     	;# 
   696  0824                     	;# 
   697  0825                     	;# 
   698  0825                     	;# 
   699  0826                     	;# 
   700  0827                     	;# 
   701  0827                     	;# 
   702  0828                     	;# 
   703  0829                     	;# 
   704  082A                     	;# 
   705  082B                     	;# 
   706  082C                     	;# 
   707  082D                     	;# 
   708  082E                     	;# 
   709  082F                     	;# 
   710  0831                     	;# 
   711  0832                     	;# 
   712  0833                     	;# 
   713  0834                     	;# 
   714  0835                     	;# 
   715  0836                     	;# 
   716  0837                     	;# 
   717  0838                     	;# 
   718  0839                     	;# 
   719  083A                     	;# 
   720  083B                     	;# 
   721  083C                     	;# 
   722  083D                     	;# 
   723  083E                     	;# 
   724  083F                     	;# 
   725  0840                     	;# 
   726  0841                     	;# 
   727  0841                     	;# 
   728  0842                     	;# 
   729  0843                     	;# 
   730  0843                     	;# 
   731  0844                     	;# 
   732  0845                     	;# 
   733  0845                     	;# 
   734  0846                     	;# 
   735  0847                     	;# 
   736  0847                     	;# 
   737  0848                     	;# 
   738  0849                     	;# 
   739  084A                     	;# 
   740  084B                     	;# 
   741  084C                     	;# 
   742  084D                     	;# 
   743  084E                     	;# 
   744  084F                     	;# 
   745  0FE4                     	;# 
   746  0FE5                     	;# 
   747  0FE6                     	;# 
   748  0FE7                     	;# 
   749  0FE8                     	;# 
   750  0FE9                     	;# 
   751  0FEA                     	;# 
   752  0FEB                     	;# 
   753  0FED                     	;# 
   754  0FEE                     	;# 
   755  0FEF                     	;# 
   756  0000                     	;# 
   757  0001                     	;# 
   758  0002                     	;# 
   759  0003                     	;# 
   760  0004                     	;# 
   761  0005                     	;# 
   762  0006                     	;# 
   763  0007                     	;# 
   764  0008                     	;# 
   765  0009                     	;# 
   766  000A                     	;# 
   767  000B                     	;# 
   768  000C                     	;# 
   769  000D                     	;# 
   770  000E                     	;# 
   771  0010                     	;# 
   772  0011                     	;# 
   773  0012                     	;# 
   774  0014                     	;# 
   775  0015                     	;# 
   776  0016                     	;# 
   777  0016                     	;# 
   778  0017                     	;# 
   779  0018                     	;# 
   780  0019                     	;# 
   781  001A                     	;# 
   782  001B                     	;# 
   783  001C                     	;# 
   784  008C                     	;# 
   785  008D                     	;# 
   786  008E                     	;# 
   787  0090                     	;# 
   788  0091                     	;# 
   789  0092                     	;# 
   790  0094                     	;# 
   791  0095                     	;# 
   792  0096                     	;# 
   793  0097                     	;# 
   794  0098                     	;# 
   795  0099                     	;# 
   796  009A                     	;# 
   797  009B                     	;# 
   798  009B                     	;# 
   799  009C                     	;# 
   800  009D                     	;# 
   801  009E                     	;# 
   802  009F                     	;# 
   803  010C                     	;# 
   804  010D                     	;# 
   805  010E                     	;# 
   806  0111                     	;# 
   807  0112                     	;# 
   808  0113                     	;# 
   809  0114                     	;# 
   810  0115                     	;# 
   811  0116                     	;# 
   812  0117                     	;# 
   813  0118                     	;# 
   814  0119                     	;# 
   815  011D                     	;# 
   816  011D                     	;# 
   817  011E                     	;# 
   818  011F                     	;# 
   819  018C                     	;# 
   820  018D                     	;# 
   821  0191                     	;# 
   822  0191                     	;# 
   823  0192                     	;# 
   824  0193                     	;# 
   825  0193                     	;# 
   826  0193                     	;# 
   827  0194                     	;# 
   828  0195                     	;# 
   829  0196                     	;# 
   830  0199                     	;# 
   831  0199                     	;# 
   832  0199                     	;# 
   833  019A                     	;# 
   834  019A                     	;# 
   835  019A                     	;# 
   836  019B                     	;# 
   837  019B                     	;# 
   838  019B                     	;# 
   839  019B                     	;# 
   840  019B                     	;# 
   841  019C                     	;# 
   842  019C                     	;# 
   843  019C                     	;# 
   844  019D                     	;# 
   845  019D                     	;# 
   846  019D                     	;# 
   847  019E                     	;# 
   848  019E                     	;# 
   849  019E                     	;# 
   850  019F                     	;# 
   851  019F                     	;# 
   852  019F                     	;# 
   853  019F                     	;# 
   854  019F                     	;# 
   855  020C                     	;# 
   856  020D                     	;# 
   857  020E                     	;# 
   858  0210                     	;# 
   859  0211                     	;# 
   860  0211                     	;# 
   861  0212                     	;# 
   862  0212                     	;# 
   863  0213                     	;# 
   864  0213                     	;# 
   865  0214                     	;# 
   866  0214                     	;# 
   867  0215                     	;# 
   868  0215                     	;# 
   869  0215                     	;# 
   870  0216                     	;# 
   871  0216                     	;# 
   872  0217                     	;# 
   873  0217                     	;# 
   874  028C                     	;# 
   875  028D                     	;# 
   876  028E                     	;# 
   877  0291                     	;# 
   878  0291                     	;# 
   879  0292                     	;# 
   880  0293                     	;# 
   881  0298                     	;# 
   882  0298                     	;# 
   883  0299                     	;# 
   884  029A                     	;# 
   885  030C                     	;# 
   886  030D                     	;# 
   887  030E                     	;# 
   888  038C                     	;# 
   889  038D                     	;# 
   890  038E                     	;# 
   891  0390                     	;# 
   892  0391                     	;# 
   893  0392                     	;# 
   894  0393                     	;# 
   895  0394                     	;# 
   896  0395                     	;# 
   897  0396                     	;# 
   898  0397                     	;# 
   899  0398                     	;# 
   900  0399                     	;# 
   901  039D                     	;# 
   902  039E                     	;# 
   903  039F                     	;# 
   904  0511                     	;# 
   905  0513                     	;# 
   906  051A                     	;# 
   907  0811                     	;# 
   908  0812                     	;# 
   909  0813                     	;# 
   910  0814                     	;# 
   911  0815                     	;# 
   912  0816                     	;# 
   913  0817                     	;# 
   914  0818                     	;# 
   915  0819                     	;# 
   916  081A                     	;# 
   917  081B                     	;# 
   918  081C                     	;# 
   919  081D                     	;# 
   920  081E                     	;# 
   921  081F                     	;# 
   922  0820                     	;# 
   923  0821                     	;# 
   924  0821                     	;# 
   925  0822                     	;# 
   926  0823                     	;# 
   927  0823                     	;# 
   928  0824                     	;# 
   929  0825                     	;# 
   930  0825                     	;# 
   931  0826                     	;# 
   932  0827                     	;# 
   933  0827                     	;# 
   934  0828                     	;# 
   935  0829                     	;# 
   936  082A                     	;# 
   937  082B                     	;# 
   938  082C                     	;# 
   939  082D                     	;# 
   940  082E                     	;# 
   941  082F                     	;# 
   942  0831                     	;# 
   943  0832                     	;# 
   944  0833                     	;# 
   945  0834                     	;# 
   946  0835                     	;# 
   947  0836                     	;# 
   948  0837                     	;# 
   949  0838                     	;# 
   950  0839                     	;# 
   951  083A                     	;# 
   952  083B                     	;# 
   953  083C                     	;# 
   954  083D                     	;# 
   955  083E                     	;# 
   956  083F                     	;# 
   957  0840                     	;# 
   958  0841                     	;# 
   959  0841                     	;# 
   960  0842                     	;# 
   961  0843                     	;# 
   962  0843                     	;# 
   963  0844                     	;# 
   964  0845                     	;# 
   965  0845                     	;# 
   966  0846                     	;# 
   967  0847                     	;# 
   968  0847                     	;# 
   969  0848                     	;# 
   970  0849                     	;# 
   971  084A                     	;# 
   972  084B                     	;# 
   973  084C                     	;# 
   974  084D                     	;# 
   975  084E                     	;# 
   976  084F                     	;# 
   977  0FE4                     	;# 
   978  0FE5                     	;# 
   979  0FE6                     	;# 
   980  0FE7                     	;# 
   981  0FE8                     	;# 
   982  0FE9                     	;# 
   983  0FEA                     	;# 
   984  0FEB                     	;# 
   985  0FED                     	;# 
   986  0FEE                     	;# 
   987  0FEF                     	;# 
   988  0000                     	;# 
   989  0001                     	;# 
   990  0002                     	;# 
   991  0003                     	;# 
   992  0004                     	;# 
   993  0005                     	;# 
   994  0006                     	;# 
   995  0007                     	;# 
   996  0008                     	;# 
   997  0009                     	;# 
   998  000A                     	;# 
   999  000B                     	;# 
  1000  000C                     	;# 
  1001  000D                     	;# 
  1002  000E                     	;# 
  1003  0010                     	;# 
  1004  0011                     	;# 
  1005  0012                     	;# 
  1006  0014                     	;# 
  1007  0015                     	;# 
  1008  0016                     	;# 
  1009  0016                     	;# 
  1010  0017                     	;# 
  1011  0018                     	;# 
  1012  0019                     	;# 
  1013  001A                     	;# 
  1014  001B                     	;# 
  1015  001C                     	;# 
  1016  008C                     	;# 
  1017  008D                     	;# 
  1018  008E                     	;# 
  1019  0090                     	;# 
  1020  0091                     	;# 
  1021  0092                     	;# 
  1022  0094                     	;# 
  1023  0095                     	;# 
  1024  0096                     	;# 
  1025  0097                     	;# 
  1026  0098                     	;# 
  1027  0099                     	;# 
  1028  009A                     	;# 
  1029  009B                     	;# 
  1030  009B                     	;# 
  1031  009C                     	;# 
  1032  009D                     	;# 
  1033  009E                     	;# 
  1034  009F                     	;# 
  1035  010C                     	;# 
  1036  010D                     	;# 
  1037  010E                     	;# 
  1038  0111                     	;# 
  1039  0112                     	;# 
  1040  0113                     	;# 
  1041  0114                     	;# 
  1042  0115                     	;# 
  1043  0116                     	;# 
  1044  0117                     	;# 
  1045  0118                     	;# 
  1046  0119                     	;# 
  1047  011D                     	;# 
  1048  011D                     	;# 
  1049  011E                     	;# 
  1050  011F                     	;# 
  1051  018C                     	;# 
  1052  018D                     	;# 
  1053  0191                     	;# 
  1054  0191                     	;# 
  1055  0192                     	;# 
  1056  0193                     	;# 
  1057  0193                     	;# 
  1058  0193                     	;# 
  1059  0194                     	;# 
  1060  0195                     	;# 
  1061  0196                     	;# 
  1062  0199                     	;# 
  1063  0199                     	;# 
  1064  0199                     	;# 
  1065  019A                     	;# 
  1066  019A                     	;# 
  1067  019A                     	;# 
  1068  019B                     	;# 
  1069  019B                     	;# 
  1070  019B                     	;# 
  1071  019B                     	;# 
  1072  019B                     	;# 
  1073  019C                     	;# 
  1074  019C                     	;# 
  1075  019C                     	;# 
  1076  019D                     	;# 
  1077  019D                     	;# 
  1078  019D                     	;# 
  1079  019E                     	;# 
  1080  019E                     	;# 
  1081  019E                     	;# 
  1082  019F                     	;# 
  1083  019F                     	;# 
  1084  019F                     	;# 
  1085  019F                     	;# 
  1086  019F                     	;# 
  1087  020C                     	;# 
  1088  020D                     	;# 
  1089  020E                     	;# 
  1090  0210                     	;# 
  1091  0211                     	;# 
  1092  0211                     	;# 
  1093  0212                     	;# 
  1094  0212                     	;# 
  1095  0213                     	;# 
  1096  0213                     	;# 
  1097  0214                     	;# 
  1098  0214                     	;# 
  1099  0215                     	;# 
  1100  0215                     	;# 
  1101  0215                     	;# 
  1102  0216                     	;# 
  1103  0216                     	;# 
  1104  0217                     	;# 
  1105  0217                     	;# 
  1106  028C                     	;# 
  1107  028D                     	;# 
  1108  028E                     	;# 
  1109  0291                     	;# 
  1110  0291                     	;# 
  1111  0292                     	;# 
  1112  0293                     	;# 
  1113  0298                     	;# 
  1114  0298                     	;# 
  1115  0299                     	;# 
  1116  029A                     	;# 
  1117  030C                     	;# 
  1118  030D                     	;# 
  1119  030E                     	;# 
  1120  038C                     	;# 
  1121  038D                     	;# 
  1122  038E                     	;# 
  1123  0390                     	;# 
  1124  0391                     	;# 
  1125  0392                     	;# 
  1126  0393                     	;# 
  1127  0394                     	;# 
  1128  0395                     	;# 
  1129  0396                     	;# 
  1130  0397                     	;# 
  1131  0398                     	;# 
  1132  0399                     	;# 
  1133  039D                     	;# 
  1134  039E                     	;# 
  1135  039F                     	;# 
  1136  0511                     	;# 
  1137  0513                     	;# 
  1138  051A                     	;# 
  1139  0811                     	;# 
  1140  0812                     	;# 
  1141  0813                     	;# 
  1142  0814                     	;# 
  1143  0815                     	;# 
  1144  0816                     	;# 
  1145  0817                     	;# 
  1146  0818                     	;# 
  1147  0819                     	;# 
  1148  081A                     	;# 
  1149  081B                     	;# 
  1150  081C                     	;# 
  1151  081D                     	;# 
  1152  081E                     	;# 
  1153  081F                     	;# 
  1154  0820                     	;# 
  1155  0821                     	;# 
  1156  0821                     	;# 
  1157  0822                     	;# 
  1158  0823                     	;# 
  1159  0823                     	;# 
  1160  0824                     	;# 
  1161  0825                     	;# 
  1162  0825                     	;# 
  1163  0826                     	;# 
  1164  0827                     	;# 
  1165  0827                     	;# 
  1166  0828                     	;# 
  1167  0829                     	;# 
  1168  082A                     	;# 
  1169  082B                     	;# 
  1170  082C                     	;# 
  1171  082D                     	;# 
  1172  082E                     	;# 
  1173  082F                     	;# 
  1174  0831                     	;# 
  1175  0832                     	;# 
  1176  0833                     	;# 
  1177  0834                     	;# 
  1178  0835                     	;# 
  1179  0836                     	;# 
  1180  0837                     	;# 
  1181  0838                     	;# 
  1182  0839                     	;# 
  1183  083A                     	;# 
  1184  083B                     	;# 
  1185  083C                     	;# 
  1186  083D                     	;# 
  1187  083E                     	;# 
  1188  083F                     	;# 
  1189  0840                     	;# 
  1190  0841                     	;# 
  1191  0841                     	;# 
  1192  0842                     	;# 
  1193  0843                     	;# 
  1194  0843                     	;# 
  1195  0844                     	;# 
  1196  0845                     	;# 
  1197  0845                     	;# 
  1198  0846                     	;# 
  1199  0847                     	;# 
  1200  0847                     	;# 
  1201  0848                     	;# 
  1202  0849                     	;# 
  1203  084A                     	;# 
  1204  084B                     	;# 
  1205  084C                     	;# 
  1206  084D                     	;# 
  1207  084E                     	;# 
  1208  084F                     	;# 
  1209  0FE4                     	;# 
  1210  0FE5                     	;# 
  1211  0FE6                     	;# 
  1212  0FE7                     	;# 
  1213  0FE8                     	;# 
  1214  0FE9                     	;# 
  1215  0FEA                     	;# 
  1216  0FEB                     	;# 
  1217  0FED                     	;# 
  1218  0FEE                     	;# 
  1219  0FEF                     	;# 
  1220  0000                     	;# 
  1221  0001                     	;# 
  1222  0002                     	;# 
  1223  0003                     	;# 
  1224  0004                     	;# 
  1225  0005                     	;# 
  1226  0006                     	;# 
  1227  0007                     	;# 
  1228  0008                     	;# 
  1229  0009                     	;# 
  1230  000A                     	;# 
  1231  000B                     	;# 
  1232  000C                     	;# 
  1233  000D                     	;# 
  1234  000E                     	;# 
  1235  0010                     	;# 
  1236  0011                     	;# 
  1237  0012                     	;# 
  1238  0014                     	;# 
  1239  0015                     	;# 
  1240  0016                     	;# 
  1241  0016                     	;# 
  1242  0017                     	;# 
  1243  0018                     	;# 
  1244  0019                     	;# 
  1245  001A                     	;# 
  1246  001B                     	;# 
  1247  001C                     	;# 
  1248  008C                     	;# 
  1249  008D                     	;# 
  1250  008E                     	;# 
  1251  0090                     	;# 
  1252  0091                     	;# 
  1253  0092                     	;# 
  1254  0094                     	;# 
  1255  0095                     	;# 
  1256  0096                     	;# 
  1257  0097                     	;# 
  1258  0098                     	;# 
  1259  0099                     	;# 
  1260  009A                     	;# 
  1261  009B                     	;# 
  1262  009B                     	;# 
  1263  009C                     	;# 
  1264  009D                     	;# 
  1265  009E                     	;# 
  1266  009F                     	;# 
  1267  010C                     	;# 
  1268  010D                     	;# 
  1269  010E                     	;# 
  1270  0111                     	;# 
  1271  0112                     	;# 
  1272  0113                     	;# 
  1273  0114                     	;# 
  1274  0115                     	;# 
  1275  0116                     	;# 
  1276  0117                     	;# 
  1277  0118                     	;# 
  1278  0119                     	;# 
  1279  011D                     	;# 
  1280  011D                     	;# 
  1281  011E                     	;# 
  1282  011F                     	;# 
  1283  018C                     	;# 
  1284  018D                     	;# 
  1285  0191                     	;# 
  1286  0191                     	;# 
  1287  0192                     	;# 
  1288  0193                     	;# 
  1289  0193                     	;# 
  1290  0193                     	;# 
  1291  0194                     	;# 
  1292  0195                     	;# 
  1293  0196                     	;# 
  1294  0199                     	;# 
  1295  0199                     	;# 
  1296  0199                     	;# 
  1297  019A                     	;# 
  1298  019A                     	;# 
  1299  019A                     	;# 
  1300  019B                     	;# 
  1301  019B                     	;# 
  1302  019B                     	;# 
  1303  019B                     	;# 
  1304  019B                     	;# 
  1305  019C                     	;# 
  1306  019C                     	;# 
  1307  019C                     	;# 
  1308  019D                     	;# 
  1309  019D                     	;# 
  1310  019D                     	;# 
  1311  019E                     	;# 
  1312  019E                     	;# 
  1313  019E                     	;# 
  1314  019F                     	;# 
  1315  019F                     	;# 
  1316  019F                     	;# 
  1317  019F                     	;# 
  1318  019F                     	;# 
  1319  020C                     	;# 
  1320  020D                     	;# 
  1321  020E                     	;# 
  1322  0210                     	;# 
  1323  0211                     	;# 
  1324  0211                     	;# 
  1325  0212                     	;# 
  1326  0212                     	;# 
  1327  0213                     	;# 
  1328  0213                     	;# 
  1329  0214                     	;# 
  1330  0214                     	;# 
  1331  0215                     	;# 
  1332  0215                     	;# 
  1333  0215                     	;# 
  1334  0216                     	;# 
  1335  0216                     	;# 
  1336  0217                     	;# 
  1337  0217                     	;# 
  1338  028C                     	;# 
  1339  028D                     	;# 
  1340  028E                     	;# 
  1341  0291                     	;# 
  1342  0291                     	;# 
  1343  0292                     	;# 
  1344  0293                     	;# 
  1345  0298                     	;# 
  1346  0298                     	;# 
  1347  0299                     	;# 
  1348  029A                     	;# 
  1349  030C                     	;# 
  1350  030D                     	;# 
  1351  030E                     	;# 
  1352  038C                     	;# 
  1353  038D                     	;# 
  1354  038E                     	;# 
  1355  0390                     	;# 
  1356  0391                     	;# 
  1357  0392                     	;# 
  1358  0393                     	;# 
  1359  0394                     	;# 
  1360  0395                     	;# 
  1361  0396                     	;# 
  1362  0397                     	;# 
  1363  0398                     	;# 
  1364  0399                     	;# 
  1365  039D                     	;# 
  1366  039E                     	;# 
  1367  039F                     	;# 
  1368  0511                     	;# 
  1369  0513                     	;# 
  1370  051A                     	;# 
  1371  0811                     	;# 
  1372  0812                     	;# 
  1373  0813                     	;# 
  1374  0814                     	;# 
  1375  0815                     	;# 
  1376  0816                     	;# 
  1377  0817                     	;# 
  1378  0818                     	;# 
  1379  0819                     	;# 
  1380  081A                     	;# 
  1381  081B                     	;# 
  1382  081C                     	;# 
  1383  081D                     	;# 
  1384  081E                     	;# 
  1385  081F                     	;# 
  1386  0820                     	;# 
  1387  0821                     	;# 
  1388  0821                     	;# 
  1389  0822                     	;# 
  1390  0823                     	;# 
  1391  0823                     	;# 
  1392  0824                     	;# 
  1393  0825                     	;# 
  1394  0825                     	;# 
  1395  0826                     	;# 
  1396  0827                     	;# 
  1397  0827                     	;# 
  1398  0828                     	;# 
  1399  0829                     	;# 
  1400  082A                     	;# 
  1401  082B                     	;# 
  1402  082C                     	;# 
  1403  082D                     	;# 
  1404  082E                     	;# 
  1405  082F                     	;# 
  1406  0831                     	;# 
  1407  0832                     	;# 
  1408  0833                     	;# 
  1409  0834                     	;# 
  1410  0835                     	;# 
  1411  0836                     	;# 
  1412  0837                     	;# 
  1413  0838                     	;# 
  1414  0839                     	;# 
  1415  083A                     	;# 
  1416  083B                     	;# 
  1417  083C                     	;# 
  1418  083D                     	;# 
  1419  083E                     	;# 
  1420  083F                     	;# 
  1421  0840                     	;# 
  1422  0841                     	;# 
  1423  0841                     	;# 
  1424  0842                     	;# 
  1425  0843                     	;# 
  1426  0843                     	;# 
  1427  0844                     	;# 
  1428  0845                     	;# 
  1429  0845                     	;# 
  1430  0846                     	;# 
  1431  0847                     	;# 
  1432  0847                     	;# 
  1433  0848                     	;# 
  1434  0849                     	;# 
  1435  084A                     	;# 
  1436  084B                     	;# 
  1437  084C                     	;# 
  1438  084D                     	;# 
  1439  084E                     	;# 
  1440  084F                     	;# 
  1441  0FE4                     	;# 
  1442  0FE5                     	;# 
  1443  0FE6                     	;# 
  1444  0FE7                     	;# 
  1445  0FE8                     	;# 
  1446  0FE9                     	;# 
  1447  0FEA                     	;# 
  1448  0FEB                     	;# 
  1449  0FED                     	;# 
  1450  0FEE                     	;# 
  1451  0FEF                     	;# 
  1452                           
  1453                           	psect	idataBANK1
  1454  0D42                     __pidataBANK1:	
  1455                           
  1456                           ;initializer for _dest_address
  1457  0D42  3400               	retlw	0
  1458  0D43  3400               	retlw	0
  1459  0D44  3400               	retlw	0
  1460  0D45  3400               	retlw	0
  1461  0D46  3400               	retlw	0
  1462  0D47  3400               	retlw	0
  1463  0D48  34FF               	retlw	255
  1464  0D49  34FF               	retlw	255
  1465                           
  1466                           	psect	idataBANK3
  1467  0052                     __pidataBANK3:	
  1468                           
  1469                           ;initializer for _CRC16_LookupHigh
  1470  0052  3400               	retlw	0
  1471  0053  3400               	retlw	0
  1472  0054  3410               	retlw	16
  1473  0055  3400               	retlw	0
  1474  0056  3420               	retlw	32
  1475  0057  3400               	retlw	0
  1476  0058  3430               	retlw	48
  1477  0059  3400               	retlw	0
  1478  005A  3440               	retlw	64
  1479  005B  3400               	retlw	0
  1480  005C  3450               	retlw	80
  1481  005D  3400               	retlw	0
  1482  005E  3460               	retlw	96
  1483  005F  3400               	retlw	0
  1484  0060  3470               	retlw	112
  1485  0061  3400               	retlw	0
  1486  0062  3481               	retlw	129
  1487  0063  3400               	retlw	0
  1488  0064  3491               	retlw	145
  1489  0065  3400               	retlw	0
  1490  0066  34A1               	retlw	161
  1491  0067  3400               	retlw	0
  1492  0068  34B1               	retlw	177
  1493  0069  3400               	retlw	0
  1494  006A  34C1               	retlw	193
  1495  006B  3400               	retlw	0
  1496  006C  34D1               	retlw	209
  1497  006D  3400               	retlw	0
  1498  006E  34E1               	retlw	225
  1499  006F  3400               	retlw	0
  1500  0070  34F1               	retlw	241
  1501  0071  3400               	retlw	0
  1502                           
  1503                           ;initializer for _CRC16_LookupLow
  1504  0072  3400               	retlw	0
  1505  0073  3400               	retlw	0
  1506  0074  3421               	retlw	33
  1507  0075  3400               	retlw	0
  1508  0076  3442               	retlw	66
  1509  0077  3400               	retlw	0
  1510  0078  3463               	retlw	99
  1511  0079  3400               	retlw	0
  1512  007A  3484               	retlw	132
  1513  007B  3400               	retlw	0
  1514  007C  34A5               	retlw	165
  1515  007D  3400               	retlw	0
  1516  007E  34C6               	retlw	198
  1517  007F  3400               	retlw	0
  1518  0080  34E7               	retlw	231
  1519  0081  3400               	retlw	0
  1520  0082  3408               	retlw	8
  1521  0083  3400               	retlw	0
  1522  0084  3429               	retlw	41
  1523  0085  3400               	retlw	0
  1524  0086  344A               	retlw	74
  1525  0087  3400               	retlw	0
  1526  0088  346B               	retlw	107
  1527  0089  3400               	retlw	0
  1528  008A  348C               	retlw	140
  1529  008B  3400               	retlw	0
  1530  008C  34AD               	retlw	173
  1531  008D  3400               	retlw	0
  1532  008E  34CE               	retlw	206
  1533  008F  3400               	retlw	0
  1534  0090  34EF               	retlw	239
  1535  0091  3400               	retlw	0
  1536  0016                     _TMR1	set	22
  1537  0011                     _PIR1bits	set	17
  1538  0012                     _PIR2bits	set	18
  1539  000D                     _PORTBbits	set	13
  1540  000E                     _PORTCbits	set	14
  1541  0018                     _T1CONbits	set	24
  1542  0019                     _T1GCONbits	set	25
  1543  009B                     _ADRES	set	155
  1544  009D                     _ADCON0bits	set	157
  1545  009E                     _ADCON1bits	set	158
  1546  009A                     _OSCSTATbits	set	154
  1547  008C                     _TRISA	set	140
  1548  008D                     _TRISB	set	141
  1549  008E                     _TRISC	set	142
  1550  0097                     _WDTCONbits	set	151
  1551  04B8                     _SWDTEN	set	1208
  1552  018C                     _ANSELA	set	396
  1553  018D                     _ANSELB	set	397
  1554  0191                     _EEADRL	set	401
  1555  0195                     _EECON1bits	set	405
  1556  0196                     _EECON2	set	406
  1557  0193                     _EEDATL	set	403
  1558  0199                     _RC1REG	set	409
  1559  019D                     _RC1STAbits	set	413
  1560  019B                     _SPBRG	set	411
  1561  019A                     _TX1REG	set	410
  1562  019E                     _TX1STAbits	set	414
  1563  019E                     _TXSTAbits	set	414
  1564                           
  1565                           ; #config settings
  1566  0000                     
  1567                           	psect	cinit
  1568  0F0D                     start_initialization:	
  1569  0F0D                     __initialization:	
  1570                           
  1571                           ; Clear objects allocated to COMMON
  1572  0F0D  01FC               	clrf	__pbssCOMMON& (0+127)
  1573                           
  1574                           ; Clear objects allocated to BANK1
  1575  0F0E  30A0               	movlw	low __pbssBANK1
  1576  0F0F  0084               	movwf	4
  1577  0F10  3000               	movlw	high __pbssBANK1
  1578  0F11  0085               	movwf	5
  1579  0F12  3037               	movlw	55
  1580  0F13  318D  253C  318F   	fcall	clear_ram0
  1581                           
  1582                           ; Clear objects allocated to BANK2
  1583  0F16  3020               	movlw	low __pbssBANK2
  1584  0F17  0084               	movwf	4
  1585  0F18  3001               	movlw	high __pbssBANK2
  1586  0F19  0085               	movwf	5
  1587  0F1A  303C               	movlw	60
  1588  0F1B  318D  253C  318F   	fcall	clear_ram0
  1589                           
  1590                           ; Initialize objects allocated to BANK1
  1591  0F1E  3042               	movlw	low __pidataBANK1
  1592  0F1F  0084               	movwf	4
  1593  0F20  308D               	movlw	(high __pidataBANK1)| (0+128)
  1594  0F21  0085               	movwf	5
  1595  0F22  30E4               	movlw	low __pdataBANK1
  1596  0F23  0086               	movwf	6
  1597  0F24  3000               	movlw	high __pdataBANK1
  1598  0F25  0087               	movwf	7
  1599  0F26  3008               	movlw	8
  1600  0F27  318D  2536  318F   	fcall	init_ram
  1601                           
  1602                           ; Initialize objects allocated to BANK3
  1603  0F2A  3052               	movlw	low __pidataBANK3
  1604  0F2B  0084               	movwf	4
  1605  0F2C  3080               	movlw	(high __pidataBANK3)| (0+128)
  1606  0F2D  0085               	movwf	5
  1607  0F2E  30A0               	movlw	low __pdataBANK3
  1608  0F2F  0086               	movwf	6
  1609  0F30  3001               	movlw	high __pdataBANK3
  1610  0F31  0087               	movwf	7
  1611  0F32  3040               	movlw	64
  1612  0F33  318D  2536         	fcall	init_ram
  1613  0F35                     end_of_initialization:	
  1614                           ;End of C runtime variable initialization code
  1615                           
  1616  0F35                     __end_of__initialization:	
  1617  0F35  0020               	movlb	0
  1618  0F36  3181  2905         	ljmp	_main	;jump to C main() function
  1619                           
  1620                           	psect	bssCOMMON
  1621  007C                     __pbssCOMMON:	
  1622  007C                     _calc_checksum:	
  1623  007C                     	ds	1
  1624                           
  1625                           	psect	bssBANK1
  1626  00A0                     __pbssBANK1:	
  1627  00A0                     _CRC16_Reg:	
  1628  00A0                     	ds	2
  1629  00A2                     _cmd_itr:	
  1630  00A2                     	ds	2
  1631  00A4                     _error:	
  1632  00A4                     	ds	2
  1633  00A6                     _last_xbee_baud:	
  1634  00A6                     	ds	2
  1635  00A8                     _CRC16_High:	
  1636  00A8                     	ds	1
  1637  00A9                     _CRC16_Low:	
  1638  00A9                     	ds	1
  1639  00AA                     _frame_id_itr:	
  1640  00AA                     	ds	1
  1641  00AB                     _tmr1_err:	
  1642  00AB                     	ds	1
  1643  00AC                     _xbee_reset_flag:	
  1644  00AC                     	ds	1
  1645  00AD                     _packet_buffer:	
  1646  00AD                     	ds	32
  1647  00CD                     _calibrationData:	
  1648  00CD                     	ds	6
  1649  00D3                     _intervalData:	
  1650  00D3                     	ds	4
  1651                           
  1652                           	psect	dataBANK1
  1653  00E4                     __pdataBANK1:	
  1654  00E4                     _dest_address:	
  1655  00E4                     	ds	8
  1656                           
  1657                           	psect	bssBANK2
  1658  0120                     __pbssBANK2:	
  1659  0120                     _apiFrame:	
  1660  0120                     	ds	60
  1661                           
  1662                           	psect	dataBANK3
  1663  01A0                     __pdataBANK3:	
  1664  01A0                     _CRC16_LookupHigh:	
  1665  01A0                     	ds	32
  1666  01C0                     _CRC16_LookupLow:	
  1667  01C0                     	ds	32
  1668                           
  1669                           	psect	clrtext
  1670  0D3C                     clear_ram0:	
  1671                           ;	Called with FSR0 containing the base address, and
  1672                           ;	WREG with the size to clear
  1673                           
  1674  0D3C  0064               	clrwdt	;clear the watchdog before getting into this loop
  1675  0D3D                     clrloop0:	
  1676  0D3D  0180               	clrf	0	;clear RAM location pointed to by FSR
  1677  0D3E  3101               	addfsr 0,1
  1678  0D3F  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1679  0D40  2D3D               	goto	clrloop0	;have we reached the end yet?
  1680  0D41  3400               	retlw	0	;all done for this memory range, return
  1681                           
  1682                           	psect	inittext
  1683  0D36                     init_ram:	
  1684  0D36  00FE               	movwf	126
  1685  0D37                     initloop:	
  1686  0D37  0012               	moviw fsr0++
  1687  0D38  001E               	movwi fsr1++
  1688  0D39  0BFE               	decfsz	126,f
  1689  0D3A  2D37               	goto	initloop
  1690  0D3B  3400               	retlw	0
  1691                           
  1692                           	psect	cstackBANK1
  1693  00D7                     __pcstackBANK1:	
  1694  00D7                     ??_main:	
  1695                           
  1696                           ; 0 bytes @ 0x0
  1697  00D7                     	ds	5
  1698  00DC                     main@thermistorResistance:	
  1699                           
  1700                           ; 4 bytes @ 0x5
  1701  00DC                     	ds	4
  1702  00E0                     _main$1774:	
  1703                           
  1704                           ; 4 bytes @ 0x9
  1705  00E0                     	ds	4
  1706                           
  1707                           	psect	cstackCOMMON
  1708  0070                     __pcstackCOMMON:	
  1709  0070                     ?_XBee_Disable:	
  1710  0070                     ?_CRC16_Init:	
  1711                           ; 0 bytes @ 0x0
  1712                           
  1713  0070                     ?_SendReceiverBroadcastRequest:	
  1714                           ; 0 bytes @ 0x0
  1715                           
  1716  0070                     ?_XBee_Wake:	
  1717                           ; 0 bytes @ 0x0
  1718                           
  1719  0070                     ?_XBee_Sleep:	
  1720                           ; 0 bytes @ 0x0
  1721                           
  1722  0070                     ?_Timer1_Disable:	
  1723                           ; 0 bytes @ 0x0
  1724                           
  1725  0070                     ?_SendPacket:	
  1726                           ; 0 bytes @ 0x0
  1727                           
  1728  0070                     ?_isr:	
  1729                           ; 0 bytes @ 0x0
  1730                           
  1731  0070                     ??_isr:	
  1732                           ; 0 bytes @ 0x0
  1733                           
  1734  0070                     ?_UART_Transmit:	
  1735                           ; 0 bytes @ 0x0
  1736                           
  1737  0070                     ?_XBee_Reset:	
  1738                           ; 0 bytes @ 0x0
  1739                           
  1740  0070                     ?_CRC16_Update4Bits:	
  1741                           ; 0 bytes @ 0x0
  1742                           
  1743  0070                     ?_CRC16_Update:	
  1744                           ; 0 bytes @ 0x0
  1745                           
  1746                           
  1747                           ; 0 bytes @ 0x0
  1748  0070                     	ds	1
  1749  0071                     ?_EEPROM_Read:	
  1750  0071                     ?_EEPROM_Write:	
  1751                           ; 0 bytes @ 0x1
  1752                           
  1753  0071                     ??_XBee_Disable:	
  1754                           ; 0 bytes @ 0x1
  1755                           
  1756  0071                     ?_ADC_Enable:	
  1757                           ; 0 bytes @ 0x1
  1758                           
  1759  0071                     ??_CRC16_Init:	
  1760                           ; 0 bytes @ 0x1
  1761                           
  1762  0071                     ??_XBee_Sleep:	
  1763                           ; 0 bytes @ 0x1
  1764                           
  1765  0071                     ?_sleep:	
  1766                           ; 0 bytes @ 0x1
  1767                           
  1768  0071                     ??_Timer1_Disable:	
  1769                           ; 0 bytes @ 0x1
  1770                           
  1771  0071                     ?_Timer1_Init:	
  1772                           ; 0 bytes @ 0x1
  1773                           
  1774  0071                     ??_UART_Transmit:	
  1775                           ; 0 bytes @ 0x1
  1776                           
  1777  0071                     ??_CRC16_Update4Bits:	
  1778                           ; 0 bytes @ 0x1
  1779                           
  1780  0071                     ?_memset:	
  1781                           ; 0 bytes @ 0x1
  1782                           
  1783  0071                     ?_checksum:	
  1784                           ; 1 bytes @ 0x1
  1785                           
  1786  0071                     ?_doChecksumVerify:	
  1787                           ; 1 bytes @ 0x1
  1788                           
  1789  0071                     ?_memcpy:	
  1790                           ; 1 bytes @ 0x1
  1791                           
  1792  0071                     ?_UART_Receive:	
  1793                           ; 2 bytes @ 0x1
  1794                           
  1795  0071                     ?___awdiv:	
  1796                           ; 2 bytes @ 0x1
  1797                           
  1798  0071                     ?___wmul:	
  1799                           ; 2 bytes @ 0x1
  1800                           
  1801  0071                     ?_swap_endian_32:	
  1802                           ; 2 bytes @ 0x1
  1803                           
  1804  0071                     UART_Transmit@c:	
  1805                           ; 4 bytes @ 0x1
  1806                           
  1807  0071                     ADC_Enable@port_pin:	
  1808                           ; 1 bytes @ 0x1
  1809                           
  1810  0071                     EEPROM_Read@data:	
  1811                           ; 1 bytes @ 0x1
  1812                           
  1813  0071                     EEPROM_Write@data:	
  1814                           ; 1 bytes @ 0x1
  1815                           
  1816  0071                     Timer1_Init@tmr1cs:	
  1817                           ; 1 bytes @ 0x1
  1818                           
  1819  0071                     sleep@seconds:	
  1820                           ; 2 bytes @ 0x1
  1821                           
  1822  0071                     checksum@length:	
  1823                           ; 2 bytes @ 0x1
  1824                           
  1825  0071                     doChecksumVerify@length:	
  1826                           ; 2 bytes @ 0x1
  1827                           
  1828  0071                     ___awdiv@divisor:	
  1829                           ; 2 bytes @ 0x1
  1830                           
  1831  0071                     memcpy@d1:	
  1832                           ; 2 bytes @ 0x1
  1833                           
  1834  0071                     memset@c:	
  1835                           ; 2 bytes @ 0x1
  1836                           
  1837  0071                     ___wmul@multiplier:	
  1838                           ; 2 bytes @ 0x1
  1839                           
  1840  0071                     UART_Receive@tmo:	
  1841                           ; 2 bytes @ 0x1
  1842                           
  1843  0071                     swap_endian_32@n:	
  1844                           ; 4 bytes @ 0x1
  1845                           
  1846                           
  1847                           ; 4 bytes @ 0x1
  1848  0071                     	ds	1
  1849  0072                     ??_ADC_Enable:	
  1850  0072                     ?_UART_TransmitMsg:	
  1851                           ; 0 bytes @ 0x2
  1852                           
  1853  0072                     UART_TransmitMsg@len:	
  1854                           ; 0 bytes @ 0x2
  1855                           
  1856  0072                     EEPROM_Read@length:	
  1857                           ; 2 bytes @ 0x2
  1858                           
  1859  0072                     EEPROM_Write@length:	
  1860                           ; 2 bytes @ 0x2
  1861                           
  1862                           
  1863                           ; 2 bytes @ 0x2
  1864  0072                     	ds	1
  1865  0073                     ??_sleep:	
  1866  0073                     ??_checksum:	
  1867                           ; 0 bytes @ 0x3
  1868                           
  1869  0073                     doChecksumVerify@checksum:	
  1870                           ; 0 bytes @ 0x3
  1871                           
  1872  0073                     Timer1_Init@t1ckps:	
  1873                           ; 1 bytes @ 0x3
  1874                           
  1875  0073                     sleep@i:	
  1876                           ; 2 bytes @ 0x3
  1877                           
  1878  0073                     ___awdiv@dividend:	
  1879                           ; 2 bytes @ 0x3
  1880                           
  1881  0073                     memcpy@s1:	
  1882                           ; 2 bytes @ 0x3
  1883                           
  1884  0073                     memset@n:	
  1885                           ; 2 bytes @ 0x3
  1886                           
  1887  0073                     ___wmul@multiplicand:	
  1888                           ; 2 bytes @ 0x3
  1889                           
  1890                           
  1891                           ; 2 bytes @ 0x3
  1892  0073                     	ds	1
  1893  0074                     ??_EEPROM_Read:	
  1894  0074                     ??_EEPROM_Write:	
  1895                           ; 0 bytes @ 0x4
  1896                           
  1897  0074                     ??_doChecksumVerify:	
  1898                           ; 0 bytes @ 0x4
  1899                           
  1900  0074                     UART_TransmitMsg@end_char:	
  1901                           ; 0 bytes @ 0x4
  1902                           
  1903  0074                     ADC_Enable@select:	
  1904                           ; 1 bytes @ 0x4
  1905                           
  1906                           
  1907                           ; 1 bytes @ 0x4
  1908  0074                     	ds	1
  1909  0075                     ??_memset:	
  1910  0075                     ??_Timer1_Init:	
  1911                           ; 0 bytes @ 0x5
  1912                           
  1913  0075                     ??_UART_TransmitMsg:	
  1914                           ; 0 bytes @ 0x5
  1915                           
  1916  0075                     ??_UART_Receive:	
  1917                           ; 0 bytes @ 0x5
  1918                           
  1919  0075                     ??___awdiv:	
  1920                           ; 0 bytes @ 0x5
  1921                           
  1922  0075                     ??___wmul:	
  1923                           ; 0 bytes @ 0x5
  1924                           
  1925  0075                     checksum@addr:	
  1926                           ; 0 bytes @ 0x5
  1927                           
  1928  0075                     EEPROM_Write@address:	
  1929                           ; 1 bytes @ 0x5
  1930                           
  1931  0075                     memcpy@n:	
  1932                           ; 1 bytes @ 0x5
  1933                           
  1934  0075                     ___wmul@product:	
  1935                           ; 2 bytes @ 0x5
  1936                           
  1937  0075                     swap_endian_32@r:	
  1938                           ; 2 bytes @ 0x5
  1939                           
  1940                           
  1941                           ; 4 bytes @ 0x5
  1942  0075                     	ds	1
  1943  0076                     UART_TransmitMsg@_msg:	
  1944  0076                     checksum@address:	
  1945                           ; 1 bytes @ 0x6
  1946                           
  1947  0076                     doChecksumVerify@address:	
  1948                           ; 1 bytes @ 0x6
  1949                           
  1950  0076                     EEPROM_Read@address:	
  1951                           ; 1 bytes @ 0x6
  1952                           
  1953  0076                     EEPROM_Write@i:	
  1954                           ; 1 bytes @ 0x6
  1955                           
  1956  0076                     ___awdiv@counter:	
  1957                           ; 1 bytes @ 0x6
  1958                           
  1959  0076                     memset@p1:	
  1960                           ; 1 bytes @ 0x6
  1961                           
  1962                           
  1963                           ; 1 bytes @ 0x6
  1964  0076                     	ds	1
  1965  0077                     ?_timer1_poll_delay:	
  1966  0077                     ??_memcpy:	
  1967                           ; 0 bytes @ 0x7
  1968                           
  1969  0077                     checksum@checksum:	
  1970                           ; 0 bytes @ 0x7
  1971                           
  1972  0077                     doChecksumVerify@check:	
  1973                           ; 1 bytes @ 0x7
  1974                           
  1975  0077                     EEPROM_Read@i:	
  1976                           ; 1 bytes @ 0x7
  1977                           
  1978  0077                     CRC16_Update4Bits@val:	
  1979                           ; 1 bytes @ 0x7
  1980                           
  1981  0077                     ___awdiv@sign:	
  1982                           ; 1 bytes @ 0x7
  1983                           
  1984  0077                     memset@p:	
  1985                           ; 1 bytes @ 0x7
  1986                           
  1987  0077                     timer1_poll_delay@ticks:	
  1988                           ; 1 bytes @ 0x7
  1989                           
  1990  0077                     UART_TransmitMsg@i:	
  1991                           ; 2 bytes @ 0x7
  1992                           
  1993  0077                     UART_Receive@i:	
  1994                           ; 2 bytes @ 0x7
  1995                           
  1996                           
  1997                           ; 4 bytes @ 0x7
  1998  0077                     	ds	1
  1999  0078                     CRC16_Update4Bits@t:	
  2000  0078                     checksum@i:	
  2001                           ; 1 bytes @ 0x8
  2002                           
  2003  0078                     doChecksumVerify@i:	
  2004                           ; 2 bytes @ 0x8
  2005                           
  2006  0078                     ___awdiv@quotient:	
  2007                           ; 2 bytes @ 0x8
  2008                           
  2009  0078                     memcpy@d:	
  2010                           ; 2 bytes @ 0x8
  2011                           
  2012                           
  2013                           ; 2 bytes @ 0x8
  2014  0078                     	ds	1
  2015  0079                     ??_CRC16_Update:	
  2016  0079                     timer1_poll_delay@division:	
  2017                           ; 0 bytes @ 0x9
  2018                           
  2019                           
  2020                           ; 2 bytes @ 0x9
  2021  0079                     	ds	1
  2022  007A                     CRC16_Update@val:	
  2023  007A                     memcpy@s:	
  2024                           ; 1 bytes @ 0xA
  2025                           
  2026                           
  2027                           ; 2 bytes @ 0xA
  2028  007A                     	ds	1
  2029  007B                     ??_timer1_poll_delay:	
  2030  007B                     ??_CRC16_Generate:	
  2031                           ; 0 bytes @ 0xB
  2032                           
  2033                           
  2034                           ; 0 bytes @ 0xB
  2035  007B                     	ds	1
  2036  007C                     ??_XBee_Enable:	
  2037  007C                     ??_XBee_Wake:	
  2038                           ; 0 bytes @ 0xC
  2039                           
  2040  007C                     ??_pulseLed:	
  2041                           ; 0 bytes @ 0xC
  2042                           
  2043  007C                     ??_timer1_poll_delay_ms:	
  2044                           ; 0 bytes @ 0xC
  2045                           
  2046  007C                     ??_XBee_Reset:	
  2047                           ; 0 bytes @ 0xC
  2048                           
  2049                           
  2050                           	psect	cstackBANK0
  2051  0020                     __pcstackBANK0:	
  2052                           ; 0 bytes @ 0xC
  2053                           
  2054  0020                     ??_swap_endian_32:	
  2055  0020                     ?_CRC16_Generate:	
  2056                           ; 0 bytes @ 0x0
  2057                           
  2058  0020                     ?_UART_ReceiveMsgTmo:	
  2059                           ; 2 bytes @ 0x0
  2060                           
  2061  0020                     timer1_poll_delay@tmr1_turned_on:	
  2062                           ; 2 bytes @ 0x0
  2063                           
  2064  0020                     UART_ReceiveMsgTmo@len:	
  2065                           ; 1 bytes @ 0x0
  2066                           
  2067  0020                     CRC16_Generate@len:	
  2068                           ; 2 bytes @ 0x0
  2069                           
  2070                           
  2071                           ; 2 bytes @ 0x0
  2072  0020                     	ds	1
  2073  0021                     ?_pulseLed:	
  2074  0021                     ?_timer1_poll_delay_ms:	
  2075                           ; 0 bytes @ 0x1
  2076                           
  2077  0021                     ?_ADC_ReadOne:	
  2078                           ; 0 bytes @ 0x1
  2079                           
  2080  0021                     pulseLed@ticks:	
  2081                           ; 2 bytes @ 0x1
  2082                           
  2083  0021                     timer1_poll_delay_ms@ms:	
  2084                           ; 2 bytes @ 0x1
  2085                           
  2086                           
  2087                           ; 2 bytes @ 0x1
  2088  0021                     	ds	1
  2089  0022                     UART_ReceiveMsgTmo@end_char:	
  2090  0022                     CRC16_Generate@msg:	
  2091                           ; 1 bytes @ 0x2
  2092                           
  2093                           
  2094                           ; 1 bytes @ 0x2
  2095  0022                     	ds	1
  2096  0023                     ??_ADC_ReadOne:	
  2097  0023                     CRC16_Generate@i:	
  2098                           ; 0 bytes @ 0x3
  2099                           
  2100  0023                     UART_ReceiveMsgTmo@tmo:	
  2101                           ; 2 bytes @ 0x3
  2102                           
  2103                           
  2104                           ; 4 bytes @ 0x3
  2105  0023                     	ds	1
  2106  0024                     ADC_ReadOne@channel:	
  2107                           
  2108                           ; 1 bytes @ 0x4
  2109  0024                     	ds	1
  2110  0025                     ADC_ReadOne@result:	
  2111                           
  2112                           ; 2 bytes @ 0x5
  2113  0025                     	ds	2
  2114  0027                     ??_UART_ReceiveMsgTmo:	
  2115  0027                     ?_ADC_Read:	
  2116                           ; 0 bytes @ 0x7
  2117                           
  2118  0027                     ADC_Read@channel:	
  2119                           ; 2 bytes @ 0x7
  2120                           
  2121                           
  2122                           ; 1 bytes @ 0x7
  2123  0027                     	ds	2
  2124  0029                     ??_ADC_Read:	
  2125  0029                     UART_ReceiveMsgTmo@msg:	
  2126                           ; 0 bytes @ 0x9
  2127                           
  2128                           
  2129                           ; 1 bytes @ 0x9
  2130  0029                     	ds	1
  2131  002A                     UART_ReceiveMsgTmo@c:	
  2132                           
  2133                           ; 2 bytes @ 0xA
  2134  002A                     	ds	1
  2135  002B                     ADC_Read@res:	
  2136                           
  2137                           ; 8 bytes @ 0xB
  2138  002B                     	ds	1
  2139  002C                     UART_ReceiveMsgTmo@i:	
  2140                           
  2141                           ; 2 bytes @ 0xC
  2142  002C                     	ds	2
  2143  002E                     ?_XBAPI_HandleFrame:	
  2144  002E                     XBAPI_HandleFrame@expected:	
  2145                           ; 2 bytes @ 0xE
  2146                           
  2147                           
  2148                           ; 2 bytes @ 0xE
  2149  002E                     	ds	2
  2150  0030                     XBAPI_HandleFrame@do_tmo:	
  2151                           
  2152                           ; 2 bytes @ 0x10
  2153  0030                     	ds	2
  2154  0032                     ??_XBAPI_HandleFrame:	
  2155                           
  2156                           ; 0 bytes @ 0x12
  2157  0032                     	ds	1
  2158  0033                     ADC_Read@sum:	
  2159                           
  2160                           ; 2 bytes @ 0x13
  2161  0033                     	ds	1
  2162  0034                     XBAPI_HandleFrame@bytes_read:	
  2163                           
  2164                           ; 2 bytes @ 0x14
  2165  0034                     	ds	1
  2166  0035                     ADC_Read@i:	
  2167                           
  2168                           ; 1 bytes @ 0x15
  2169  0035                     	ds	1
  2170  0036                     ?___aldiv:	
  2171  0036                     XBAPI_HandleFrame@packet:	
  2172                           ; 4 bytes @ 0x16
  2173                           
  2174  0036                     ___aldiv@divisor:	
  2175                           ; 1 bytes @ 0x16
  2176                           
  2177                           
  2178                           ; 4 bytes @ 0x16
  2179  0036                     	ds	1
  2180  0037                     XBAPI_HandleFrame@received_length:	
  2181                           
  2182                           ; 2 bytes @ 0x17
  2183  0037                     	ds	2
  2184  0039                     XBAPI_HandleFrame@tmo:	
  2185                           
  2186                           ; 4 bytes @ 0x19
  2187  0039                     	ds	1
  2188  003A                     ___aldiv@dividend:	
  2189                           
  2190                           ; 4 bytes @ 0x1A
  2191  003A                     	ds	3
  2192  003D                     ?_XBAPI_Command:	
  2193  003D                     XBAPI_Command@command:	
  2194                           ; 2 bytes @ 0x1D
  2195                           
  2196                           
  2197                           ; 2 bytes @ 0x1D
  2198  003D                     	ds	1
  2199  003E                     ??___aldiv:	
  2200                           
  2201                           ; 0 bytes @ 0x1E
  2202  003E                     	ds	1
  2203  003F                     ___aldiv@counter:	
  2204  003F                     XBAPI_Command@data:	
  2205                           ; 1 bytes @ 0x1F
  2206                           
  2207                           
  2208                           ; 4 bytes @ 0x1F
  2209  003F                     	ds	1
  2210  0040                     ___aldiv@sign:	
  2211                           
  2212                           ; 1 bytes @ 0x20
  2213  0040                     	ds	1
  2214  0041                     ___aldiv@quotient:	
  2215                           
  2216                           ; 4 bytes @ 0x21
  2217  0041                     	ds	2
  2218  0043                     XBAPI_Command@id:	
  2219                           
  2220                           ; 2 bytes @ 0x23
  2221  0043                     	ds	2
  2222  0045                     ?_UART_Init:	
  2223  0045                     UART_Init@baud:	
  2224                           ; 0 bytes @ 0x25
  2225                           
  2226  0045                     XBAPI_Command@data_valid:	
  2227                           ; 2 bytes @ 0x25
  2228                           
  2229                           
  2230                           ; 2 bytes @ 0x25
  2231  0045                     	ds	2
  2232  0047                     ??_XBAPI_Command:	
  2233  0047                     ??_UART_Init:	
  2234                           ; 0 bytes @ 0x27
  2235                           
  2236                           
  2237                           ; 0 bytes @ 0x27
  2238  0047                     	ds	3
  2239  004A                     XBAPI_Command@check:	
  2240                           
  2241                           ; 1 bytes @ 0x2A
  2242  004A                     	ds	1
  2243  004B                     _XBAPI_Command$876:	
  2244                           
  2245                           ; 2 bytes @ 0x2B
  2246  004B                     	ds	1
  2247  004C                     UART_Init@spbrg:	
  2248                           
  2249                           ; 2 bytes @ 0x2C
  2250  004C                     	ds	1
  2251  004D                     XBAPI_Command@atCmdLength:	
  2252                           
  2253                           ; 1 bytes @ 0x2D
  2254  004D                     	ds	1
  2255  004E                     ?_XBee_Enable:	
  2256  004E                     XBee_Enable@baud:	
  2257                           ; 0 bytes @ 0x2E
  2258                           
  2259                           
  2260                           ; 2 bytes @ 0x2E
  2261  004E                     	ds	2
  2262  0050                     ?_XBAPI_Transmit:	
  2263  0050                     XBAPI_Transmit@data:	
  2264                           ; 2 bytes @ 0x30
  2265                           
  2266  0050                     XBee_Wake@i:	
  2267                           ; 1 bytes @ 0x30
  2268                           
  2269                           
  2270                           ; 4 bytes @ 0x30
  2271  0050                     	ds	1
  2272  0051                     XBAPI_Transmit@length:	
  2273                           
  2274                           ; 2 bytes @ 0x31
  2275  0051                     	ds	2
  2276  0053                     XBAPI_Transmit@id:	
  2277                           
  2278                           ; 2 bytes @ 0x33
  2279  0053                     	ds	2
  2280  0055                     ??_XBAPI_Transmit:	
  2281                           
  2282                           ; 0 bytes @ 0x35
  2283  0055                     	ds	1
  2284  0056                     XBAPI_Transmit@address:	
  2285                           
  2286                           ; 1 bytes @ 0x36
  2287  0056                     	ds	1
  2288  0057                     _XBAPI_Transmit$864:	
  2289                           
  2290                           ; 2 bytes @ 0x37
  2291  0057                     	ds	2
  2292  0059                     XBAPI_Transmit@error:	
  2293                           
  2294                           ; 2 bytes @ 0x39
  2295  0059                     	ds	2
  2296  005B                     ??_SendPacket:	
  2297                           
  2298                           ; 0 bytes @ 0x3B
  2299  005B                     	ds	2
  2300  005D                     SendPacket@packet:	
  2301                           
  2302                           ; 1 bytes @ 0x3D
  2303  005D                     	ds	1
  2304  005E                     SendPacket@status:	
  2305                           
  2306                           ; 1 bytes @ 0x3E
  2307  005E                     	ds	1
  2308  005F                     ??_SendReceiverBroadcastRequest:	
  2309  005F                     ?_SendReport:	
  2310                           ; 0 bytes @ 0x3F
  2311                           
  2312  005F                     SendReport@thermistorResistance:	
  2313                           ; 0 bytes @ 0x3F
  2314                           
  2315                           
  2316                           ; 2 bytes @ 0x3F
  2317  005F                     	ds	2
  2318  0061                     SendReport@thermRes25C:	
  2319                           
  2320                           ; 2 bytes @ 0x41
  2321  0061                     	ds	2
  2322  0063                     SendReport@thermBeta:	
  2323                           
  2324                           ; 2 bytes @ 0x43
  2325  0063                     	ds	2
  2326  0065                     SendReport@topResValue:	
  2327                           
  2328                           ; 2 bytes @ 0x45
  2329  0065                     	ds	2
  2330  0067                     ??_SendReport:	
  2331                           
  2332                           ; 0 bytes @ 0x47
  2333  0067                     	ds	1
  2334  0068                     ?_main:	
  2335  0068                     main@argc:	
  2336                           ; 2 bytes @ 0x48
  2337                           
  2338                           
  2339                           ; 2 bytes @ 0x48
  2340  0068                     	ds	2
  2341  006A                     main@argv:	
  2342                           
  2343                           ; 2 bytes @ 0x4A
  2344  006A                     	ds	2
  2345                           
  2346                           	psect	maintext
  2347  0105                     __pmaintext:	
  2348 ;;
  2349 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  2350 ;;
  2351 ;; *************** function _main *****************
  2352 ;; Defined at:
  2353 ;;		line 60 in file "main.c"
  2354 ;; Parameters:    Size  Location     Type
  2355 ;;  argc            2   72[BANK0 ] int 
  2356 ;;  argv            2   74[BANK0 ] PTR PTR unsigned char 
  2357 ;; Auto vars:     Size  Location     Type
  2358 ;;  thermistorRe    4    5[BANK1 ] long 
  2359 ;; Return value:  Size  Location     Type
  2360 ;;                  2   72[BANK0 ] int 
  2361 ;; Registers used:
  2362 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2363 ;; Tracked objects:
  2364 ;;		On entry : 17F/0
  2365 ;;		On exit  : 0/0
  2366 ;;		Unchanged: 0/0
  2367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2368 ;;      Params:         0       4       0       0       0       0       0       0
  2369 ;;      Locals:         0       0       8       0       0       0       0       0
  2370 ;;      Temps:          0       0       5       0       0       0       0       0
  2371 ;;      Totals:         0       4      13       0       0       0       0       0
  2372 ;;Total ram usage:       17 bytes
  2373 ;; Hardware stack levels required when called:    8
  2374 ;; This function calls:
  2375 ;;		_pulseLed
  2376 ;;		_EEPROM_Read
  2377 ;;		_memset
  2378 ;;		_EEPROM_Write
  2379 ;;		_XBee_Enable
  2380 ;;		_XBAPI_Command
  2381 ;;		_XBee_Disable
  2382 ;;		_ADC_Enable
  2383 ;;		_CRC16_Init
  2384 ;;		_SendReceiverBroadcastRequest
  2385 ;;		_XBAPI_HandleFrame
  2386 ;;		_ADC_Read
  2387 ;;		_XBee_Wake
  2388 ;;		_SendReport
  2389 ;;		_XBee_Sleep
  2390 ;;		_sleep
  2391 ;;		___aldiv
  2392 ;; This function is called by:
  2393 ;;		Startup code after reset
  2394 ;; This function uses a non-reentrant model
  2395 ;;
  2396                           
  2397                           
  2398                           ;psect for function _main
  2399  0105                     _main:	
  2400                           
  2401                           ;main.c: 61: TRISC = 0x80 | (0x14);;
  2402                           
  2403                           ;incstack = 0
  2404                           ; Regs used in _main: [allreg]
  2405  0105  3094               	movlw	148
  2406  0106  0021               	movlb	1	; select bank1
  2407  0107  008E               	movwf	14	;volatile
  2408                           
  2409                           ;main.c: 62: TRISB = 0x0;
  2410  0108  018D               	clrf	13	;volatile
  2411                           
  2412                           ;main.c: 63: TRISA = 0x0;
  2413  0109  018C               	clrf	12	;volatile
  2414                           
  2415                           ;main.c: 65: pulseLed(5000);
  2416  010A  3088               	movlw	136
  2417  010B  0020               	movlb	0	; select bank0
  2418  010C  00A1               	movwf	?_pulseLed
  2419  010D  3013               	movlw	19
  2420  010E  00A2               	movwf	?_pulseLed+1
  2421  010F  3187  27EC  3181   	fcall	_pulseLed
  2422                           
  2423                           ;main.c: 67: PORTBbits.RB0 = 1;
  2424  0112  0020               	movlb	0	; select bank0
  2425  0113  140D               	bsf	13,0	;volatile
  2426                           
  2427                           ;main.c: 70: EEPROM_Read(0x00, (byte*)&calibrationData, sizeof(CalibrationData));
  2428  0114  30CD               	movlw	_calibrationData& (0+255)
  2429  0115  0021               	movlb	1	; select bank1
  2430  0116  00D7               	movwf	??_main^(0+128)
  2431  0117  0857               	movf	??_main^(0+128),w
  2432  0118  00F1               	movwf	?_EEPROM_Read
  2433  0119  3006               	movlw	6
  2434  011A  00F2               	movwf	?_EEPROM_Read+1
  2435  011B  3000               	movlw	0
  2436  011C  00F3               	movwf	?_EEPROM_Read+2
  2437  011D  3000               	movlw	0
  2438  011E  318E  2608  3181   	fcall	_EEPROM_Read
  2439                           
  2440                           ;main.c: 71: if(calibrationData.magic != 0xF00D) {
  2441  0121  30F0               	movlw	240
  2442  0122  0021               	movlb	1	; select bank1
  2443  0123  064E               	xorwf	(_calibrationData+1)^(0+128),w
  2444  0124  1D03               	skipz
  2445  0125  2928               	goto	u1955
  2446  0126  300D               	movlw	13
  2447  0127  064D               	xorwf	_calibrationData^(0+128),w
  2448  0128                     u1955:	
  2449  0128  1903               	skipnz
  2450  0129  2947               	goto	l2482
  2451                           
  2452                           ;main.c: 72: memset(&calibrationData, 0, sizeof(CalibrationData));
  2453  012A  3000               	movlw	0
  2454  012B  00F1               	movwf	?_memset
  2455  012C  3000               	movlw	0
  2456  012D  00F2               	movwf	?_memset+1
  2457  012E  3006               	movlw	6
  2458  012F  00F3               	movwf	?_memset+2
  2459  0130  3000               	movlw	0
  2460  0131  00F4               	movwf	?_memset+3
  2461  0132  30CD               	movlw	_calibrationData& (0+255)
  2462  0133  318D  25CE  3181   	fcall	_memset
  2463                           
  2464                           ;main.c: 73: calibrationData.magic = 0xF00D;
  2465  0136  300D               	movlw	13
  2466  0137  0021               	movlb	1	; select bank1
  2467  0138  00CD               	movwf	_calibrationData^(0+128)
  2468  0139  30F0               	movlw	240
  2469  013A  00CE               	movwf	(_calibrationData^(0+128)+1)
  2470                           
  2471                           ;main.c: 74: EEPROM_Write(0x00, (byte*)&calibrationData, sizeof(CalibrationData));
  2472  013B  30CD               	movlw	_calibrationData& (0+255)
  2473  013C  00D7               	movwf	??_main^(0+128)
  2474  013D  0857               	movf	??_main^(0+128),w
  2475  013E  00F1               	movwf	?_EEPROM_Write
  2476  013F  3006               	movlw	6
  2477  0140  00F2               	movwf	?_EEPROM_Write+1
  2478  0141  3000               	movlw	0
  2479  0142  00F3               	movwf	?_EEPROM_Write+2
  2480  0143  3000               	movlw	0
  2481  0144  318E  26E2  3181   	fcall	_EEPROM_Write
  2482  0147                     l2482:	
  2483                           
  2484                           ;main.c: 75: }
  2485                           ;main.c: 78: EEPROM_Read((0x00+sizeof(CalibrationData)), (byte*)&intervalData, sizeof(In
      +                          tervalData));
  2486  0147  30D3               	movlw	_intervalData& (0+255)
  2487  0148  0021               	movlb	1	; select bank1
  2488  0149  00D7               	movwf	??_main^(0+128)
  2489  014A  0857               	movf	??_main^(0+128),w
  2490  014B  00F1               	movwf	?_EEPROM_Read
  2491  014C  3004               	movlw	4
  2492  014D  00F2               	movwf	?_EEPROM_Read+1
  2493  014E  3000               	movlw	0
  2494  014F  00F3               	movwf	?_EEPROM_Read+2
  2495  0150  3006               	movlw	6
  2496  0151  318E  2608  3181   	fcall	_EEPROM_Read
  2497                           
  2498                           ;main.c: 79: if(intervalData.magic != 0xFACE) {
  2499  0154  30FA               	movlw	250
  2500  0155  0021               	movlb	1	; select bank1
  2501  0156  0654               	xorwf	(_intervalData+1)^(0+128),w
  2502  0157  1D03               	skipz
  2503  0158  295B               	goto	u1965
  2504  0159  30CE               	movlw	206
  2505  015A  0653               	xorwf	_intervalData^(0+128),w
  2506  015B                     u1965:	
  2507  015B  1903               	skipnz
  2508  015C  2971               	goto	l2490
  2509                           
  2510                           ;main.c: 80: intervalData.magic = 0xFACE;
  2511  015D  30CE               	movlw	206
  2512  015E  00D3               	movwf	_intervalData^(0+128)
  2513  015F  30FA               	movlw	250
  2514  0160  00D4               	movwf	(_intervalData^(0+128)+1)
  2515                           
  2516                           ;main.c: 81: intervalData.interval = 60;
  2517  0161  303C               	movlw	60
  2518  0162  00D5               	movwf	(_intervalData^(0+128)+2)
  2519  0163  3000               	movlw	0
  2520  0164  00D6               	movwf	(_intervalData^(0+128)+3)
  2521                           
  2522                           ;main.c: 82: EEPROM_Write((0x00+sizeof(CalibrationData)), (byte*)&intervalData, sizeof(I
      +                          ntervalData));
  2523  0165  30D3               	movlw	_intervalData& (0+255)
  2524  0166  00D7               	movwf	??_main^(0+128)
  2525  0167  0857               	movf	??_main^(0+128),w
  2526  0168  00F1               	movwf	?_EEPROM_Write
  2527  0169  3004               	movlw	4
  2528  016A  00F2               	movwf	?_EEPROM_Write+1
  2529  016B  3000               	movlw	0
  2530  016C  00F3               	movwf	?_EEPROM_Write+2
  2531  016D  3006               	movlw	6
  2532  016E  318E  26E2  3181   	fcall	_EEPROM_Write
  2533  0171                     l2490:	
  2534                           
  2535                           ;main.c: 83: }
  2536                           ;main.c: 85: XBee_Enable(9600);
  2537  0171  3080               	movlw	128
  2538  0172  0020               	movlb	0	; select bank0
  2539  0173  00CE               	movwf	?_XBee_Enable
  2540  0174  3025               	movlw	37
  2541  0175  00CF               	movwf	?_XBee_Enable+1
  2542  0176  318E  2629  3181   	fcall	_XBee_Enable
  2543                           
  2544                           ;main.c: 87: error = XBAPI_Command(0x4D53, 1L, 0xc0, 1);
  2545  0179  3053               	movlw	83
  2546  017A  0020               	movlb	0	; select bank0
  2547  017B  00BD               	movwf	?_XBAPI_Command
  2548  017C  304D               	movlw	77
  2549  017D  00BE               	movwf	?_XBAPI_Command+1
  2550  017E  3000               	movlw	0
  2551  017F  00C2               	movwf	?_XBAPI_Command+5
  2552  0180  3000               	movlw	0
  2553  0181  00C1               	movwf	?_XBAPI_Command+4
  2554  0182  3000               	movlw	0
  2555  0183  00C0               	movwf	?_XBAPI_Command+3
  2556  0184  3001               	movlw	1
  2557  0185  00BF               	movwf	?_XBAPI_Command+2
  2558  0186  30C0               	movlw	192
  2559  0187  00C3               	movwf	?_XBAPI_Command+6
  2560  0188  3000               	movlw	0
  2561  0189  00C4               	movwf	?_XBAPI_Command+7
  2562  018A  3001               	movlw	1
  2563  018B  00C5               	movwf	?_XBAPI_Command+8
  2564  018C  3000               	movlw	0
  2565  018D  00C6               	movwf	?_XBAPI_Command+9
  2566  018E  3183  23F5  3181   	fcall	_XBAPI_Command
  2567  0191  0020               	movlb	0	; select bank0
  2568  0192  083E               	movf	?_XBAPI_Command+1,w
  2569  0193  0021               	movlb	1	; select bank1
  2570  0194  01A5               	clrf	(_error+1)^(0+128)
  2571  0195  07A5               	addwf	(_error+1)^(0+128),f
  2572  0196  0020               	movlb	0	; select bank0
  2573  0197  083D               	movf	?_XBAPI_Command,w
  2574  0198  0021               	movlb	1	; select bank1
  2575  0199  01A4               	clrf	_error^(0+128)
  2576  019A  07A4               	addwf	_error^(0+128),f
  2577                           
  2578                           ;main.c: 88: if(error) {
  2579  019B  0825               	movf	(_error+1)^(0+128),w
  2580  019C  0424               	iorwf	_error^(0+128),w
  2581  019D  1903               	skipnz
  2582  019E  29A3               	goto	l2498
  2583                           
  2584                           ;main.c: 89: XBee_Disable();
  2585  019F  318D  2533  3181   	fcall	_XBee_Disable
  2586  01A2                     l75:	
  2587                           ;main.c: 90: while(1){
  2588                           
  2589  01A2  29A2               	goto	l75
  2590  01A3                     l2498:	
  2591                           
  2592                           ;main.c: 92: }
  2593                           ;main.c: 93: }
  2594                           ;main.c: 95: cmd_itr++;
  2595  01A3  3001               	movlw	1
  2596  01A4  0021               	movlb	1	; select bank1
  2597  01A5  07A2               	addwf	_cmd_itr^(0+128),f
  2598  01A6  3000               	movlw	0
  2599  01A7  3DA3               	addwfc	(_cmd_itr+1)^(0+128),f
  2600                           
  2601                           ;main.c: 97: error = XBAPI_Command(0x4341, 0, 0xc1, 0);
  2602  01A8  3041               	movlw	65
  2603  01A9  0020               	movlb	0	; select bank0
  2604  01AA  00BD               	movwf	?_XBAPI_Command
  2605  01AB  3043               	movlw	67
  2606  01AC  00BE               	movwf	?_XBAPI_Command+1
  2607  01AD  3000               	movlw	0
  2608  01AE  00C2               	movwf	?_XBAPI_Command+5
  2609  01AF  3000               	movlw	0
  2610  01B0  00C1               	movwf	?_XBAPI_Command+4
  2611  01B1  3000               	movlw	0
  2612  01B2  00C0               	movwf	?_XBAPI_Command+3
  2613  01B3  3000               	movlw	0
  2614  01B4  00BF               	movwf	?_XBAPI_Command+2
  2615  01B5  30C1               	movlw	193
  2616  01B6  00C3               	movwf	?_XBAPI_Command+6
  2617  01B7  3000               	movlw	0
  2618  01B8  00C4               	movwf	?_XBAPI_Command+7
  2619  01B9  3000               	movlw	0
  2620  01BA  00C5               	movwf	?_XBAPI_Command+8
  2621  01BB  3000               	movlw	0
  2622  01BC  00C6               	movwf	?_XBAPI_Command+9
  2623  01BD  3183  23F5  3181   	fcall	_XBAPI_Command
  2624  01C0  0020               	movlb	0	; select bank0
  2625  01C1  083E               	movf	?_XBAPI_Command+1,w
  2626  01C2  0021               	movlb	1	; select bank1
  2627  01C3  01A5               	clrf	(_error+1)^(0+128)
  2628  01C4  07A5               	addwf	(_error+1)^(0+128),f
  2629  01C5  0020               	movlb	0	; select bank0
  2630  01C6  083D               	movf	?_XBAPI_Command,w
  2631  01C7  0021               	movlb	1	; select bank1
  2632  01C8  01A4               	clrf	_error^(0+128)
  2633  01C9  07A4               	addwf	_error^(0+128),f
  2634                           
  2635                           ;main.c: 98: if(error) {
  2636  01CA  0825               	movf	(_error+1)^(0+128),w
  2637  01CB  0424               	iorwf	_error^(0+128),w
  2638  01CC  1903               	skipnz
  2639  01CD  29D2               	goto	l2506
  2640                           
  2641                           ;main.c: 99: XBee_Disable();
  2642  01CE  318D  2533  3181   	fcall	_XBee_Disable
  2643  01D1                     l79:	
  2644                           ;main.c: 100: while(1){
  2645                           
  2646  01D1  29D1               	goto	l79
  2647  01D2                     l2506:	
  2648                           
  2649                           ;main.c: 102: }
  2650                           ;main.c: 103: }
  2651                           ;main.c: 105: cmd_itr++;
  2652  01D2  3001               	movlw	1
  2653  01D3  0021               	movlb	1	; select bank1
  2654  01D4  07A2               	addwf	_cmd_itr^(0+128),f
  2655  01D5  3000               	movlw	0
  2656  01D6  3DA3               	addwfc	(_cmd_itr+1)^(0+128),f
  2657                           
  2658                           ;main.c: 107: ADC_Enable(1, 1);
  2659  01D7  01F1               	clrf	?_ADC_Enable
  2660  01D8  0AF1               	incf	?_ADC_Enable,f
  2661  01D9  3001               	movlw	1
  2662  01DA  3180  2092  3181   	fcall	_ADC_Enable
  2663                           
  2664                           ;main.c: 110: CRC16_Init();
  2665  01DD  318D  2553  3181   	fcall	_CRC16_Init
  2666                           
  2667                           ;main.c: 115: SendReceiverBroadcastRequest();
  2668  01E0  318E  264A  3181   	fcall	_SendReceiverBroadcastRequest
  2669                           
  2670                           ;main.c: 116: XBAPI_HandleFrame(0x90, 0);
  2671  01E3  3090               	movlw	144
  2672  01E4  0020               	movlb	0	; select bank0
  2673  01E5  00AE               	movwf	?_XBAPI_HandleFrame
  2674  01E6  3000               	movlw	0
  2675  01E7  00AF               	movwf	?_XBAPI_HandleFrame+1
  2676  01E8  3000               	movlw	0
  2677  01E9  00B0               	movwf	?_XBAPI_HandleFrame+2
  2678  01EA  3000               	movlw	0
  2679  01EB  00B1               	movwf	?_XBAPI_HandleFrame+3
  2680  01EC  3182  2287  3181   	fcall	_XBAPI_HandleFrame
  2681                           
  2682                           ;main.c: 118: PORTBbits.RB0 = 0;
  2683  01EF  0020               	movlb	0	; select bank0
  2684  01F0  100D               	bcf	13,0	;volatile
  2685  01F1                     l2518:	
  2686                           ;main.c: 121: while(1) {
  2687                           
  2688                           
  2689                           ;main.c: 122: PORTCbits.RC3 = 1;
  2690  01F1  0020               	movlb	0	; select bank0
  2691  01F2  158E               	bsf	14,3	;volatile
  2692                           
  2693                           ;main.c: 124: long thermistorResistance = (16200 * 1000L) / ((4096000L/ADC_Read(10))-100
      +                          0);
  2694  01F3  300A               	movlw	10
  2695  01F4  0021               	movlb	1	; select bank1
  2696  01F5  00D7               	movwf	??_main^(0+128)
  2697  01F6  0857               	movf	??_main^(0+128),w
  2698  01F7  0020               	movlb	0	; select bank0
  2699  01F8  00A7               	movwf	?_ADC_Read
  2700  01F9  3187  275E  3181   	fcall	_ADC_Read
  2701  01FC  0020               	movlb	0	; select bank0
  2702  01FD  0827               	movf	?_ADC_Read,w
  2703  01FE  0021               	movlb	1	; select bank1
  2704  01FF  00D8               	movwf	(??_main+1)^(0+128)
  2705  0200  0020               	movlb	0	; select bank0
  2706  0201  0828               	movf	?_ADC_Read+1,w
  2707  0202  0021               	movlb	1	; select bank1
  2708  0203  00D9               	movwf	((??_main+1)^(0+128)+1)
  2709  0204  01DA               	clrf	((??_main+1)^(0+128)+2)
  2710  0205  01DB               	clrf	((??_main+1)^(0+128)+3)
  2711  0206  085B               	movf	(??_main+4)^(0+128),w
  2712  0207  0020               	movlb	0	; select bank0
  2713  0208  00B9               	movwf	?___aldiv+3
  2714  0209  0021               	movlb	1	; select bank1
  2715  020A  085A               	movf	(??_main+3)^(0+128),w
  2716  020B  0020               	movlb	0	; select bank0
  2717  020C  00B8               	movwf	?___aldiv+2
  2718  020D  0021               	movlb	1	; select bank1
  2719  020E  0859               	movf	(??_main+2)^(0+128),w
  2720  020F  0020               	movlb	0	; select bank0
  2721  0210  00B7               	movwf	?___aldiv+1
  2722  0211  0021               	movlb	1	; select bank1
  2723  0212  0858               	movf	(??_main+1)^(0+128),w
  2724  0213  0020               	movlb	0	; select bank0
  2725  0214  00B6               	movwf	?___aldiv
  2726  0215  3000               	movlw	0
  2727  0216  00BD               	movwf	?___aldiv+7
  2728  0217  303E               	movlw	62
  2729  0218  00BC               	movwf	?___aldiv+6
  2730  0219  3080               	movlw	128
  2731  021A  00BB               	movwf	?___aldiv+5
  2732  021B  3000               	movlw	0
  2733  021C  00BA               	movwf	?___aldiv+4
  2734  021D  3185  2538  3181   	fcall	___aldiv
  2735  0220  3018               	movlw	24
  2736  0221  0020               	movlb	0	; select bank0
  2737  0222  0736               	addwf	?___aldiv,w
  2738  0223  0021               	movlb	1	; select bank1
  2739  0224  00E0               	movwf	_main$1774^(0+128)
  2740  0225  30FC               	movlw	252
  2741  0226  0020               	movlb	0	; select bank0
  2742  0227  3D37               	addwfc	?___aldiv+1,w
  2743  0228  0021               	movlb	1	; select bank1
  2744  0229  00E1               	movwf	(_main$1774+1)^(0+128)
  2745  022A  30FF               	movlw	255
  2746  022B  0020               	movlb	0	; select bank0
  2747  022C  3D38               	addwfc	?___aldiv+2,w
  2748  022D  0021               	movlb	1	; select bank1
  2749  022E  00E2               	movwf	(_main$1774+2)^(0+128)
  2750  022F  30FF               	movlw	255
  2751  0230  0020               	movlb	0	; select bank0
  2752  0231  3D39               	addwfc	?___aldiv+3,w
  2753  0232  0021               	movlb	1	; select bank1
  2754  0233  00E3               	movwf	(_main$1774+3)^(0+128)
  2755                           
  2756                           ;main.c: 124: long thermistorResistance = (16200 * 1000L) / ((4096000L/ADC_Read(10))-100
      +                          0);
  2757  0234  0863               	movf	(_main$1774+3)^(0+128),w
  2758  0235  0020               	movlb	0	; select bank0
  2759  0236  00B9               	movwf	?___aldiv+3
  2760  0237  0021               	movlb	1	; select bank1
  2761  0238  0862               	movf	(_main$1774+2)^(0+128),w
  2762  0239  0020               	movlb	0	; select bank0
  2763  023A  00B8               	movwf	?___aldiv+2
  2764  023B  0021               	movlb	1	; select bank1
  2765  023C  0861               	movf	(_main$1774+1)^(0+128),w
  2766  023D  0020               	movlb	0	; select bank0
  2767  023E  00B7               	movwf	?___aldiv+1
  2768  023F  0021               	movlb	1	; select bank1
  2769  0240  0860               	movf	_main$1774^(0+128),w
  2770  0241  0020               	movlb	0	; select bank0
  2771  0242  00B6               	movwf	?___aldiv
  2772  0243  3000               	movlw	0
  2773  0244  00BD               	movwf	?___aldiv+7
  2774  0245  30F7               	movlw	247
  2775  0246  00BC               	movwf	?___aldiv+6
  2776  0247  3031               	movlw	49
  2777  0248  00BB               	movwf	?___aldiv+5
  2778  0249  3040               	movlw	64
  2779  024A  00BA               	movwf	?___aldiv+4
  2780  024B  3185  2538  3181   	fcall	___aldiv
  2781  024E  0020               	movlb	0	; select bank0
  2782  024F  0839               	movf	?___aldiv+3,w
  2783  0250  0021               	movlb	1	; select bank1
  2784  0251  00DF               	movwf	(main@thermistorResistance+3)^(0+128)
  2785  0252  0020               	movlb	0	; select bank0
  2786  0253  0838               	movf	?___aldiv+2,w
  2787  0254  0021               	movlb	1	; select bank1
  2788  0255  00DE               	movwf	(main@thermistorResistance+2)^(0+128)
  2789  0256  0020               	movlb	0	; select bank0
  2790  0257  0837               	movf	?___aldiv+1,w
  2791  0258  0021               	movlb	1	; select bank1
  2792  0259  00DD               	movwf	(main@thermistorResistance+1)^(0+128)
  2793  025A  0020               	movlb	0	; select bank0
  2794  025B  0836               	movf	?___aldiv,w
  2795  025C  0021               	movlb	1	; select bank1
  2796  025D  00DC               	movwf	main@thermistorResistance^(0+128)
  2797                           
  2798                           ;main.c: 126: XBee_Wake();
  2799  025E  3186  2612  3181   	fcall	_XBee_Wake
  2800                           
  2801                           ;main.c: 128: SendReport(thermistorResistance, 5000, 3948, 16200);
  2802  0261  0021               	movlb	1	; select bank1
  2803  0262  085D               	movf	(main@thermistorResistance+1)^(0+128),w
  2804  0263  0020               	movlb	0	; select bank0
  2805  0264  01E0               	clrf	?_SendReport+1
  2806  0265  07E0               	addwf	?_SendReport+1,f
  2807  0266  0021               	movlb	1	; select bank1
  2808  0267  085C               	movf	main@thermistorResistance^(0+128),w
  2809  0268  0020               	movlb	0	; select bank0
  2810  0269  01DF               	clrf	?_SendReport
  2811  026A  07DF               	addwf	?_SendReport,f
  2812  026B  3088               	movlw	136
  2813  026C  00E1               	movwf	?_SendReport+2
  2814  026D  3013               	movlw	19
  2815  026E  00E2               	movwf	?_SendReport+3
  2816  026F  306C               	movlw	108
  2817  0270  00E3               	movwf	?_SendReport+4
  2818  0271  300F               	movlw	15
  2819  0272  00E4               	movwf	?_SendReport+5
  2820  0273  3048               	movlw	72
  2821  0274  00E5               	movwf	?_SendReport+6
  2822  0275  303F               	movlw	63
  2823  0276  00E6               	movwf	?_SendReport+7
  2824  0277  3187  2710  3181   	fcall	_SendReport
  2825                           
  2826                           ;main.c: 129: XBee_Sleep();
  2827  027A  3187  27FD  3181   	fcall	_XBee_Sleep
  2828                           
  2829                           ;main.c: 130: PORTCbits.RC3 = 0;
  2830  027D  0020               	movlb	0	; select bank0
  2831  027E  118E               	bcf	14,3	;volatile
  2832                           
  2833                           ;main.c: 132: sleep(59);
  2834  027F  303B               	movlw	59
  2835  0280  00F1               	movwf	?_sleep
  2836  0281  3000               	movlw	0
  2837  0282  00F2               	movwf	?_sleep+1
  2838  0283  318D  2583  3181   	fcall	_sleep
  2839  0286  29F1               	goto	l2518
  2840  0287                     __end_of_main:	
  2841                           
  2842                           	psect	text1
  2843  07FD                     __ptext1:	
  2844 ;; *************** function _XBee_Sleep *****************
  2845 ;; Defined at:
  2846 ;;		line 38 in file "xbee.c"
  2847 ;; Parameters:    Size  Location     Type
  2848 ;;		None
  2849 ;; Auto vars:     Size  Location     Type
  2850 ;;		None
  2851 ;; Return value:  Size  Location     Type
  2852 ;;		None               void
  2853 ;; Registers used:
  2854 ;;		None
  2855 ;; Tracked objects:
  2856 ;;		On entry : 0/0
  2857 ;;		On exit  : 0/0
  2858 ;;		Unchanged: 0/0
  2859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2860 ;;      Params:         0       0       0       0       0       0       0       0
  2861 ;;      Locals:         0       0       0       0       0       0       0       0
  2862 ;;      Temps:          0       0       0       0       0       0       0       0
  2863 ;;      Totals:         0       0       0       0       0       0       0       0
  2864 ;;Total ram usage:        0 bytes
  2865 ;; Hardware stack levels used:    1
  2866 ;; Hardware stack levels required when called:    1
  2867 ;; This function calls:
  2868 ;;		Nothing
  2869 ;; This function is called by:
  2870 ;;		_main
  2871 ;; This function uses a non-reentrant model
  2872 ;;
  2873                           
  2874                           
  2875                           ;psect for function _XBee_Sleep
  2876  07FD                     _XBee_Sleep:	
  2877                           
  2878                           ;xbee.c: 39: PORTCbits.RC1 = 1;
  2879                           
  2880                           ;incstack = 0
  2881                           ; Regs used in _XBee_Sleep: []
  2882  07FD  0020               	movlb	0	; select bank0
  2883  07FE  148E               	bsf	14,1	;volatile
  2884  07FF  0008               	return
  2885  0800                     __end_of_XBee_Sleep:	
  2886                           
  2887                           	psect	text2
  2888  0710                     __ptext2:	
  2889 ;; *************** function _SendReport *****************
  2890 ;; Defined at:
  2891 ;;		line 12 in file "packets.c"
  2892 ;; Parameters:    Size  Location     Type
  2893 ;;  thermistorRe    2   63[BANK0 ] int 
  2894 ;;  thermRes25C     2   65[BANK0 ] int 
  2895 ;;  thermBeta       2   67[BANK0 ] int 
  2896 ;;  topResValue     2   69[BANK0 ] int 
  2897 ;; Auto vars:     Size  Location     Type
  2898 ;;		None
  2899 ;; Return value:  Size  Location     Type
  2900 ;;		None               void
  2901 ;; Registers used:
  2902 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2903 ;; Tracked objects:
  2904 ;;		On entry : 0/0
  2905 ;;		On exit  : 0/0
  2906 ;;		Unchanged: 0/0
  2907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2908 ;;      Params:         0       8       0       0       0       0       0       0
  2909 ;;      Locals:         0       0       0       0       0       0       0       0
  2910 ;;      Temps:          0       1       0       0       0       0       0       0
  2911 ;;      Totals:         0       9       0       0       0       0       0       0
  2912 ;;Total ram usage:        9 bytes
  2913 ;; Hardware stack levels used:    1
  2914 ;; Hardware stack levels required when called:    7
  2915 ;; This function calls:
  2916 ;;		_CRC16_Generate
  2917 ;;		_SendPacket
  2918 ;; This function is called by:
  2919 ;;		_main
  2920 ;; This function uses a non-reentrant model
  2921 ;;
  2922                           
  2923                           
  2924                           ;psect for function _SendReport
  2925  0710                     _SendReport:	
  2926                           
  2927                           ;packets.c: 14: packet_buffer.header.command = 0x00;
  2928                           
  2929                           ;incstack = 0
  2930                           ; Regs used in _SendReport: [allreg]
  2931  0710  0021               	movlb	1	; select bank1
  2932  0711  01B2               	clrf	(_packet_buffer^(0+128)+5)
  2933                           
  2934                           ;packets.c: 15: packet_buffer.header.magic = 0xAA55;
  2935  0712  3055               	movlw	85
  2936  0713  00AD               	movwf	_packet_buffer^(0+128)
  2937  0714  30AA               	movlw	170
  2938  0715  00AE               	movwf	(_packet_buffer^(0+128)+1)
  2939                           
  2940                           ;packets.c: 16: packet_buffer.header.revision = 0;
  2941  0716  01B1               	clrf	(_packet_buffer^(0+128)+4)
  2942                           
  2943                           ;packets.c: 17: packet_buffer.report.thermistorBeta = thermBeta;
  2944  0717  0020               	movlb	0	; select bank0
  2945  0718  0864               	movf	SendReport@thermBeta+1,w
  2946  0719  0021               	movlb	1	; select bank1
  2947  071A  01BA               	clrf	((_packet_buffer+1)^(0+128)+12)
  2948  071B  07BA               	addwf	((_packet_buffer+1)^(0+128)+12),f
  2949  071C  0020               	movlb	0	; select bank0
  2950  071D  0863               	movf	SendReport@thermBeta,w
  2951  071E  0021               	movlb	1	; select bank1
  2952  071F  01B9               	clrf	(_packet_buffer^(0+128)+12)
  2953  0720  07B9               	addwf	(_packet_buffer^(0+128)+12),f
  2954                           
  2955                           ;packets.c: 18: packet_buffer.report.thermistorResistance = thermistorResistance;
  2956  0721  0020               	movlb	0	; select bank0
  2957  0722  0860               	movf	SendReport@thermistorResistance+1,w
  2958  0723  0021               	movlb	1	; select bank1
  2959  0724  01B6               	clrf	((_packet_buffer+1)^(0+128)+8)
  2960  0725  07B6               	addwf	((_packet_buffer+1)^(0+128)+8),f
  2961  0726  0020               	movlb	0	; select bank0
  2962  0727  085F               	movf	SendReport@thermistorResistance,w
  2963  0728  0021               	movlb	1	; select bank1
  2964  0729  01B5               	clrf	(_packet_buffer^(0+128)+8)
  2965  072A  07B5               	addwf	(_packet_buffer^(0+128)+8),f
  2966                           
  2967                           ;packets.c: 19: packet_buffer.report.thermistorResistance25C = thermRes25C;
  2968  072B  0020               	movlb	0	; select bank0
  2969  072C  0862               	movf	SendReport@thermRes25C+1,w
  2970  072D  0021               	movlb	1	; select bank1
  2971  072E  01B8               	clrf	((_packet_buffer+1)^(0+128)+10)
  2972  072F  07B8               	addwf	((_packet_buffer+1)^(0+128)+10),f
  2973  0730  0020               	movlb	0	; select bank0
  2974  0731  0861               	movf	SendReport@thermRes25C,w
  2975  0732  0021               	movlb	1	; select bank1
  2976  0733  01B7               	clrf	(_packet_buffer^(0+128)+10)
  2977  0734  07B7               	addwf	(_packet_buffer^(0+128)+10),f
  2978                           
  2979                           ;packets.c: 20: packet_buffer.report.topResistorValue = topResValue;
  2980  0735  0020               	movlb	0	; select bank0
  2981  0736  0866               	movf	SendReport@topResValue+1,w
  2982  0737  0021               	movlb	1	; select bank1
  2983  0738  01BC               	clrf	((_packet_buffer+1)^(0+128)+14)
  2984  0739  07BC               	addwf	((_packet_buffer+1)^(0+128)+14),f
  2985  073A  0020               	movlb	0	; select bank0
  2986  073B  0865               	movf	SendReport@topResValue,w
  2987  073C  0021               	movlb	1	; select bank1
  2988  073D  01BB               	clrf	(_packet_buffer^(0+128)+14)
  2989  073E  07BB               	addwf	(_packet_buffer^(0+128)+14),f
  2990                           
  2991                           ;packets.c: 21: packet_buffer.report.xbee_reset = xbee_reset_flag | (tmr1_err<<1);
  2992  073F  352B               	lslf	_tmr1_err^(0+128),w
  2993  0740  042C               	iorwf	_xbee_reset_flag^(0+128),w
  2994  0741  0020               	movlb	0	; select bank0
  2995  0742  00E7               	movwf	??_SendReport
  2996  0743  0867               	movf	??_SendReport,w
  2997  0744  0021               	movlb	1	; select bank1
  2998  0745  00BD               	movwf	(_packet_buffer^(0+128)+16)
  2999                           
  3000                           ;packets.c: 22: packet_buffer.header.crc16 = CRC16_Generate((byte*)&packet_buffer, sizeo
      +                          f(Packet));
  3001  0746  3020               	movlw	32
  3002  0747  0020               	movlb	0	; select bank0
  3003  0748  00A0               	movwf	?_CRC16_Generate
  3004  0749  3000               	movlw	0
  3005  074A  00A1               	movwf	?_CRC16_Generate+1
  3006  074B  30AD               	movlw	_packet_buffer& (0+255)
  3007  074C  318F  2738  3187   	fcall	_CRC16_Generate
  3008  074F  0020               	movlb	0	; select bank0
  3009  0750  0821               	movf	?_CRC16_Generate+1,w
  3010  0751  0021               	movlb	1	; select bank1
  3011  0752  01B0               	clrf	((_packet_buffer+1)^(0+128)+2)
  3012  0753  07B0               	addwf	((_packet_buffer+1)^(0+128)+2),f
  3013  0754  0020               	movlb	0	; select bank0
  3014  0755  0820               	movf	?_CRC16_Generate,w
  3015  0756  0021               	movlb	1	; select bank1
  3016  0757  01AF               	clrf	(_packet_buffer^(0+128)+2)
  3017  0758  07AF               	addwf	(_packet_buffer^(0+128)+2),f
  3018                           
  3019                           ;packets.c: 24: xbee_reset_flag = 0;
  3020  0759  01AC               	clrf	_xbee_reset_flag^(0+128)
  3021                           
  3022                           ;packets.c: 26: SendPacket(&packet_buffer);
  3023  075A  30AD               	movlw	_packet_buffer& (0+255)
  3024  075B  318E  26BA         	fcall	_SendPacket
  3025  075D  0008               	return
  3026  075E                     __end_of_SendReport:	
  3027                           
  3028                           	psect	text3
  3029  0612                     __ptext3:	
  3030 ;; *************** function _XBee_Wake *****************
  3031 ;; Defined at:
  3032 ;;		line 42 in file "xbee.c"
  3033 ;; Parameters:    Size  Location     Type
  3034 ;;		None
  3035 ;; Auto vars:     Size  Location     Type
  3036 ;;  i               4   48[BANK0 ] long 
  3037 ;; Return value:  Size  Location     Type
  3038 ;;		None               void
  3039 ;; Registers used:
  3040 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3041 ;; Tracked objects:
  3042 ;;		On entry : 0/0
  3043 ;;		On exit  : 0/0
  3044 ;;		Unchanged: 0/0
  3045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3046 ;;      Params:         0       0       0       0       0       0       0       0
  3047 ;;      Locals:         0       4       0       0       0       0       0       0
  3048 ;;      Temps:          0       0       0       0       0       0       0       0
  3049 ;;      Totals:         0       4       0       0       0       0       0       0
  3050 ;;Total ram usage:        4 bytes
  3051 ;; Hardware stack levels used:    1
  3052 ;; Hardware stack levels required when called:    4
  3053 ;; This function calls:
  3054 ;;		_XBee_Enable
  3055 ;;		_XBee_Disable
  3056 ;;		_timer1_poll_delay_ms
  3057 ;; This function is called by:
  3058 ;;		_main
  3059 ;; This function uses a non-reentrant model
  3060 ;;
  3061                           
  3062                           
  3063                           ;psect for function _XBee_Wake
  3064  0612                     _XBee_Wake:	
  3065                           
  3066                           ;xbee.c: 43: PORTCbits.RC1 = 0;
  3067                           
  3068                           ;incstack = 0
  3069                           ; Regs used in _XBee_Wake: [allreg]
  3070  0612  0020               	movlb	0	; select bank0
  3071  0613  108E               	bcf	14,1	;volatile
  3072                           
  3073                           ;xbee.c: 45: long i = 0;
  3074  0614  3000               	movlw	0
  3075  0615  00D3               	movwf	XBee_Wake@i+3
  3076  0616  3000               	movlw	0
  3077  0617  00D2               	movwf	XBee_Wake@i+2
  3078  0618  3000               	movlw	0
  3079  0619  00D1               	movwf	XBee_Wake@i+1
  3080  061A  3000               	movlw	0
  3081  061B  00D0               	movwf	XBee_Wake@i
  3082  061C                     l233:	
  3083                           ;xbee.c: 46: while(PORTCbits.RC4 && i++ < 8000000) {
  3084                           
  3085  061C  1E0E               	btfss	14,4	;volatile
  3086  061D  2E3A               	goto	l2670
  3087  061E  3001               	movlw	1
  3088  061F  07D0               	addwf	XBee_Wake@i,f
  3089  0620  3000               	movlw	0
  3090  0621  3DD1               	addwfc	XBee_Wake@i+1,f
  3091  0622  3000               	movlw	0
  3092  0623  3DD2               	addwfc	XBee_Wake@i+2,f
  3093  0624  3000               	movlw	0
  3094  0625  3DD3               	addwfc	XBee_Wake@i+3,f
  3095  0626  0853               	movf	XBee_Wake@i+3,w
  3096  0627  3A80               	xorlw	128
  3097  0628  00FF               	movwf	127
  3098  0629  3000               	movlw	0
  3099  062A  3A80               	xorlw	128
  3100  062B  027F               	subwf	127,w
  3101  062C  1D03               	skipz
  3102  062D  2E38               	goto	u2113
  3103  062E  307A               	movlw	122
  3104  062F  0252               	subwf	XBee_Wake@i+2,w
  3105  0630  1D03               	skipz
  3106  0631  2E38               	goto	u2113
  3107  0632  3012               	movlw	18
  3108  0633  0251               	subwf	XBee_Wake@i+1,w
  3109  0634  1D03               	skipz
  3110  0635  2E38               	goto	u2113
  3111  0636  3001               	movlw	1
  3112  0637  0250               	subwf	XBee_Wake@i,w
  3113  0638                     u2113:	
  3114  0638  1C03               	skipc
  3115  0639  2E1C               	goto	l233
  3116  063A                     l2670:	
  3117                           
  3118                           ;xbee.c: 47: }
  3119                           ;xbee.c: 50: if(i >= 8000000-1 && PORTCbits.RC4) {
  3120  063A  0853               	movf	XBee_Wake@i+3,w
  3121  063B  3A80               	xorlw	128
  3122  063C  00FF               	movwf	127
  3123  063D  3000               	movlw	0
  3124  063E  3A80               	xorlw	128
  3125  063F  027F               	subwf	127,w
  3126  0640  1D03               	skipz
  3127  0641  2E4C               	goto	u2123
  3128  0642  307A               	movlw	122
  3129  0643  0252               	subwf	XBee_Wake@i+2,w
  3130  0644  1D03               	skipz
  3131  0645  2E4C               	goto	u2123
  3132  0646  3011               	movlw	17
  3133  0647  0251               	subwf	XBee_Wake@i+1,w
  3134  0648  1D03               	skipz
  3135  0649  2E4C               	goto	u2123
  3136  064A  30FF               	movlw	255
  3137  064B  0250               	subwf	XBee_Wake@i,w
  3138  064C                     u2123:	
  3139  064C  1C03               	skipc
  3140  064D  0008               	return
  3141  064E  1E0E               	btfss	14,4	;volatile
  3142  064F  0008               	return
  3143                           
  3144                           ;xbee.c: 51: PORTBbits.RB0 = 1;
  3145  0650  140D               	bsf	13,0	;volatile
  3146                           
  3147                           ;xbee.c: 52: XBee_Disable();
  3148  0651  318D  2533  3186   	fcall	_XBee_Disable
  3149                           
  3150                           ;xbee.c: 54: timer1_poll_delay_ms(1);
  3151  0654  3001               	movlw	1
  3152  0655  0020               	movlb	0	; select bank0
  3153  0656  00A1               	movwf	?_timer1_poll_delay_ms
  3154  0657  3000               	movlw	0
  3155  0658  00A2               	movwf	?_timer1_poll_delay_ms+1
  3156  0659  318D  25B3  3186   	fcall	_timer1_poll_delay_ms
  3157                           
  3158                           ;xbee.c: 55: XBee_Enable(9600);
  3159  065C  3080               	movlw	128
  3160  065D  0020               	movlb	0	; select bank0
  3161  065E  00CE               	movwf	?_XBee_Enable
  3162  065F  3025               	movlw	37
  3163  0660  00CF               	movwf	?_XBee_Enable+1
  3164  0661  318E  2629         	fcall	_XBee_Enable
  3165                           
  3166                           ;xbee.c: 56: PORTBbits.RB0 = 0;
  3167  0663  0020               	movlb	0	; select bank0
  3168  0664  100D               	bcf	13,0	;volatile
  3169                           
  3170                           ;xbee.c: 57: xbee_reset_flag = 1;
  3171  0665  0021               	movlb	1	; select bank1
  3172  0666  01AC               	clrf	_xbee_reset_flag^(0+128)
  3173  0667  0AAC               	incf	_xbee_reset_flag^(0+128),f
  3174  0668  0008               	return
  3175  0669                     __end_of_XBee_Wake:	
  3176                           
  3177                           	psect	text4
  3178  075E                     __ptext4:	
  3179 ;; *************** function _ADC_Read *****************
  3180 ;; Defined at:
  3181 ;;		line 39 in file "adc.c"
  3182 ;; Parameters:    Size  Location     Type
  3183 ;;  channel         1    7[BANK0 ] unsigned char 
  3184 ;; Auto vars:     Size  Location     Type
  3185 ;;  res             8   11[BANK0 ] int [4]
  3186 ;;  sum             2   19[BANK0 ] int 
  3187 ;;  i               1   21[BANK0 ] unsigned char 
  3188 ;; Return value:  Size  Location     Type
  3189 ;;                  2    7[BANK0 ] unsigned int 
  3190 ;; Registers used:
  3191 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3192 ;; Tracked objects:
  3193 ;;		On entry : 0/0
  3194 ;;		On exit  : 0/0
  3195 ;;		Unchanged: 0/0
  3196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3197 ;;      Params:         0       2       0       0       0       0       0       0
  3198 ;;      Locals:         0      11       0       0       0       0       0       0
  3199 ;;      Temps:          0       2       0       0       0       0       0       0
  3200 ;;      Totals:         0      15       0       0       0       0       0       0
  3201 ;;Total ram usage:       15 bytes
  3202 ;; Hardware stack levels used:    1
  3203 ;; Hardware stack levels required when called:    4
  3204 ;; This function calls:
  3205 ;;		_ADC_ReadOne
  3206 ;;		___awdiv
  3207 ;; This function is called by:
  3208 ;;		_main
  3209 ;; This function uses a non-reentrant model
  3210 ;;
  3211                           
  3212                           
  3213                           ;psect for function _ADC_Read
  3214  075E                     _ADC_Read:	
  3215                           
  3216                           ;adc.c: 40: int res[4];
  3217                           ;adc.c: 41: byte i;
  3218                           ;adc.c: 42: for(i=0; i<4; i++) {
  3219                           
  3220                           ;incstack = 0
  3221                           ; Regs used in _ADC_Read: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3222  075E  0020               	movlb	0	; select bank0
  3223  075F  01B5               	clrf	ADC_Read@i
  3224  0760  3004               	movlw	4
  3225  0761  0235               	subwf	ADC_Read@i,w
  3226  0762  1803               	btfsc	3,0
  3227  0763  2F79               	goto	l2648
  3228  0764                     l2642:	
  3229                           
  3230                           ;adc.c: 43: res[i] = ADC_ReadOne(channel);
  3231  0764  0827               	movf	ADC_Read@channel,w
  3232  0765  318F  2799  3187   	fcall	_ADC_ReadOne
  3233  0768  0020               	movlb	0	; select bank0
  3234  0769  3535               	lslf	ADC_Read@i,w
  3235  076A  3E2B               	addlw	ADC_Read@res& (0+255)
  3236  076B  0086               	movwf	6
  3237  076C  0187               	clrf	7
  3238  076D  0821               	movf	?_ADC_ReadOne,w
  3239  076E  3FC0               	movwi [0]fsr1
  3240  076F  0822               	movf	?_ADC_ReadOne+1,w
  3241  0770  3FC1               	movwi [1]fsr1
  3242  0771  3001               	movlw	1
  3243  0772  00A9               	movwf	??_ADC_Read
  3244  0773  0829               	movf	??_ADC_Read,w
  3245  0774  07B5               	addwf	ADC_Read@i,f
  3246  0775  3004               	movlw	4
  3247  0776  0235               	subwf	ADC_Read@i,w
  3248  0777  1C03               	skipc
  3249  0778  2F64               	goto	l2642
  3250  0779                     l2648:	
  3251                           
  3252                           ;adc.c: 44: }
  3253                           ;adc.c: 46: int sum = 0;
  3254  0779  01B3               	clrf	ADC_Read@sum
  3255  077A  01B4               	clrf	ADC_Read@sum+1
  3256                           
  3257                           ;adc.c: 47: for(i=0; i<4; i++) {
  3258  077B  01B5               	clrf	ADC_Read@i
  3259  077C  3004               	movlw	4
  3260  077D  0235               	subwf	ADC_Read@i,w
  3261  077E  1803               	btfsc	3,0
  3262  077F  2F94               	goto	l2660
  3263  0780                     l2654:	
  3264                           
  3265                           ;adc.c: 48: sum += res[i];
  3266  0780  3535               	lslf	ADC_Read@i,w
  3267  0781  3E2B               	addlw	ADC_Read@res& (0+255)
  3268  0782  0086               	movwf	6
  3269  0783  0187               	clrf	7
  3270  0784  3F40               	moviw [0]fsr1
  3271  0785  00A9               	movwf	??_ADC_Read
  3272  0786  3F41               	moviw [1]fsr1
  3273  0787  00AA               	movwf	??_ADC_Read+1
  3274  0788  0829               	movf	??_ADC_Read,w
  3275  0789  07B3               	addwf	ADC_Read@sum,f
  3276  078A  082A               	movf	??_ADC_Read+1,w
  3277  078B  3DB4               	addwfc	ADC_Read@sum+1,f
  3278  078C  3001               	movlw	1
  3279  078D  00A9               	movwf	??_ADC_Read
  3280  078E  0829               	movf	??_ADC_Read,w
  3281  078F  07B5               	addwf	ADC_Read@i,f
  3282  0790  3004               	movlw	4
  3283  0791  0235               	subwf	ADC_Read@i,w
  3284  0792  1C03               	skipc
  3285  0793  2F80               	goto	l2654
  3286  0794                     l2660:	
  3287                           
  3288                           ;adc.c: 49: }
  3289                           ;adc.c: 51: return sum/4;
  3290  0794  3004               	movlw	4
  3291  0795  00F1               	movwf	?___awdiv
  3292  0796  3000               	movlw	0
  3293  0797  00F2               	movwf	?___awdiv+1
  3294  0798  0834               	movf	ADC_Read@sum+1,w
  3295  0799  01F4               	clrf	?___awdiv+3
  3296  079A  07F4               	addwf	?___awdiv+3,f
  3297  079B  0833               	movf	ADC_Read@sum,w
  3298  079C  01F3               	clrf	?___awdiv+2
  3299  079D  07F3               	addwf	?___awdiv+2,f
  3300  079E  3186  26BD         	fcall	___awdiv
  3301  07A0  0872               	movf	?___awdiv+1,w
  3302  07A1  0020               	movlb	0	; select bank0
  3303  07A2  01A8               	clrf	?_ADC_Read+1
  3304  07A3  07A8               	addwf	?_ADC_Read+1,f
  3305  07A4  0871               	movf	?___awdiv,w
  3306  07A5  01A7               	clrf	?_ADC_Read
  3307  07A6  07A7               	addwf	?_ADC_Read,f
  3308  07A7  0008               	return
  3309  07A8                     __end_of_ADC_Read:	
  3310                           
  3311                           	psect	text5
  3312  06BD                     __ptext5:	
  3313 ;; *************** function ___awdiv *****************
  3314 ;; Defined at:
  3315 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\awdiv.c"
  3316 ;; Parameters:    Size  Location     Type
  3317 ;;  divisor         2    1[COMMON] int 
  3318 ;;  dividend        2    3[COMMON] int 
  3319 ;; Auto vars:     Size  Location     Type
  3320 ;;  quotient        2    8[COMMON] int 
  3321 ;;  sign            1    7[COMMON] unsigned char 
  3322 ;;  counter         1    6[COMMON] unsigned char 
  3323 ;; Return value:  Size  Location     Type
  3324 ;;                  2    1[COMMON] int 
  3325 ;; Registers used:
  3326 ;;		wreg, status,2, status,0
  3327 ;; Tracked objects:
  3328 ;;		On entry : 0/0
  3329 ;;		On exit  : 0/0
  3330 ;;		Unchanged: 0/0
  3331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3332 ;;      Params:         4       0       0       0       0       0       0       0
  3333 ;;      Locals:         4       0       0       0       0       0       0       0
  3334 ;;      Temps:          1       0       0       0       0       0       0       0
  3335 ;;      Totals:         9       0       0       0       0       0       0       0
  3336 ;;Total ram usage:        9 bytes
  3337 ;; Hardware stack levels used:    1
  3338 ;; Hardware stack levels required when called:    1
  3339 ;; This function calls:
  3340 ;;		Nothing
  3341 ;; This function is called by:
  3342 ;;		_ADC_Read
  3343 ;; This function uses a non-reentrant model
  3344 ;;
  3345                           
  3346                           
  3347                           ;psect for function ___awdiv
  3348  06BD                     ___awdiv:	
  3349                           
  3350                           ;incstack = 0
  3351                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  3352  06BD  01F7               	clrf	___awdiv@sign
  3353  06BE  1FF2               	btfss	___awdiv@divisor+1,7
  3354  06BF  2EC7               	goto	l2374
  3355  06C0  09F1               	comf	___awdiv@divisor,f
  3356  06C1  09F2               	comf	___awdiv@divisor+1,f
  3357  06C2  0AF1               	incf	___awdiv@divisor,f
  3358  06C3  1903               	skipnz
  3359  06C4  0AF2               	incf	___awdiv@divisor+1,f
  3360  06C5  01F7               	clrf	___awdiv@sign
  3361  06C6  0AF7               	incf	___awdiv@sign,f
  3362  06C7                     l2374:	
  3363  06C7  1FF4               	btfss	___awdiv@dividend+1,7
  3364  06C8  2ED2               	goto	l2380
  3365  06C9  09F3               	comf	___awdiv@dividend,f
  3366  06CA  09F4               	comf	___awdiv@dividend+1,f
  3367  06CB  0AF3               	incf	___awdiv@dividend,f
  3368  06CC  1903               	skipnz
  3369  06CD  0AF4               	incf	___awdiv@dividend+1,f
  3370  06CE  3001               	movlw	1
  3371  06CF  00F5               	movwf	??___awdiv
  3372  06D0  0875               	movf	??___awdiv,w
  3373  06D1  06F7               	xorwf	___awdiv@sign,f
  3374  06D2                     l2380:	
  3375  06D2  01F8               	clrf	___awdiv@quotient
  3376  06D3  01F9               	clrf	___awdiv@quotient+1
  3377  06D4  0872               	movf	___awdiv@divisor+1,w
  3378  06D5  0471               	iorwf	___awdiv@divisor,w
  3379  06D6  1903               	skipnz
  3380  06D7  2F01               	goto	l2402
  3381  06D8  01F6               	clrf	___awdiv@counter
  3382  06D9  0AF6               	incf	___awdiv@counter,f
  3383  06DA                     l2390:	
  3384  06DA  1BF2               	btfsc	___awdiv@divisor+1,7
  3385  06DB  2EE6               	goto	l2392
  3386  06DC  3001               	movlw	1
  3387  06DD                     u1805:	
  3388  06DD  35F1               	lslf	___awdiv@divisor,f
  3389  06DE  0DF2               	rlf	___awdiv@divisor+1,f
  3390  06DF  0B89               	decfsz	9,f
  3391  06E0  2EDD               	goto	u1805
  3392  06E1  3001               	movlw	1
  3393  06E2  00F5               	movwf	??___awdiv
  3394  06E3  0875               	movf	??___awdiv,w
  3395  06E4  07F6               	addwf	___awdiv@counter,f
  3396  06E5  2EDA               	goto	l2390
  3397  06E6                     l2392:	
  3398  06E6  3001               	movlw	1
  3399  06E7                     u1825:	
  3400  06E7  35F8               	lslf	___awdiv@quotient,f
  3401  06E8  0DF9               	rlf	___awdiv@quotient+1,f
  3402  06E9  0B89               	decfsz	9,f
  3403  06EA  2EE7               	goto	u1825
  3404  06EB  0872               	movf	___awdiv@divisor+1,w
  3405  06EC  0274               	subwf	___awdiv@dividend+1,w
  3406  06ED  1D03               	skipz
  3407  06EE  2EF1               	goto	u1835
  3408  06EF  0871               	movf	___awdiv@divisor,w
  3409  06F0  0273               	subwf	___awdiv@dividend,w
  3410  06F1                     u1835:	
  3411  06F1  1C03               	skipc
  3412  06F2  2EF8               	goto	l2398
  3413  06F3  0871               	movf	___awdiv@divisor,w
  3414  06F4  02F3               	subwf	___awdiv@dividend,f
  3415  06F5  0872               	movf	___awdiv@divisor+1,w
  3416  06F6  3BF4               	subwfb	___awdiv@dividend+1,f
  3417  06F7  1478               	bsf	___awdiv@quotient,0
  3418  06F8                     l2398:	
  3419  06F8  3001               	movlw	1
  3420  06F9                     u1845:	
  3421  06F9  36F2               	lsrf	___awdiv@divisor+1,f
  3422  06FA  0CF1               	rrf	___awdiv@divisor,f
  3423  06FB  0B89               	decfsz	9,f
  3424  06FC  2EF9               	goto	u1845
  3425  06FD  3001               	movlw	1
  3426  06FE  02F6               	subwf	___awdiv@counter,f
  3427  06FF  1D03               	btfss	3,2
  3428  0700  2EE6               	goto	l2392
  3429  0701                     l2402:	
  3430  0701  0877               	movf	___awdiv@sign,w
  3431  0702  1903               	btfsc	3,2
  3432  0703  2F09               	goto	l2406
  3433  0704  09F8               	comf	___awdiv@quotient,f
  3434  0705  09F9               	comf	___awdiv@quotient+1,f
  3435  0706  0AF8               	incf	___awdiv@quotient,f
  3436  0707  1903               	skipnz
  3437  0708  0AF9               	incf	___awdiv@quotient+1,f
  3438  0709                     l2406:	
  3439  0709  0879               	movf	___awdiv@quotient+1,w
  3440  070A  01F2               	clrf	?___awdiv+1
  3441  070B  07F2               	addwf	?___awdiv+1,f
  3442  070C  0878               	movf	___awdiv@quotient,w
  3443  070D  01F1               	clrf	?___awdiv
  3444  070E  07F1               	addwf	?___awdiv,f
  3445  070F  0008               	return
  3446  0710                     __end_of___awdiv:	
  3447                           
  3448                           	psect	text6
  3449  0F99                     __ptext6:	
  3450 ;; *************** function _ADC_ReadOne *****************
  3451 ;; Defined at:
  3452 ;;		line 21 in file "adc.c"
  3453 ;; Parameters:    Size  Location     Type
  3454 ;;  channel         1    wreg     unsigned char 
  3455 ;; Auto vars:     Size  Location     Type
  3456 ;;  channel         1    4[BANK0 ] unsigned char 
  3457 ;;  result          2    5[BANK0 ] unsigned short 
  3458 ;; Return value:  Size  Location     Type
  3459 ;;                  2    1[BANK0 ] unsigned int 
  3460 ;; Registers used:
  3461 ;;		wreg, status,2, status,0, pclath, cstack
  3462 ;; Tracked objects:
  3463 ;;		On entry : 0/0
  3464 ;;		On exit  : 0/0
  3465 ;;		Unchanged: 0/0
  3466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3467 ;;      Params:         0       2       0       0       0       0       0       0
  3468 ;;      Locals:         0       3       0       0       0       0       0       0
  3469 ;;      Temps:          0       1       0       0       0       0       0       0
  3470 ;;      Totals:         0       6       0       0       0       0       0       0
  3471 ;;Total ram usage:        6 bytes
  3472 ;; Hardware stack levels used:    1
  3473 ;; Hardware stack levels required when called:    3
  3474 ;; This function calls:
  3475 ;;		_timer1_poll_delay
  3476 ;; This function is called by:
  3477 ;;		_ADC_Read
  3478 ;; This function uses a non-reentrant model
  3479 ;;
  3480                           
  3481                           
  3482                           ;psect for function _ADC_ReadOne
  3483  0F99                     _ADC_ReadOne:	
  3484                           
  3485                           ;incstack = 0
  3486                           ; Regs used in _ADC_ReadOne: [wreg+status,2+status,0+pclath+cstack]
  3487                           ;ADC_ReadOne@channel stored from wreg
  3488  0F99  0020               	movlb	0	; select bank0
  3489  0F9A  00A4               	movwf	ADC_ReadOne@channel
  3490                           
  3491                           ;adc.c: 22: ADCON0bits.CHS = channel;
  3492  0F9B  0824               	movf	ADC_ReadOne@channel,w
  3493  0F9C  00A3               	movwf	??_ADC_ReadOne
  3494  0F9D  0DA3               	rlf	??_ADC_ReadOne,f
  3495  0F9E  0DA3               	rlf	??_ADC_ReadOne,f
  3496  0F9F  0021               	movlb	1	; select bank1
  3497  0FA0  081D               	movf	29,w	;volatile
  3498  0FA1  0020               	movlb	0	; select bank0
  3499  0FA2  0623               	xorwf	??_ADC_ReadOne,w
  3500  0FA3  3983               	andlw	-125
  3501  0FA4  0623               	xorwf	??_ADC_ReadOne,w
  3502  0FA5  0021               	movlb	1	; select bank1
  3503  0FA6  009D               	movwf	29	;volatile
  3504                           
  3505                           ;adc.c: 23: ADCON0bits.ADON = 1;
  3506  0FA7  141D               	bsf	29,0	;volatile
  3507                           
  3508                           ;adc.c: 26: timer1_poll_delay(50, 0);
  3509  0FA8  3032               	movlw	50
  3510  0FA9  00F7               	movwf	?_timer1_poll_delay
  3511  0FAA  3000               	movlw	0
  3512  0FAB  00F8               	movwf	?_timer1_poll_delay+1
  3513  0FAC  3000               	movlw	0
  3514  0FAD  00F9               	movwf	?_timer1_poll_delay+2
  3515  0FAE  3000               	movlw	0
  3516  0FAF  00FA               	movwf	?_timer1_poll_delay+3
  3517  0FB0  3180  2011  318F   	fcall	_timer1_poll_delay
  3518                           
  3519                           ;adc.c: 28: ADCON0bits.GO = 1;
  3520  0FB3  0021               	movlb	1	; select bank1
  3521  0FB4  149D               	bsf	29,1	;volatile
  3522  0FB5                     l335:	
  3523                           ;adc.c: 29: while(ADCON0bits.GO) {}
  3524                           
  3525  0FB5  189D               	btfsc	29,1	;volatile
  3526  0FB6  2FB5               	goto	l335
  3527                           
  3528                           ;adc.c: 31: unsigned short result = ADRES;
  3529  0FB7  081C               	movf	28,w	;volatile
  3530  0FB8  0020               	movlb	0	; select bank0
  3531  0FB9  01A6               	clrf	ADC_ReadOne@result+1
  3532  0FBA  07A6               	addwf	ADC_ReadOne@result+1,f
  3533  0FBB  0021               	movlb	1	; select bank1
  3534  0FBC  081B               	movf	27,w	;volatile
  3535  0FBD  0020               	movlb	0	; select bank0
  3536  0FBE  01A5               	clrf	ADC_ReadOne@result
  3537  0FBF  07A5               	addwf	ADC_ReadOne@result,f
  3538                           
  3539                           ;adc.c: 32: PIR1bits.ADIF = 0;
  3540  0FC0  1311               	bcf	17,6	;volatile
  3541                           
  3542                           ;adc.c: 34: ADCON0bits.ADON = 0;
  3543  0FC1  0021               	movlb	1	; select bank1
  3544  0FC2  101D               	bcf	29,0	;volatile
  3545                           
  3546                           ;adc.c: 36: return result;
  3547  0FC3  0020               	movlb	0	; select bank0
  3548  0FC4  0826               	movf	ADC_ReadOne@result+1,w
  3549  0FC5  01A2               	clrf	?_ADC_ReadOne+1
  3550  0FC6  07A2               	addwf	?_ADC_ReadOne+1,f
  3551  0FC7  0825               	movf	ADC_ReadOne@result,w
  3552  0FC8  01A1               	clrf	?_ADC_ReadOne
  3553  0FC9  07A1               	addwf	?_ADC_ReadOne,f
  3554  0FCA  0008               	return
  3555  0FCB                     __end_of_ADC_ReadOne:	
  3556                           
  3557                           	psect	text7
  3558  0E4A                     __ptext7:	
  3559 ;; *************** function _SendReceiverBroadcastRequest *****************
  3560 ;; Defined at:
  3561 ;;		line 29 in file "packets.c"
  3562 ;; Parameters:    Size  Location     Type
  3563 ;;		None
  3564 ;; Auto vars:     Size  Location     Type
  3565 ;;		None
  3566 ;; Return value:  Size  Location     Type
  3567 ;;		None               void
  3568 ;; Registers used:
  3569 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3570 ;; Tracked objects:
  3571 ;;		On entry : 0/0
  3572 ;;		On exit  : 0/0
  3573 ;;		Unchanged: 0/0
  3574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3575 ;;      Params:         0       0       0       0       0       0       0       0
  3576 ;;      Locals:         0       0       0       0       0       0       0       0
  3577 ;;      Temps:          0       1       0       0       0       0       0       0
  3578 ;;      Totals:         0       1       0       0       0       0       0       0
  3579 ;;Total ram usage:        1 bytes
  3580 ;; Hardware stack levels used:    1
  3581 ;; Hardware stack levels required when called:    7
  3582 ;; This function calls:
  3583 ;;		_CRC16_Generate
  3584 ;;		_SendPacket
  3585 ;; This function is called by:
  3586 ;;		_main
  3587 ;; This function uses a non-reentrant model
  3588 ;;
  3589                           
  3590                           
  3591                           ;psect for function _SendReceiverBroadcastRequest
  3592  0E4A                     _SendReceiverBroadcastRequest:	
  3593                           
  3594                           ;packets.c: 30: packet_buffer.header.command = 0x04;
  3595                           
  3596                           ;incstack = 0
  3597                           ; Regs used in _SendReceiverBroadcastRequest: [allreg]
  3598  0E4A  3004               	movlw	4
  3599  0E4B  0020               	movlb	0	; select bank0
  3600  0E4C  00DF               	movwf	??_SendReceiverBroadcastRequest
  3601  0E4D  085F               	movf	??_SendReceiverBroadcastRequest,w
  3602  0E4E  0021               	movlb	1	; select bank1
  3603  0E4F  00B2               	movwf	(_packet_buffer^(0+128)+5)
  3604                           
  3605                           ;packets.c: 31: packet_buffer.header.magic = 0xAA55;
  3606  0E50  3055               	movlw	85
  3607  0E51  00AD               	movwf	_packet_buffer^(0+128)
  3608  0E52  30AA               	movlw	170
  3609  0E53  00AE               	movwf	(_packet_buffer^(0+128)+1)
  3610                           
  3611                           ;packets.c: 32: packet_buffer.header.revision = 0;
  3612  0E54  01B1               	clrf	(_packet_buffer^(0+128)+4)
  3613                           
  3614                           ;packets.c: 33: packet_buffer.header.crc16 = CRC16_Generate((byte*)&packet_buffer, sizeo
      +                          f(Packet));
  3615  0E55  3020               	movlw	32
  3616  0E56  0020               	movlb	0	; select bank0
  3617  0E57  00A0               	movwf	?_CRC16_Generate
  3618  0E58  3000               	movlw	0
  3619  0E59  00A1               	movwf	?_CRC16_Generate+1
  3620  0E5A  30AD               	movlw	_packet_buffer& (0+255)
  3621  0E5B  318F  2738  318E   	fcall	_CRC16_Generate
  3622  0E5E  0020               	movlb	0	; select bank0
  3623  0E5F  0821               	movf	?_CRC16_Generate+1,w
  3624  0E60  0021               	movlb	1	; select bank1
  3625  0E61  01B0               	clrf	((_packet_buffer+1)^(0+128)+2)
  3626  0E62  07B0               	addwf	((_packet_buffer+1)^(0+128)+2),f
  3627  0E63  0020               	movlb	0	; select bank0
  3628  0E64  0820               	movf	?_CRC16_Generate,w
  3629  0E65  0021               	movlb	1	; select bank1
  3630  0E66  01AF               	clrf	(_packet_buffer^(0+128)+2)
  3631  0E67  07AF               	addwf	(_packet_buffer^(0+128)+2),f
  3632                           
  3633                           ;packets.c: 35: SendPacket(&packet_buffer);
  3634  0E68  30AD               	movlw	_packet_buffer& (0+255)
  3635  0E69  318E  26BA         	fcall	_SendPacket
  3636  0E6B  0008               	return
  3637  0E6C                     __end_of_SendReceiverBroadcastRequest:	
  3638                           
  3639                           	psect	text8
  3640  0EBA                     __ptext8:	
  3641 ;; *************** function _SendPacket *****************
  3642 ;; Defined at:
  3643 ;;		line 44 in file "packets.c"
  3644 ;; Parameters:    Size  Location     Type
  3645 ;;  packet          1    wreg     PTR struct .
  3646 ;;		 -> packet_buffer(32), 
  3647 ;; Auto vars:     Size  Location     Type
  3648 ;;  packet          1   61[BANK0 ] PTR struct .
  3649 ;;		 -> packet_buffer(32), 
  3650 ;;  status          1   62[BANK0 ] unsigned char 
  3651 ;; Return value:  Size  Location     Type
  3652 ;;		None               void
  3653 ;; Registers used:
  3654 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3655 ;; Tracked objects:
  3656 ;;		On entry : 0/0
  3657 ;;		On exit  : 0/0
  3658 ;;		Unchanged: 0/0
  3659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3660 ;;      Params:         0       0       0       0       0       0       0       0
  3661 ;;      Locals:         0       2       0       0       0       0       0       0
  3662 ;;      Temps:          0       2       0       0       0       0       0       0
  3663 ;;      Totals:         0       4       0       0       0       0       0       0
  3664 ;;Total ram usage:        4 bytes
  3665 ;; Hardware stack levels used:    1
  3666 ;; Hardware stack levels required when called:    6
  3667 ;; This function calls:
  3668 ;;		_XBAPI_Transmit
  3669 ;; This function is called by:
  3670 ;;		_SendReport
  3671 ;;		_SendReceiverBroadcastRequest
  3672 ;;		___doTestSendPacket
  3673 ;; This function uses a non-reentrant model
  3674 ;;
  3675                           
  3676                           
  3677                           ;psect for function _SendPacket
  3678  0EBA                     _SendPacket:	
  3679                           
  3680                           ;incstack = 0
  3681                           ; Regs used in _SendPacket: [allreg]
  3682                           ;SendPacket@packet stored from wreg
  3683  0EBA  0020               	movlb	0	; select bank0
  3684  0EBB  00DD               	movwf	SendPacket@packet
  3685                           
  3686                           ;packets.c: 45: if(frame_id_itr == 0) {
  3687  0EBC  0021               	movlb	1	; select bank1
  3688  0EBD  08AA               	movf	_frame_id_itr^(0+128),f
  3689  0EBE  1D03               	skipz
  3690  0EBF  2EC6               	goto	l2838
  3691                           
  3692                           ;packets.c: 46: frame_id_itr++;
  3693  0EC0  3001               	movlw	1
  3694  0EC1  0020               	movlb	0	; select bank0
  3695  0EC2  00DB               	movwf	??_SendPacket
  3696  0EC3  085B               	movf	??_SendPacket,w
  3697  0EC4  0021               	movlb	1	; select bank1
  3698  0EC5  07AA               	addwf	_frame_id_itr^(0+128),f
  3699  0EC6                     l2838:	
  3700                           
  3701                           ;packets.c: 47: }
  3702                           ;packets.c: 48: byte status = 1;
  3703  0EC6  0020               	movlb	0	; select bank0
  3704  0EC7  01DE               	clrf	SendPacket@status
  3705  0EC8  0ADE               	incf	SendPacket@status,f
  3706  0EC9                     l2842:	
  3707                           ;packets.c: 49: while(status) {
  3708                           
  3709  0EC9  08DE               	movf	SendPacket@status,f
  3710  0ECA  1903               	btfsc	3,2
  3711  0ECB  0008               	return
  3712                           
  3713                           ;packets.c: 50: status = XBAPI_Transmit(&dest_address, (byte*) packet, sizeof(Packet), 0
      +                          );
  3714  0ECC  085D               	movf	SendPacket@packet,w
  3715  0ECD  00DB               	movwf	??_SendPacket
  3716  0ECE  085B               	movf	??_SendPacket,w
  3717  0ECF  00D0               	movwf	?_XBAPI_Transmit
  3718  0ED0  3020               	movlw	32
  3719  0ED1  00D1               	movwf	?_XBAPI_Transmit+1
  3720  0ED2  3000               	movlw	0
  3721  0ED3  00D2               	movwf	?_XBAPI_Transmit+2
  3722  0ED4  3000               	movlw	0
  3723  0ED5  00D3               	movwf	?_XBAPI_Transmit+3
  3724  0ED6  3000               	movlw	0
  3725  0ED7  00D4               	movwf	?_XBAPI_Transmit+4
  3726  0ED8  30E4               	movlw	_dest_address& (0+255)
  3727  0ED9  3184  24A2  318E   	fcall	_XBAPI_Transmit
  3728  0EDC  0020               	movlb	0	; select bank0
  3729  0EDD  0850               	movf	?_XBAPI_Transmit,w
  3730  0EDE  00DC               	movwf	??_SendPacket+1
  3731  0EDF  085C               	movf	??_SendPacket+1,w
  3732  0EE0  00DE               	movwf	SendPacket@status
  3733  0EE1  2EC9               	goto	l2842
  3734  0EE2                     __end_of_SendPacket:	
  3735                           
  3736                           	psect	text9
  3737  04A2                     __ptext9:	
  3738 ;; *************** function _XBAPI_Transmit *****************
  3739 ;; Defined at:
  3740 ;;		line 116 in file "xbee.c"
  3741 ;; Parameters:    Size  Location     Type
  3742 ;;  address         1    wreg     PTR struct __XBeeAddress
  3743 ;;		 -> dest_address(8), 
  3744 ;;  data            1   48[BANK0 ] PTR const unsigned char 
  3745 ;;		 -> packet_buffer(32), 
  3746 ;;  length          2   49[BANK0 ] int 
  3747 ;;  id              2   51[BANK0 ] int 
  3748 ;; Auto vars:     Size  Location     Type
  3749 ;;  address         1   54[BANK0 ] PTR struct __XBeeAddress
  3750 ;;		 -> dest_address(8), 
  3751 ;;  error           2   57[BANK0 ] int 
  3752 ;; Return value:  Size  Location     Type
  3753 ;;                  2   48[BANK0 ] int 
  3754 ;; Registers used:
  3755 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3756 ;; Tracked objects:
  3757 ;;		On entry : 0/0
  3758 ;;		On exit  : 0/0
  3759 ;;		Unchanged: 0/0
  3760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3761 ;;      Params:         0       5       0       0       0       0       0       0
  3762 ;;      Locals:         0       5       0       0       0       0       0       0
  3763 ;;      Temps:          0       1       0       0       0       0       0       0
  3764 ;;      Totals:         0      11       0       0       0       0       0       0
  3765 ;;Total ram usage:       11 bytes
  3766 ;; Hardware stack levels used:    1
  3767 ;; Hardware stack levels required when called:    5
  3768 ;; This function calls:
  3769 ;;		_XBAPI_HandleFrame
  3770 ;;		_UART_TransmitMsg
  3771 ;;		_XBee_Reset
  3772 ;;		_checksum
  3773 ;;		_memcpy
  3774 ;; This function is called by:
  3775 ;;		_SendPacket
  3776 ;; This function uses a non-reentrant model
  3777 ;;
  3778                           
  3779                           
  3780                           ;psect for function _XBAPI_Transmit
  3781  04A2                     _XBAPI_Transmit:	
  3782                           
  3783                           ;incstack = 0
  3784                           ; Regs used in _XBAPI_Transmit: [allreg]
  3785                           ;XBAPI_Transmit@address stored from wreg
  3786  04A2  0020               	movlb	0	; select bank0
  3787  04A3  00D6               	movwf	XBAPI_Transmit@address
  3788                           
  3789                           ;xbee.c: 120: apiFrame.tx.start_delimiter = 0x7e;
  3790  04A4  307E               	movlw	126
  3791  04A5  00D5               	movwf	??_XBAPI_Transmit
  3792  04A6  0855               	movf	??_XBAPI_Transmit,w
  3793  04A7  0022               	movlb	2	; select bank2
  3794  04A8  00A0               	movwf	_apiFrame^(0+256)
  3795                           
  3796                           ;xbee.c: 121: apiFrame.tx.length[0] = 0;
  3797  04A9  01A1               	clrf	(_apiFrame^(0+256)+1)
  3798                           
  3799                           ;xbee.c: 122: apiFrame.tx.length[1] = sizeof(TxFrame)-4;
  3800  04AA  302E               	movlw	46
  3801  04AB  0020               	movlb	0	; select bank0
  3802  04AC  00D5               	movwf	??_XBAPI_Transmit
  3803  04AD  0855               	movf	??_XBAPI_Transmit,w
  3804  04AE  0022               	movlb	2	; select bank2
  3805  04AF  00A2               	movwf	(_apiFrame^(0+256)+2)
  3806                           
  3807                           ;xbee.c: 123: apiFrame.tx.frame_id = id;
  3808  04B0  0020               	movlb	0	; select bank0
  3809  04B1  0853               	movf	XBAPI_Transmit@id,w
  3810  04B2  00D5               	movwf	??_XBAPI_Transmit
  3811  04B3  0855               	movf	??_XBAPI_Transmit,w
  3812  04B4  0022               	movlb	2	; select bank2
  3813  04B5  00A4               	movwf	(_apiFrame^(0+256)+4)
  3814                           
  3815                           ;xbee.c: 124: apiFrame.tx.frame_type = 0x10;
  3816  04B6  3010               	movlw	16
  3817  04B7  0020               	movlb	0	; select bank0
  3818  04B8  00D5               	movwf	??_XBAPI_Transmit
  3819  04B9  0855               	movf	??_XBAPI_Transmit,w
  3820  04BA  0022               	movlb	2	; select bank2
  3821  04BB  00A3               	movwf	(_apiFrame^(0+256)+3)
  3822                           
  3823                           ;xbee.c: 125: memcpy(&apiFrame.tx.destination_address, address, sizeof(XBeeAddress));
  3824  04BC  3025               	movlw	low (_apiFrame+5)
  3825  04BD  00F1               	movwf	?_memcpy
  3826  04BE  3001               	movlw	high (_apiFrame+5)
  3827  04BF  00F2               	movwf	?_memcpy+1
  3828  04C0  0020               	movlb	0	; select bank0
  3829  04C1  0856               	movf	XBAPI_Transmit@address,w
  3830  04C2  00F3               	movwf	?_memcpy+2
  3831  04C3  3000               	movlw	0
  3832  04C4  00F4               	movwf	?_memcpy+3
  3833  04C5  3008               	movlw	8
  3834  04C6  00F5               	movwf	?_memcpy+4
  3835  04C7  3000               	movlw	0
  3836  04C8  00F6               	movwf	?_memcpy+5
  3837  04C9  3180  20D2  3184   	fcall	_memcpy
  3838                           
  3839                           ;xbee.c: 126: apiFrame.tx.reserved = 0xFEFF;
  3840  04CC  30FF               	movlw	255
  3841  04CD  0022               	movlb	2	; select bank2
  3842  04CE  00AD               	movwf	(_apiFrame^(0+256)+13)
  3843  04CF  30FE               	movlw	254
  3844  04D0  00AE               	movwf	(_apiFrame^(0+256)+14)
  3845                           
  3846                           ;xbee.c: 127: apiFrame.tx.transmit_options = 0;
  3847  04D1  01B0               	clrf	(_apiFrame^(0+256)+16)
  3848                           
  3849                           ;xbee.c: 128: apiFrame.tx.broadcast_radius = 0;
  3850  04D2  01AF               	clrf	(_apiFrame^(0+256)+15)
  3851                           
  3852                           ;xbee.c: 129: memcpy(&apiFrame.tx.packet, data, (length>sizeof(Packet)) ? sizeof(Packet)
      +                           : length);
  3853  04D3  3000               	movlw	0
  3854  04D4  0020               	movlb	0	; select bank0
  3855  04D5  0252               	subwf	XBAPI_Transmit@length+1,w
  3856  04D6  3021               	movlw	33
  3857  04D7  1903               	skipnz
  3858  04D8  0251               	subwf	XBAPI_Transmit@length,w
  3859  04D9  1803               	skipnc
  3860  04DA  2CE2               	goto	l2770
  3861  04DB  0852               	movf	XBAPI_Transmit@length+1,w
  3862  04DC  01D8               	clrf	_XBAPI_Transmit$864+1
  3863  04DD  07D8               	addwf	_XBAPI_Transmit$864+1,f
  3864  04DE  0851               	movf	XBAPI_Transmit@length,w
  3865  04DF  01D7               	clrf	_XBAPI_Transmit$864
  3866  04E0  07D7               	addwf	_XBAPI_Transmit$864,f
  3867  04E1  2CE6               	goto	l2772
  3868  04E2                     l2770:	
  3869  04E2  3020               	movlw	32
  3870  04E3  00D7               	movwf	_XBAPI_Transmit$864
  3871  04E4  3000               	movlw	0
  3872  04E5  00D8               	movwf	_XBAPI_Transmit$864+1
  3873  04E6                     l2772:	
  3874  04E6  3031               	movlw	low (_apiFrame+17)
  3875  04E7  00F1               	movwf	?_memcpy
  3876  04E8  3001               	movlw	high (_apiFrame+17)
  3877  04E9  00F2               	movwf	?_memcpy+1
  3878  04EA  0850               	movf	XBAPI_Transmit@data,w
  3879  04EB  00F3               	movwf	?_memcpy+2
  3880  04EC  3000               	movlw	0
  3881  04ED  00F4               	movwf	?_memcpy+3
  3882  04EE  0858               	movf	_XBAPI_Transmit$864+1,w
  3883  04EF  01F6               	clrf	?_memcpy+5
  3884  04F0  07F6               	addwf	?_memcpy+5,f
  3885  04F1  0857               	movf	_XBAPI_Transmit$864,w
  3886  04F2  01F5               	clrf	?_memcpy+4
  3887  04F3  07F5               	addwf	?_memcpy+4,f
  3888  04F4  3180  20D2  3184   	fcall	_memcpy
  3889                           
  3890                           ;xbee.c: 130: apiFrame.tx.checksum = checksum(apiFrame.buffer+3, sizeof(TxFrame)-4);
  3891  04F7  302E               	movlw	46
  3892  04F8  00F1               	movwf	?_checksum
  3893  04F9  3000               	movlw	0
  3894  04FA  00F2               	movwf	?_checksum+1
  3895  04FB  3023               	movlw	(_apiFrame+3)& (0+255)
  3896  04FC  318E  2692  3184   	fcall	_checksum
  3897  04FF  0020               	movlb	0	; select bank0
  3898  0500  00D5               	movwf	??_XBAPI_Transmit
  3899  0501  0855               	movf	??_XBAPI_Transmit,w
  3900  0502  0022               	movlb	2	; select bank2
  3901  0503  00D1               	movwf	(_apiFrame^(0+256)+49)
  3902                           
  3903                           ;xbee.c: 132: UART_TransmitMsg((byte*)&apiFrame, sizeof(TxFrame), 0);
  3904  0504  3032               	movlw	50
  3905  0505  00F2               	movwf	?_UART_TransmitMsg
  3906  0506  3000               	movlw	0
  3907  0507  00F3               	movwf	?_UART_TransmitMsg+1
  3908  0508  01F4               	clrf	?_UART_TransmitMsg+2
  3909  0509  3020               	movlw	_apiFrame& (0+255)
  3910  050A  318F  2768  3184   	fcall	_UART_TransmitMsg
  3911                           
  3912                           ;xbee.c: 134: int error = 0;
  3913  050D  0020               	movlb	0	; select bank0
  3914  050E  01D9               	clrf	XBAPI_Transmit@error
  3915  050F  01DA               	clrf	XBAPI_Transmit@error+1
  3916                           
  3917                           ;xbee.c: 135: if(id) {
  3918  0510  0854               	movf	XBAPI_Transmit@id+1,w
  3919  0511  0453               	iorwf	XBAPI_Transmit@id,w
  3920  0512  1903               	skipnz
  3921  0513  2D30               	goto	l2788
  3922                           
  3923                           ;xbee.c: 136: error = XBAPI_HandleFrame(0x8B, 1);
  3924  0514  308B               	movlw	139
  3925  0515  00AE               	movwf	?_XBAPI_HandleFrame
  3926  0516  3000               	movlw	0
  3927  0517  00AF               	movwf	?_XBAPI_HandleFrame+1
  3928  0518  3001               	movlw	1
  3929  0519  00B0               	movwf	?_XBAPI_HandleFrame+2
  3930  051A  3000               	movlw	0
  3931  051B  00B1               	movwf	?_XBAPI_HandleFrame+3
  3932  051C  3182  2287  3184   	fcall	_XBAPI_HandleFrame
  3933  051F  0020               	movlb	0	; select bank0
  3934  0520  082F               	movf	?_XBAPI_HandleFrame+1,w
  3935  0521  01DA               	clrf	XBAPI_Transmit@error+1
  3936  0522  07DA               	addwf	XBAPI_Transmit@error+1,f
  3937  0523  082E               	movf	?_XBAPI_HandleFrame,w
  3938  0524  01D9               	clrf	XBAPI_Transmit@error
  3939  0525  07D9               	addwf	XBAPI_Transmit@error,f
  3940                           
  3941                           ;xbee.c: 137: if(error == -2) {
  3942  0526  30FF               	movlw	255
  3943  0527  065A               	xorwf	XBAPI_Transmit@error+1,w
  3944  0528  1D03               	skipz
  3945  0529  2D2C               	goto	u2205
  3946  052A  30FE               	movlw	254
  3947  052B  0659               	xorwf	XBAPI_Transmit@error,w
  3948  052C                     u2205:	
  3949  052C  1D03               	skipz
  3950  052D  2D30               	goto	l2788
  3951                           
  3952                           ;xbee.c: 139: XBee_Reset();
  3953  052E  318D  259B         	fcall	_XBee_Reset
  3954  0530                     l2788:	
  3955                           
  3956                           ;xbee.c: 140: }
  3957                           ;xbee.c: 141: }
  3958                           ;xbee.c: 143: return error;
  3959  0530  0020               	movlb	0	; select bank0
  3960  0531  085A               	movf	XBAPI_Transmit@error+1,w
  3961  0532  01D1               	clrf	?_XBAPI_Transmit+1
  3962  0533  07D1               	addwf	?_XBAPI_Transmit+1,f
  3963  0534  0859               	movf	XBAPI_Transmit@error,w
  3964  0535  01D0               	clrf	?_XBAPI_Transmit
  3965  0536  07D0               	addwf	?_XBAPI_Transmit,f
  3966  0537  0008               	return
  3967  0538                     __end_of_XBAPI_Transmit:	
  3968                           
  3969                           	psect	text10
  3970  0D9B                     __ptext10:	
  3971 ;; *************** function _XBee_Reset *****************
  3972 ;; Defined at:
  3973 ;;		line 32 in file "xbee.c"
  3974 ;; Parameters:    Size  Location     Type
  3975 ;;		None
  3976 ;; Auto vars:     Size  Location     Type
  3977 ;;		None
  3978 ;; Return value:  Size  Location     Type
  3979 ;;		None               void
  3980 ;; Registers used:
  3981 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3982 ;; Tracked objects:
  3983 ;;		On entry : 0/0
  3984 ;;		On exit  : 0/0
  3985 ;;		Unchanged: 0/0
  3986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3987 ;;      Params:         0       0       0       0       0       0       0       0
  3988 ;;      Locals:         0       0       0       0       0       0       0       0
  3989 ;;      Temps:          0       0       0       0       0       0       0       0
  3990 ;;      Totals:         0       0       0       0       0       0       0       0
  3991 ;;Total ram usage:        0 bytes
  3992 ;; Hardware stack levels used:    1
  3993 ;; Hardware stack levels required when called:    4
  3994 ;; This function calls:
  3995 ;;		_XBee_Enable
  3996 ;;		_XBee_Disable
  3997 ;;		_timer1_poll_delay_ms
  3998 ;; This function is called by:
  3999 ;;		_XBAPI_Transmit
  4000 ;; This function uses a non-reentrant model
  4001 ;;
  4002                           
  4003                           
  4004                           ;psect for function _XBee_Reset
  4005  0D9B                     _XBee_Reset:	
  4006                           
  4007                           ;xbee.c: 33: XBee_Disable();
  4008                           
  4009                           ;incstack = 0
  4010                           ; Regs used in _XBee_Reset: [allreg]
  4011  0D9B  318D  2533  318D   	fcall	_XBee_Disable
  4012                           
  4013                           ;xbee.c: 34: timer1_poll_delay_ms(1);
  4014  0D9E  3001               	movlw	1
  4015  0D9F  0020               	movlb	0	; select bank0
  4016  0DA0  00A1               	movwf	?_timer1_poll_delay_ms
  4017  0DA1  3000               	movlw	0
  4018  0DA2  00A2               	movwf	?_timer1_poll_delay_ms+1
  4019  0DA3  318D  25B3  318D   	fcall	_timer1_poll_delay_ms
  4020                           
  4021                           ;xbee.c: 35: XBee_Enable(last_xbee_baud);
  4022  0DA6  0021               	movlb	1	; select bank1
  4023  0DA7  0827               	movf	(_last_xbee_baud+1)^(0+128),w
  4024  0DA8  0020               	movlb	0	; select bank0
  4025  0DA9  01CF               	clrf	?_XBee_Enable+1
  4026  0DAA  07CF               	addwf	?_XBee_Enable+1,f
  4027  0DAB  0021               	movlb	1	; select bank1
  4028  0DAC  0826               	movf	_last_xbee_baud^(0+128),w
  4029  0DAD  0020               	movlb	0	; select bank0
  4030  0DAE  01CE               	clrf	?_XBee_Enable
  4031  0DAF  07CE               	addwf	?_XBee_Enable,f
  4032  0DB0  318E  2629         	fcall	_XBee_Enable
  4033  0DB2  0008               	return
  4034  0DB3                     __end_of_XBee_Reset:	
  4035                           
  4036                           	psect	text11
  4037  0DB3                     __ptext11:	
  4038 ;; *************** function _timer1_poll_delay_ms *****************
  4039 ;; Defined at:
  4040 ;;		line 51 in file "timer.c"
  4041 ;; Parameters:    Size  Location     Type
  4042 ;;  ms              2    1[BANK0 ] unsigned short 
  4043 ;; Auto vars:     Size  Location     Type
  4044 ;;		None
  4045 ;; Return value:  Size  Location     Type
  4046 ;;		None               void
  4047 ;; Registers used:
  4048 ;;		wreg, status,2, status,0, pclath, cstack
  4049 ;; Tracked objects:
  4050 ;;		On entry : 0/0
  4051 ;;		On exit  : 0/0
  4052 ;;		Unchanged: 0/0
  4053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4054 ;;      Params:         0       2       0       0       0       0       0       0
  4055 ;;      Locals:         0       0       0       0       0       0       0       0
  4056 ;;      Temps:          0       0       0       0       0       0       0       0
  4057 ;;      Totals:         0       2       0       0       0       0       0       0
  4058 ;;Total ram usage:        2 bytes
  4059 ;; Hardware stack levels used:    1
  4060 ;; Hardware stack levels required when called:    3
  4061 ;; This function calls:
  4062 ;;		_timer1_poll_delay
  4063 ;;		___wmul
  4064 ;; This function is called by:
  4065 ;;		_XBee_Reset
  4066 ;;		_XBee_Wake
  4067 ;; This function uses a non-reentrant model
  4068 ;;
  4069                           
  4070                           
  4071                           ;psect for function _timer1_poll_delay_ms
  4072  0DB3                     _timer1_poll_delay_ms:	
  4073                           
  4074                           ;timer.c: 54: timer1_poll_delay(ms*(8000000/1000), 0);
  4075                           
  4076                           ;incstack = 0
  4077                           ; Regs used in _timer1_poll_delay_ms: [wreg+status,2+status,0+pclath+cstack]
  4078  0DB3  0020               	movlb	0	; select bank0
  4079  0DB4  0822               	movf	timer1_poll_delay_ms@ms+1,w
  4080  0DB5  01F2               	clrf	?___wmul+1
  4081  0DB6  07F2               	addwf	?___wmul+1,f
  4082  0DB7  0821               	movf	timer1_poll_delay_ms@ms,w
  4083  0DB8  01F1               	clrf	?___wmul
  4084  0DB9  07F1               	addwf	?___wmul,f
  4085  0DBA  3040               	movlw	64
  4086  0DBB  00F3               	movwf	?___wmul+2
  4087  0DBC  301F               	movlw	31
  4088  0DBD  00F4               	movwf	?___wmul+3
  4089  0DBE  318D  25EB  318D   	fcall	___wmul
  4090  0DC1  0872               	movf	?___wmul+1,w
  4091  0DC2  01F8               	clrf	?_timer1_poll_delay+1
  4092  0DC3  07F8               	addwf	?_timer1_poll_delay+1,f
  4093  0DC4  0871               	movf	?___wmul,w
  4094  0DC5  01F7               	clrf	?_timer1_poll_delay
  4095  0DC6  07F7               	addwf	?_timer1_poll_delay,f
  4096  0DC7  3000               	movlw	0
  4097  0DC8  00F9               	movwf	?_timer1_poll_delay+2
  4098  0DC9  3000               	movlw	0
  4099  0DCA  00FA               	movwf	?_timer1_poll_delay+3
  4100  0DCB  3180  2011         	fcall	_timer1_poll_delay
  4101  0DCD  0008               	return
  4102  0DCE                     __end_of_timer1_poll_delay_ms:	
  4103                           
  4104                           	psect	text12
  4105  0DEB                     __ptext12:	
  4106 ;; *************** function ___wmul *****************
  4107 ;; Defined at:
  4108 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\wmul.c"
  4109 ;; Parameters:    Size  Location     Type
  4110 ;;  multiplier      2    1[COMMON] unsigned int 
  4111 ;;  multiplicand    2    3[COMMON] unsigned int 
  4112 ;; Auto vars:     Size  Location     Type
  4113 ;;  product         2    5[COMMON] unsigned int 
  4114 ;; Return value:  Size  Location     Type
  4115 ;;                  2    1[COMMON] unsigned int 
  4116 ;; Registers used:
  4117 ;;		wreg, status,2, status,0
  4118 ;; Tracked objects:
  4119 ;;		On entry : 0/0
  4120 ;;		On exit  : 0/0
  4121 ;;		Unchanged: 0/0
  4122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4123 ;;      Params:         4       0       0       0       0       0       0       0
  4124 ;;      Locals:         2       0       0       0       0       0       0       0
  4125 ;;      Temps:          0       0       0       0       0       0       0       0
  4126 ;;      Totals:         6       0       0       0       0       0       0       0
  4127 ;;Total ram usage:        6 bytes
  4128 ;; Hardware stack levels used:    1
  4129 ;; Hardware stack levels required when called:    1
  4130 ;; This function calls:
  4131 ;;		Nothing
  4132 ;; This function is called by:
  4133 ;;		_timer1_poll_delay_ms
  4134 ;; This function uses a non-reentrant model
  4135 ;;
  4136                           
  4137                           
  4138                           ;psect for function ___wmul
  4139  0DEB                     ___wmul:	
  4140                           
  4141                           ;incstack = 0
  4142                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4143  0DEB  01F5               	clrf	___wmul@product
  4144  0DEC  01F6               	clrf	___wmul@product+1
  4145  0DED                     l2412:	
  4146  0DED  1C71               	btfss	___wmul@multiplier,0
  4147  0DEE  2DF3               	goto	l876
  4148  0DEF  0873               	movf	___wmul@multiplicand,w
  4149  0DF0  07F5               	addwf	___wmul@product,f
  4150  0DF1  0874               	movf	___wmul@multiplicand+1,w
  4151  0DF2  3DF6               	addwfc	___wmul@product+1,f
  4152  0DF3                     l876:	
  4153  0DF3  3001               	movlw	1
  4154  0DF4                     u1885:	
  4155  0DF4  35F3               	lslf	___wmul@multiplicand,f
  4156  0DF5  0DF4               	rlf	___wmul@multiplicand+1,f
  4157  0DF6  0B89               	decfsz	9,f
  4158  0DF7  2DF4               	goto	u1885
  4159  0DF8  3001               	movlw	1
  4160  0DF9                     u1895:	
  4161  0DF9  36F2               	lsrf	___wmul@multiplier+1,f
  4162  0DFA  0CF1               	rrf	___wmul@multiplier,f
  4163  0DFB  0B89               	decfsz	9,f
  4164  0DFC  2DF9               	goto	u1895
  4165  0DFD  0872               	movf	___wmul@multiplier+1,w
  4166  0DFE  0471               	iorwf	___wmul@multiplier,w
  4167  0DFF  1D03               	skipz
  4168  0E00  2DED               	goto	l2412
  4169  0E01  0876               	movf	___wmul@product+1,w
  4170  0E02  01F2               	clrf	?___wmul+1
  4171  0E03  07F2               	addwf	?___wmul+1,f
  4172  0E04  0875               	movf	___wmul@product,w
  4173  0E05  01F1               	clrf	?___wmul
  4174  0E06  07F1               	addwf	?___wmul,f
  4175  0E07  0008               	return
  4176  0E08                     __end_of___wmul:	
  4177                           
  4178                           	psect	text13
  4179  0D33                     __ptext13:	
  4180 ;; *************** function _XBee_Disable *****************
  4181 ;; Defined at:
  4182 ;;		line 61 in file "xbee.c"
  4183 ;; Parameters:    Size  Location     Type
  4184 ;;		None
  4185 ;; Auto vars:     Size  Location     Type
  4186 ;;		None
  4187 ;; Return value:  Size  Location     Type
  4188 ;;		None               void
  4189 ;; Registers used:
  4190 ;;		None
  4191 ;; Tracked objects:
  4192 ;;		On entry : 0/0
  4193 ;;		On exit  : 0/0
  4194 ;;		Unchanged: 0/0
  4195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4196 ;;      Params:         0       0       0       0       0       0       0       0
  4197 ;;      Locals:         0       0       0       0       0       0       0       0
  4198 ;;      Temps:          0       0       0       0       0       0       0       0
  4199 ;;      Totals:         0       0       0       0       0       0       0       0
  4200 ;;Total ram usage:        0 bytes
  4201 ;; Hardware stack levels used:    1
  4202 ;; Hardware stack levels required when called:    1
  4203 ;; This function calls:
  4204 ;;		Nothing
  4205 ;; This function is called by:
  4206 ;;		_main
  4207 ;;		_XBee_Reset
  4208 ;;		_XBee_Wake
  4209 ;; This function uses a non-reentrant model
  4210 ;;
  4211                           
  4212                           
  4213                           ;psect for function _XBee_Disable
  4214  0D33                     _XBee_Disable:	
  4215                           
  4216                           ;xbee.c: 62: PORTCbits.RC0 = 0;
  4217                           
  4218                           ;incstack = 0
  4219                           ; Regs used in _XBee_Disable: []
  4220  0D33  0020               	movlb	0	; select bank0
  4221  0D34  100E               	bcf	14,0	;volatile
  4222  0D35  0008               	return
  4223  0D36                     __end_of_XBee_Disable:	
  4224                           
  4225                           	psect	text14
  4226  0E29                     __ptext14:	
  4227 ;; *************** function _XBee_Enable *****************
  4228 ;; Defined at:
  4229 ;;		line 19 in file "xbee.c"
  4230 ;; Parameters:    Size  Location     Type
  4231 ;;  baud            2   46[BANK0 ] int 
  4232 ;; Auto vars:     Size  Location     Type
  4233 ;;		None
  4234 ;; Return value:  Size  Location     Type
  4235 ;;		None               void
  4236 ;; Registers used:
  4237 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  4238 ;; Tracked objects:
  4239 ;;		On entry : 0/0
  4240 ;;		On exit  : 0/0
  4241 ;;		Unchanged: 0/0
  4242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4243 ;;      Params:         0       2       0       0       0       0       0       0
  4244 ;;      Locals:         0       0       0       0       0       0       0       0
  4245 ;;      Temps:          0       0       0       0       0       0       0       0
  4246 ;;      Totals:         0       2       0       0       0       0       0       0
  4247 ;;Total ram usage:        2 bytes
  4248 ;; Hardware stack levels used:    1
  4249 ;; Hardware stack levels required when called:    3
  4250 ;; This function calls:
  4251 ;;		_sleep
  4252 ;;		_UART_Init
  4253 ;; This function is called by:
  4254 ;;		_main
  4255 ;;		_XBee_Reset
  4256 ;;		_XBee_Wake
  4257 ;; This function uses a non-reentrant model
  4258 ;;
  4259                           
  4260                           
  4261                           ;psect for function _XBee_Enable
  4262  0E29                     _XBee_Enable:	
  4263                           
  4264                           ;xbee.c: 20: PORTCbits.RC0 = 1;
  4265                           
  4266                           ;incstack = 0
  4267                           ; Regs used in _XBee_Enable: [allreg]
  4268  0E29  0020               	movlb	0	; select bank0
  4269  0E2A  140E               	bsf	14,0	;volatile
  4270                           
  4271                           ;xbee.c: 21: PORTCbits.RC1 = 0;
  4272  0E2B  108E               	bcf	14,1	;volatile
  4273  0E2C                     l218:	
  4274                           ;xbee.c: 23: while(!PORTCbits.RC2) {}
  4275                           
  4276  0E2C  1D0E               	btfss	14,2	;volatile
  4277  0E2D  2E2C               	goto	l218
  4278  0E2E                     l221:	
  4279                           ;xbee.c: 24: while(PORTCbits.RC4) {}
  4280                           
  4281  0E2E  1A0E               	btfsc	14,4	;volatile
  4282  0E2F  2E2E               	goto	l221
  4283                           
  4284                           ;xbee.c: 26: UART_Init(baud);
  4285  0E30  084F               	movf	XBee_Enable@baud+1,w
  4286  0E31  01C6               	clrf	?_UART_Init+1
  4287  0E32  07C6               	addwf	?_UART_Init+1,f
  4288  0E33  084E               	movf	XBee_Enable@baud,w
  4289  0E34  01C5               	clrf	?_UART_Init
  4290  0E35  07C5               	addwf	?_UART_Init,f
  4291  0E36  318F  27CB  318E   	fcall	_UART_Init
  4292                           
  4293                           ;xbee.c: 27: last_xbee_baud = baud;
  4294  0E39  0020               	movlb	0	; select bank0
  4295  0E3A  084F               	movf	XBee_Enable@baud+1,w
  4296  0E3B  0021               	movlb	1	; select bank1
  4297  0E3C  01A7               	clrf	(_last_xbee_baud+1)^(0+128)
  4298  0E3D  07A7               	addwf	(_last_xbee_baud+1)^(0+128),f
  4299  0E3E  0020               	movlb	0	; select bank0
  4300  0E3F  084E               	movf	XBee_Enable@baud,w
  4301  0E40  0021               	movlb	1	; select bank1
  4302  0E41  01A6               	clrf	_last_xbee_baud^(0+128)
  4303  0E42  07A6               	addwf	_last_xbee_baud^(0+128),f
  4304                           
  4305                           ;xbee.c: 29: sleep(1);
  4306  0E43  3001               	movlw	1
  4307  0E44  00F1               	movwf	?_sleep
  4308  0E45  3000               	movlw	0
  4309  0E46  00F2               	movwf	?_sleep+1
  4310  0E47  318D  2583         	fcall	_sleep
  4311  0E49  0008               	return
  4312  0E4A                     __end_of_XBee_Enable:	
  4313                           
  4314                           	psect	text15
  4315  0FCB                     __ptext15:	
  4316 ;; *************** function _UART_Init *****************
  4317 ;; Defined at:
  4318 ;;		line 7 in file "uart.c"
  4319 ;; Parameters:    Size  Location     Type
  4320 ;;  baud            2   37[BANK0 ] int 
  4321 ;; Auto vars:     Size  Location     Type
  4322 ;;  spbrg           2   44[BANK0 ] int 
  4323 ;; Return value:  Size  Location     Type
  4324 ;;		None               void
  4325 ;; Registers used:
  4326 ;;		wreg, status,2, status,0, pclath, cstack
  4327 ;; Tracked objects:
  4328 ;;		On entry : 0/0
  4329 ;;		On exit  : 0/0
  4330 ;;		Unchanged: 0/0
  4331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4332 ;;      Params:         0       2       0       0       0       0       0       0
  4333 ;;      Locals:         0       2       0       0       0       0       0       0
  4334 ;;      Temps:          0       5       0       0       0       0       0       0
  4335 ;;      Totals:         0       9       0       0       0       0       0       0
  4336 ;;Total ram usage:        9 bytes
  4337 ;; Hardware stack levels used:    1
  4338 ;; Hardware stack levels required when called:    2
  4339 ;; This function calls:
  4340 ;;		___aldiv
  4341 ;; This function is called by:
  4342 ;;		_XBee_Enable
  4343 ;; This function uses a non-reentrant model
  4344 ;;
  4345                           
  4346                           
  4347                           ;psect for function _UART_Init
  4348  0FCB                     _UART_Init:	
  4349                           
  4350                           ;uart.c: 8: TX1STAbits.SYNC = 0;
  4351                           
  4352                           ;incstack = 0
  4353                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
  4354  0FCB  0023               	movlb	3	; select bank3
  4355  0FCC  121E               	bcf	30,4	;volatile
  4356                           
  4357                           ;uart.c: 9: RC1STAbits.SPEN = 1;
  4358  0FCD  179D               	bsf	29,7	;volatile
  4359                           
  4360                           ;uart.c: 10: RC1STAbits.CREN = 1;
  4361  0FCE  161D               	bsf	29,4	;volatile
  4362                           
  4363                           ;uart.c: 11: TX1STAbits.TXEN = 1;
  4364  0FCF  169E               	bsf	30,5	;volatile
  4365                           
  4366                           ;uart.c: 13: int spbrg = ((8000000/baud)>>6) - 1;
  4367  0FD0  0020               	movlb	0	; select bank0
  4368  0FD1  0845               	movf	UART_Init@baud,w
  4369  0FD2  00B6               	movwf	?___aldiv
  4370  0FD3  0846               	movf	UART_Init@baud+1,w
  4371  0FD4  00B7               	movwf	?___aldiv+1
  4372  0FD5  0D89               	rlf	9,f
  4373  0FD6  3B89               	subwfb	9,f
  4374  0FD7  0989               	comf	9,f
  4375  0FD8  00B8               	movwf	?___aldiv+2
  4376  0FD9  00B9               	movwf	?___aldiv+3
  4377  0FDA  3000               	movlw	0
  4378  0FDB  00BD               	movwf	?___aldiv+7
  4379  0FDC  307A               	movlw	122
  4380  0FDD  00BC               	movwf	?___aldiv+6
  4381  0FDE  3012               	movlw	18
  4382  0FDF  00BB               	movwf	?___aldiv+5
  4383  0FE0  3000               	movlw	0
  4384  0FE1  00BA               	movwf	?___aldiv+4
  4385  0FE2  3185  2538  318F   	fcall	___aldiv
  4386  0FE5  0020               	movlb	0	; select bank0
  4387  0FE6  0836               	movf	?___aldiv,w
  4388  0FE7  00C7               	movwf	??_UART_Init
  4389  0FE8  0837               	movf	?___aldiv+1,w
  4390  0FE9  00C8               	movwf	??_UART_Init+1
  4391  0FEA  0838               	movf	?___aldiv+2,w
  4392  0FEB  00C9               	movwf	??_UART_Init+2
  4393  0FEC  0839               	movf	?___aldiv+3,w
  4394  0FED  00CA               	movwf	??_UART_Init+3
  4395  0FEE  3006               	movlw	6
  4396  0FEF  00CB               	movwf	??_UART_Init+4
  4397  0FF0                     u1325:	
  4398  0FF0  37CA               	asrf	??_UART_Init+3,f
  4399  0FF1  0CC9               	rrf	??_UART_Init+2,f
  4400  0FF2  0CC8               	rrf	??_UART_Init+1,f
  4401  0FF3  0CC7               	rrf	??_UART_Init,f
  4402  0FF4  0BCB               	decfsz	??_UART_Init+4,f
  4403  0FF5  2FF0               	goto	u1325
  4404  0FF6  0847               	movf	??_UART_Init,w
  4405  0FF7  3EFF               	addlw	255
  4406  0FF8  00CC               	movwf	UART_Init@spbrg
  4407  0FF9  30FF               	movlw	255
  4408  0FFA  3D48               	addwfc	??_UART_Init+1,w
  4409  0FFB  00CD               	movwf	UART_Init@spbrg+1
  4410                           
  4411                           ;uart.c: 14: SPBRG = spbrg;
  4412  0FFC  084C               	movf	UART_Init@spbrg,w
  4413  0FFD  0023               	movlb	3	; select bank3
  4414  0FFE  009B               	movwf	27	;volatile
  4415  0FFF  0008               	return
  4416  1000                     __end_of_UART_Init:	
  4417                           
  4418                           	psect	text16
  4419  0538                     __ptext16:	
  4420 ;; *************** function ___aldiv *****************
  4421 ;; Defined at:
  4422 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\aldiv.c"
  4423 ;; Parameters:    Size  Location     Type
  4424 ;;  divisor         4   22[BANK0 ] long 
  4425 ;;  dividend        4   26[BANK0 ] long 
  4426 ;; Auto vars:     Size  Location     Type
  4427 ;;  quotient        4   33[BANK0 ] long 
  4428 ;;  sign            1   32[BANK0 ] unsigned char 
  4429 ;;  counter         1   31[BANK0 ] unsigned char 
  4430 ;; Return value:  Size  Location     Type
  4431 ;;                  4   22[BANK0 ] long 
  4432 ;; Registers used:
  4433 ;;		wreg, status,2, status,0
  4434 ;; Tracked objects:
  4435 ;;		On entry : 0/0
  4436 ;;		On exit  : 0/0
  4437 ;;		Unchanged: 0/0
  4438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4439 ;;      Params:         0       8       0       0       0       0       0       0
  4440 ;;      Locals:         0       6       0       0       0       0       0       0
  4441 ;;      Temps:          0       1       0       0       0       0       0       0
  4442 ;;      Totals:         0      15       0       0       0       0       0       0
  4443 ;;Total ram usage:       15 bytes
  4444 ;; Hardware stack levels used:    1
  4445 ;; Hardware stack levels required when called:    1
  4446 ;; This function calls:
  4447 ;;		Nothing
  4448 ;; This function is called by:
  4449 ;;		_main
  4450 ;;		_UART_Init
  4451 ;;		_GetOhms
  4452 ;; This function uses a non-reentrant model
  4453 ;;
  4454                           
  4455                           
  4456                           ;psect for function ___aldiv
  4457  0538                     ___aldiv:	
  4458                           
  4459                           ;incstack = 0
  4460                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  4461  0538  0020               	movlb	0	; select bank0
  4462  0539  01C0               	clrf	___aldiv@sign
  4463  053A  1FB9               	btfss	___aldiv@divisor+3,7
  4464  053B  2D49               	goto	l546
  4465  053C  09B6               	comf	___aldiv@divisor,f
  4466  053D  09B7               	comf	___aldiv@divisor+1,f
  4467  053E  09B8               	comf	___aldiv@divisor+2,f
  4468  053F  09B9               	comf	___aldiv@divisor+3,f
  4469  0540  0AB6               	incf	___aldiv@divisor,f
  4470  0541  1903               	skipnz
  4471  0542  0AB7               	incf	___aldiv@divisor+1,f
  4472  0543  1903               	skipnz
  4473  0544  0AB8               	incf	___aldiv@divisor+2,f
  4474  0545  1903               	skipnz
  4475  0546  0AB9               	incf	___aldiv@divisor+3,f
  4476  0547  01C0               	clrf	___aldiv@sign
  4477  0548  0AC0               	incf	___aldiv@sign,f
  4478  0549                     l546:	
  4479  0549  1FBD               	btfss	___aldiv@dividend+3,7
  4480  054A  2D5A               	goto	l2336
  4481  054B  09BA               	comf	___aldiv@dividend,f
  4482  054C  09BB               	comf	___aldiv@dividend+1,f
  4483  054D  09BC               	comf	___aldiv@dividend+2,f
  4484  054E  09BD               	comf	___aldiv@dividend+3,f
  4485  054F  0ABA               	incf	___aldiv@dividend,f
  4486  0550  1903               	skipnz
  4487  0551  0ABB               	incf	___aldiv@dividend+1,f
  4488  0552  1903               	skipnz
  4489  0553  0ABC               	incf	___aldiv@dividend+2,f
  4490  0554  1903               	skipnz
  4491  0555  0ABD               	incf	___aldiv@dividend+3,f
  4492  0556  3001               	movlw	1
  4493  0557  00BE               	movwf	??___aldiv
  4494  0558  083E               	movf	??___aldiv,w
  4495  0559  06C0               	xorwf	___aldiv@sign,f
  4496  055A                     l2336:	
  4497  055A  3000               	movlw	0
  4498  055B  00C4               	movwf	___aldiv@quotient+3
  4499  055C  3000               	movlw	0
  4500  055D  00C3               	movwf	___aldiv@quotient+2
  4501  055E  3000               	movlw	0
  4502  055F  00C2               	movwf	___aldiv@quotient+1
  4503  0560  3000               	movlw	0
  4504  0561  00C1               	movwf	___aldiv@quotient
  4505  0562  0839               	movf	___aldiv@divisor+3,w
  4506  0563  0438               	iorwf	___aldiv@divisor+2,w
  4507  0564  0437               	iorwf	___aldiv@divisor+1,w
  4508  0565  0436               	iorwf	___aldiv@divisor,w
  4509  0566  1903               	skipnz
  4510  0567  2DA3               	goto	l2358
  4511  0568  01BF               	clrf	___aldiv@counter
  4512  0569  0ABF               	incf	___aldiv@counter,f
  4513  056A                     l2344:	
  4514  056A  1BB9               	btfsc	___aldiv@divisor+3,7
  4515  056B  2D78               	goto	l2346
  4516  056C  3001               	movlw	1
  4517  056D                     u1705:	
  4518  056D  35B6               	lslf	___aldiv@divisor,f
  4519  056E  0DB7               	rlf	___aldiv@divisor+1,f
  4520  056F  0DB8               	rlf	___aldiv@divisor+2,f
  4521  0570  0DB9               	rlf	___aldiv@divisor+3,f
  4522  0571  0B89               	decfsz	9,f
  4523  0572  2D6D               	goto	u1705
  4524  0573  3001               	movlw	1
  4525  0574  00BE               	movwf	??___aldiv
  4526  0575  083E               	movf	??___aldiv,w
  4527  0576  07BF               	addwf	___aldiv@counter,f
  4528  0577  2D6A               	goto	l2344
  4529  0578                     l2346:	
  4530  0578  3001               	movlw	1
  4531  0579                     u1725:	
  4532  0579  35C1               	lslf	___aldiv@quotient,f
  4533  057A  0DC2               	rlf	___aldiv@quotient+1,f
  4534  057B  0DC3               	rlf	___aldiv@quotient+2,f
  4535  057C  0DC4               	rlf	___aldiv@quotient+3,f
  4536  057D  0B89               	decfsz	9,f
  4537  057E  2D79               	goto	u1725
  4538  057F  0839               	movf	___aldiv@divisor+3,w
  4539  0580  023D               	subwf	___aldiv@dividend+3,w
  4540  0581  1D03               	skipz
  4541  0582  2D8D               	goto	u1735
  4542  0583  0838               	movf	___aldiv@divisor+2,w
  4543  0584  023C               	subwf	___aldiv@dividend+2,w
  4544  0585  1D03               	skipz
  4545  0586  2D8D               	goto	u1735
  4546  0587  0837               	movf	___aldiv@divisor+1,w
  4547  0588  023B               	subwf	___aldiv@dividend+1,w
  4548  0589  1D03               	skipz
  4549  058A  2D8D               	goto	u1735
  4550  058B  0836               	movf	___aldiv@divisor,w
  4551  058C  023A               	subwf	___aldiv@dividend,w
  4552  058D                     u1735:	
  4553  058D  1C03               	skipc
  4554  058E  2D98               	goto	l2354
  4555  058F  0836               	movf	___aldiv@divisor,w
  4556  0590  02BA               	subwf	___aldiv@dividend,f
  4557  0591  0837               	movf	___aldiv@divisor+1,w
  4558  0592  3BBB               	subwfb	___aldiv@dividend+1,f
  4559  0593  0838               	movf	___aldiv@divisor+2,w
  4560  0594  3BBC               	subwfb	___aldiv@dividend+2,f
  4561  0595  0839               	movf	___aldiv@divisor+3,w
  4562  0596  3BBD               	subwfb	___aldiv@dividend+3,f
  4563  0597  1441               	bsf	___aldiv@quotient,0
  4564  0598                     l2354:	
  4565  0598  3001               	movlw	1
  4566  0599                     u1745:	
  4567  0599  36B9               	lsrf	___aldiv@divisor+3,f
  4568  059A  0CB8               	rrf	___aldiv@divisor+2,f
  4569  059B  0CB7               	rrf	___aldiv@divisor+1,f
  4570  059C  0CB6               	rrf	___aldiv@divisor,f
  4571  059D  0B89               	decfsz	9,f
  4572  059E  2D99               	goto	u1745
  4573  059F  3001               	movlw	1
  4574  05A0  02BF               	subwf	___aldiv@counter,f
  4575  05A1  1D03               	btfss	3,2
  4576  05A2  2D78               	goto	l2346
  4577  05A3                     l2358:	
  4578  05A3  0840               	movf	___aldiv@sign,w
  4579  05A4  1903               	btfsc	3,2
  4580  05A5  2DB1               	goto	l2362
  4581  05A6  09C1               	comf	___aldiv@quotient,f
  4582  05A7  09C2               	comf	___aldiv@quotient+1,f
  4583  05A8  09C3               	comf	___aldiv@quotient+2,f
  4584  05A9  09C4               	comf	___aldiv@quotient+3,f
  4585  05AA  0AC1               	incf	___aldiv@quotient,f
  4586  05AB  1903               	skipnz
  4587  05AC  0AC2               	incf	___aldiv@quotient+1,f
  4588  05AD  1903               	skipnz
  4589  05AE  0AC3               	incf	___aldiv@quotient+2,f
  4590  05AF  1903               	skipnz
  4591  05B0  0AC4               	incf	___aldiv@quotient+3,f
  4592  05B1                     l2362:	
  4593  05B1  0844               	movf	___aldiv@quotient+3,w
  4594  05B2  00B9               	movwf	?___aldiv+3
  4595  05B3  0843               	movf	___aldiv@quotient+2,w
  4596  05B4  00B8               	movwf	?___aldiv+2
  4597  05B5  0842               	movf	___aldiv@quotient+1,w
  4598  05B6  00B7               	movwf	?___aldiv+1
  4599  05B7  0841               	movf	___aldiv@quotient,w
  4600  05B8  00B6               	movwf	?___aldiv
  4601  05B9  0008               	return
  4602  05BA                     __end_of___aldiv:	
  4603                           
  4604                           	psect	text17
  4605  0D83                     __ptext17:	
  4606 ;; *************** function _sleep *****************
  4607 ;; Defined at:
  4608 ;;		line 57 in file "timer.c"
  4609 ;; Parameters:    Size  Location     Type
  4610 ;;  seconds         2    1[COMMON] unsigned short 
  4611 ;; Auto vars:     Size  Location     Type
  4612 ;;  i               2    3[COMMON] int 
  4613 ;; Return value:  Size  Location     Type
  4614 ;;		None               void
  4615 ;; Registers used:
  4616 ;;		wreg, status,2, status,0
  4617 ;; Tracked objects:
  4618 ;;		On entry : 0/0
  4619 ;;		On exit  : 0/0
  4620 ;;		Unchanged: 0/0
  4621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4622 ;;      Params:         2       0       0       0       0       0       0       0
  4623 ;;      Locals:         2       0       0       0       0       0       0       0
  4624 ;;      Temps:          0       0       0       0       0       0       0       0
  4625 ;;      Totals:         4       0       0       0       0       0       0       0
  4626 ;;Total ram usage:        4 bytes
  4627 ;; Hardware stack levels used:    1
  4628 ;; Hardware stack levels required when called:    1
  4629 ;; This function calls:
  4630 ;;		Nothing
  4631 ;; This function is called by:
  4632 ;;		_main
  4633 ;;		_XBee_Enable
  4634 ;; This function uses a non-reentrant model
  4635 ;;
  4636                           
  4637                           
  4638                           ;psect for function _sleep
  4639  0D83                     _sleep:	
  4640                           
  4641                           ;timer.c: 58: int i;
  4642                           ;timer.c: 59: for(i=0; i<seconds; i++) {
  4643                           
  4644                           ;incstack = 0
  4645                           ; Regs used in _sleep: [wreg+status,2+status,0]
  4646  0D83  01F3               	clrf	sleep@i
  4647  0D84  01F4               	clrf	sleep@i+1
  4648  0D85                     l2094:	
  4649  0D85  0872               	movf	sleep@seconds+1,w
  4650  0D86  0274               	subwf	sleep@i+1,w
  4651  0D87  1D03               	skipz
  4652  0D88  2D8B               	goto	u1315
  4653  0D89  0871               	movf	sleep@seconds,w
  4654  0D8A  0273               	subwf	sleep@i,w
  4655  0D8B                     u1315:	
  4656  0D8B  1803               	btfsc	3,0
  4657  0D8C  0008               	return
  4658                           
  4659                           ;timer.c: 60: WDTCONbits.SWDTEN = 1;
  4660  0D8D  0021               	movlb	1	; select bank1
  4661  0D8E  1417               	bsf	23,0	;volatile
  4662                           
  4663                           ;timer.c: 61: WDTCONbits.WDTPS = 10;
  4664  0D8F  0817               	movf	23,w	;volatile
  4665  0D90  39C1               	andlw	-63
  4666  0D91  3814               	iorlw	20
  4667  0D92  0097               	movwf	23	;volatile
  4668  0D93  0063               	sleep	;# 
  4669                           
  4670                           ;timer.c: 63: WDTCONbits.SWDTEN = 0;
  4671  0D94  0021               	movlb	1	; select bank1
  4672  0D95  1017               	bcf	23,0	;volatile
  4673  0D96  3001               	movlw	1
  4674  0D97  07F3               	addwf	sleep@i,f
  4675  0D98  3000               	movlw	0
  4676  0D99  3DF4               	addwfc	sleep@i+1,f
  4677  0D9A  2D85               	goto	l2094
  4678  0D9B                     __end_of_sleep:	
  4679                           
  4680                           	psect	text18
  4681  0F38                     __ptext18:	
  4682 ;; *************** function _CRC16_Generate *****************
  4683 ;; Defined at:
  4684 ;;		line 66 in file "crc16.c"
  4685 ;; Parameters:    Size  Location     Type
  4686 ;;  msg             1    wreg     PTR unsigned char 
  4687 ;;		 -> packet_buffer(32), 
  4688 ;;  len             2    0[BANK0 ] int 
  4689 ;; Auto vars:     Size  Location     Type
  4690 ;;  msg             1    2[BANK0 ] PTR unsigned char 
  4691 ;;		 -> packet_buffer(32), 
  4692 ;;  i               2    3[BANK0 ] int 
  4693 ;; Return value:  Size  Location     Type
  4694 ;;                  2    0[BANK0 ] unsigned short 
  4695 ;; Registers used:
  4696 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  4697 ;; Tracked objects:
  4698 ;;		On entry : 0/0
  4699 ;;		On exit  : 0/0
  4700 ;;		Unchanged: 0/0
  4701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4702 ;;      Params:         0       2       0       0       0       0       0       0
  4703 ;;      Locals:         0       3       0       0       0       0       0       0
  4704 ;;      Temps:          1       0       0       0       0       0       0       0
  4705 ;;      Totals:         1       5       0       0       0       0       0       0
  4706 ;;Total ram usage:        6 bytes
  4707 ;; Hardware stack levels used:    1
  4708 ;; Hardware stack levels required when called:    3
  4709 ;; This function calls:
  4710 ;;		_CRC16_Init
  4711 ;;		_CRC16_Update
  4712 ;; This function is called by:
  4713 ;;		_SendReport
  4714 ;;		_SendReceiverBroadcastRequest
  4715 ;; This function uses a non-reentrant model
  4716 ;;
  4717                           
  4718                           
  4719                           ;psect for function _CRC16_Generate
  4720  0F38                     _CRC16_Generate:	
  4721                           
  4722                           ;incstack = 0
  4723                           ; Regs used in _CRC16_Generate: [wreg+fsr1l+fsr1h+status,2+status,0+btemp+1+pclath+cstac
      +                          k]
  4724                           ;CRC16_Generate@msg stored from wreg
  4725  0F38  0020               	movlb	0	; select bank0
  4726  0F39  00A2               	movwf	CRC16_Generate@msg
  4727                           
  4728                           ;crc16.c: 67: CRC16_Init();
  4729  0F3A  318D  2553  318F   	fcall	_CRC16_Init
  4730                           
  4731                           ;crc16.c: 68: int i;
  4732                           ;crc16.c: 69: for(i=0; i<len; i++) {
  4733  0F3D  0020               	movlb	0	; select bank0
  4734  0F3E  01A3               	clrf	CRC16_Generate@i
  4735  0F3F  01A4               	clrf	CRC16_Generate@i+1
  4736  0F40                     l2828:	
  4737  0F40  0824               	movf	CRC16_Generate@i+1,w
  4738  0F41  3A80               	xorlw	128
  4739  0F42  00FB               	movwf	??_CRC16_Generate
  4740  0F43  0821               	movf	CRC16_Generate@len+1,w
  4741  0F44  3A80               	xorlw	128
  4742  0F45  027B               	subwf	??_CRC16_Generate,w
  4743  0F46  1D03               	skipz
  4744  0F47  2F4A               	goto	u2285
  4745  0F48  0820               	movf	CRC16_Generate@len,w
  4746  0F49  0223               	subwf	CRC16_Generate@i,w
  4747  0F4A                     u2285:	
  4748  0F4A  1803               	btfsc	3,0
  4749  0F4B  2F5D               	goto	l2830
  4750                           
  4751                           ;crc16.c: 70: CRC16_Update(msg[i]);
  4752  0F4C  0020               	movlb	0	; select bank0
  4753  0F4D  0823               	movf	CRC16_Generate@i,w
  4754  0F4E  0722               	addwf	CRC16_Generate@msg,w
  4755  0F4F  00FB               	movwf	??_CRC16_Generate
  4756  0F50  087B               	movf	??_CRC16_Generate,w
  4757  0F51  0086               	movwf	6
  4758  0F52  0187               	clrf	7
  4759  0F53  0801               	movf	1,w
  4760  0F54  318D  255D  318F   	fcall	_CRC16_Update
  4761  0F57  3001               	movlw	1
  4762  0F58  0020               	movlb	0	; select bank0
  4763  0F59  07A3               	addwf	CRC16_Generate@i,f
  4764  0F5A  3000               	movlw	0
  4765  0F5B  3DA4               	addwfc	CRC16_Generate@i+1,f
  4766  0F5C  2F40               	goto	l2828
  4767  0F5D                     l2830:	
  4768                           
  4769                           ;crc16.c: 71: }
  4770                           ;crc16.c: 73: return CRC16_Reg;
  4771  0F5D  0021               	movlb	1	; select bank1
  4772  0F5E  0821               	movf	(_CRC16_Reg+1)^(0+128),w
  4773  0F5F  0020               	movlb	0	; select bank0
  4774  0F60  01A1               	clrf	?_CRC16_Generate+1
  4775  0F61  07A1               	addwf	?_CRC16_Generate+1,f
  4776  0F62  0021               	movlb	1	; select bank1
  4777  0F63  0820               	movf	_CRC16_Reg^(0+128),w
  4778  0F64  0020               	movlb	0	; select bank0
  4779  0F65  01A0               	clrf	?_CRC16_Generate
  4780  0F66  07A0               	addwf	?_CRC16_Generate,f
  4781  0F67  0008               	return
  4782  0F68                     __end_of_CRC16_Generate:	
  4783                           
  4784                           	psect	text19
  4785  0D5D                     __ptext19:	
  4786 ;; *************** function _CRC16_Update *****************
  4787 ;; Defined at:
  4788 ;;		line 61 in file "crc16.c"
  4789 ;; Parameters:    Size  Location     Type
  4790 ;;  val             1    wreg     unsigned char 
  4791 ;; Auto vars:     Size  Location     Type
  4792 ;;  val             1   10[COMMON] unsigned char 
  4793 ;; Return value:  Size  Location     Type
  4794 ;;		None               void
  4795 ;; Registers used:
  4796 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  4797 ;; Tracked objects:
  4798 ;;		On entry : 0/0
  4799 ;;		On exit  : 0/0
  4800 ;;		Unchanged: 0/0
  4801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4802 ;;      Params:         0       0       0       0       0       0       0       0
  4803 ;;      Locals:         1       0       0       0       0       0       0       0
  4804 ;;      Temps:          1       0       0       0       0       0       0       0
  4805 ;;      Totals:         2       0       0       0       0       0       0       0
  4806 ;;Total ram usage:        2 bytes
  4807 ;; Hardware stack levels used:    1
  4808 ;; Hardware stack levels required when called:    2
  4809 ;; This function calls:
  4810 ;;		_CRC16_Update4Bits
  4811 ;; This function is called by:
  4812 ;;		_CRC16_Generate
  4813 ;; This function uses a non-reentrant model
  4814 ;;
  4815                           
  4816                           
  4817                           ;psect for function _CRC16_Update
  4818  0D5D                     _CRC16_Update:	
  4819                           
  4820                           ;incstack = 0
  4821                           ; Regs used in _CRC16_Update: [wreg+fsr1l+fsr1h+status,2+status,0+btemp+1+pclath+cstack]
  4822                           ;CRC16_Update@val stored from wreg
  4823  0D5D  00FA               	movwf	CRC16_Update@val
  4824                           
  4825                           ;crc16.c: 62: CRC16_Update4Bits(val >> 4);
  4826  0D5E  087A               	movf	CRC16_Update@val,w
  4827  0D5F  00F9               	movwf	??_CRC16_Update
  4828  0D60  3004               	movlw	4
  4829  0D61                     u1665:	
  4830  0D61  36F9               	lsrf	??_CRC16_Update,f
  4831  0D62  0B89               	decfsz	9,f
  4832  0D63  2D61               	goto	u1665
  4833  0D64  0879               	movf	??_CRC16_Update,w
  4834  0D65  3187  27A8  318D   	fcall	_CRC16_Update4Bits
  4835                           
  4836                           ;crc16.c: 63: CRC16_Update4Bits(val & 0x0F);
  4837  0D68  087A               	movf	CRC16_Update@val,w
  4838  0D69  390F               	andlw	15
  4839  0D6A  3187  27A8         	fcall	_CRC16_Update4Bits
  4840  0D6C  0008               	return
  4841  0D6D                     __end_of_CRC16_Update:	
  4842                           
  4843                           	psect	text20
  4844  07A8                     __ptext20:	
  4845 ;; *************** function _CRC16_Update4Bits *****************
  4846 ;; Defined at:
  4847 ;;		line 38 in file "crc16.c"
  4848 ;; Parameters:    Size  Location     Type
  4849 ;;  val             1    wreg     unsigned char 
  4850 ;; Auto vars:     Size  Location     Type
  4851 ;;  val             1    7[COMMON] unsigned char 
  4852 ;;  t               1    8[COMMON] unsigned char 
  4853 ;; Return value:  Size  Location     Type
  4854 ;;		None               void
  4855 ;; Registers used:
  4856 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+1
  4857 ;; Tracked objects:
  4858 ;;		On entry : 0/0
  4859 ;;		On exit  : 0/0
  4860 ;;		Unchanged: 0/0
  4861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4862 ;;      Params:         0       0       0       0       0       0       0       0
  4863 ;;      Locals:         2       0       0       0       0       0       0       0
  4864 ;;      Temps:          6       0       0       0       0       0       0       0
  4865 ;;      Totals:         8       0       0       0       0       0       0       0
  4866 ;;Total ram usage:        8 bytes
  4867 ;; Hardware stack levels used:    1
  4868 ;; Hardware stack levels required when called:    1
  4869 ;; This function calls:
  4870 ;;		Nothing
  4871 ;; This function is called by:
  4872 ;;		_CRC16_Update
  4873 ;; This function uses a non-reentrant model
  4874 ;;
  4875                           
  4876                           
  4877                           ;psect for function _CRC16_Update4Bits
  4878  07A8                     _CRC16_Update4Bits:	
  4879                           
  4880                           ;incstack = 0
  4881                           ; Regs used in _CRC16_Update4Bits: [wreg+fsr1l+fsr1h+status,2+status,0+btemp+1]
  4882                           ;CRC16_Update4Bits@val stored from wreg
  4883  07A8  00F7               	movwf	CRC16_Update4Bits@val
  4884                           
  4885                           ;crc16.c: 39: unsigned char t;
  4886                           ;crc16.c: 42: t = CRC16_High >> 4;
  4887  07A9  0021               	movlb	1	; select bank1
  4888  07AA  0828               	movf	_CRC16_High^(0+128),w
  4889  07AB  00F1               	movwf	??_CRC16_Update4Bits
  4890  07AC  3004               	movlw	4
  4891  07AD                     u1655:	
  4892  07AD  36F1               	lsrf	??_CRC16_Update4Bits,f
  4893  07AE  0B89               	decfsz	9,f
  4894  07AF  2FAD               	goto	u1655
  4895  07B0  0871               	movf	??_CRC16_Update4Bits,w
  4896  07B1  00F2               	movwf	??_CRC16_Update4Bits+1
  4897  07B2  0872               	movf	??_CRC16_Update4Bits+1,w
  4898  07B3  00F8               	movwf	CRC16_Update4Bits@t
  4899                           
  4900                           ;crc16.c: 45: t = t ^ val;
  4901  07B4  0878               	movf	CRC16_Update4Bits@t,w
  4902  07B5  0677               	xorwf	CRC16_Update4Bits@val,w
  4903  07B6  00F1               	movwf	??_CRC16_Update4Bits
  4904  07B7  0871               	movf	??_CRC16_Update4Bits,w
  4905  07B8  00F8               	movwf	CRC16_Update4Bits@t
  4906                           
  4907                           ;crc16.c: 50: CRC16_Reg = CRC16_Reg << 4;
  4908  07B9  0821               	movf	(_CRC16_Reg+1)^(0+128),w
  4909  07BA  00F2               	movwf	??_CRC16_Update4Bits+1
  4910  07BB  0820               	movf	_CRC16_Reg^(0+128),w
  4911  07BC  00F1               	movwf	??_CRC16_Update4Bits
  4912  07BD  0EF1               	swapf	??_CRC16_Update4Bits,f
  4913  07BE  0EF2               	swapf	??_CRC16_Update4Bits+1,f
  4914  07BF  30F0               	movlw	240
  4915  07C0  05F2               	andwf	??_CRC16_Update4Bits+1,f
  4916  07C1  0871               	movf	??_CRC16_Update4Bits,w
  4917  07C2  390F               	andlw	15
  4918  07C3  04F2               	iorwf	??_CRC16_Update4Bits+1,f
  4919  07C4  30F0               	movlw	240
  4920  07C5  05F1               	andwf	??_CRC16_Update4Bits,f
  4921  07C6  0871               	movf	??_CRC16_Update4Bits,w
  4922  07C7  00A0               	movwf	_CRC16_Reg^(0+128)
  4923  07C8  0872               	movf	??_CRC16_Update4Bits+1,w
  4924  07C9  00A1               	movwf	(_CRC16_Reg+1)^(0+128)
  4925                           
  4926                           ;crc16.c: 55: CRC16_Reg = CRC16_Reg ^ (CRC16_LookupHigh[t] << 8) | CRC16_LookupLow[t];
  4927  07CA  3578               	lslf	CRC16_Update4Bits@t,w
  4928  07CB  3EC0               	addlw	_CRC16_LookupLow& (0+255)
  4929  07CC  0086               	movwf	6
  4930  07CD  3001               	movlw	1	; select bank3/4
  4931  07CE  0087               	movwf	7
  4932  07CF  3F40               	moviw [0]fsr1
  4933  07D0  00F1               	movwf	??_CRC16_Update4Bits
  4934  07D1  3F41               	moviw [1]fsr1
  4935  07D2  00F2               	movwf	??_CRC16_Update4Bits+1
  4936  07D3  3578               	lslf	CRC16_Update4Bits@t,w
  4937  07D4  3EA0               	addlw	_CRC16_LookupHigh& (0+255)
  4938  07D5  0086               	movwf	6
  4939  07D6  3001               	movlw	1	; select bank3/4
  4940  07D7  0087               	movwf	7
  4941  07D8  3F40               	moviw [0]fsr1
  4942  07D9  00F3               	movwf	??_CRC16_Update4Bits+2
  4943  07DA  3F41               	moviw [1]fsr1
  4944  07DB  00F4               	movwf	??_CRC16_Update4Bits+3
  4945  07DC  0873               	movf	??_CRC16_Update4Bits+2,w
  4946  07DD  00F4               	movwf	??_CRC16_Update4Bits+3
  4947  07DE  01F3               	clrf	??_CRC16_Update4Bits+2
  4948  07DF  0820               	movf	_CRC16_Reg^(0+128),w
  4949  07E0  0673               	xorwf	??_CRC16_Update4Bits+2,w
  4950  07E1  00F5               	movwf	??_CRC16_Update4Bits+4
  4951  07E2  0821               	movf	(_CRC16_Reg+1)^(0+128),w
  4952  07E3  0674               	xorwf	??_CRC16_Update4Bits+3,w
  4953  07E4  00F6               	movwf	??_CRC16_Update4Bits+5
  4954  07E5  0871               	movf	??_CRC16_Update4Bits,w
  4955  07E6  0475               	iorwf	??_CRC16_Update4Bits+4,w
  4956  07E7  00A0               	movwf	_CRC16_Reg^(0+128)
  4957  07E8  0872               	movf	??_CRC16_Update4Bits+1,w
  4958  07E9  0476               	iorwf	??_CRC16_Update4Bits+5,w
  4959  07EA  00A1               	movwf	(_CRC16_Reg+1)^(0+128)
  4960  07EB  0008               	return
  4961  07EC                     __end_of_CRC16_Update4Bits:	
  4962                           
  4963                           	psect	text21
  4964  0D53                     __ptext21:	
  4965 ;; *************** function _CRC16_Init *****************
  4966 ;; Defined at:
  4967 ;;		line 28 in file "crc16.c"
  4968 ;; Parameters:    Size  Location     Type
  4969 ;;		None
  4970 ;; Auto vars:     Size  Location     Type
  4971 ;;		None
  4972 ;; Return value:  Size  Location     Type
  4973 ;;		None               void
  4974 ;; Registers used:
  4975 ;;		wreg
  4976 ;; Tracked objects:
  4977 ;;		On entry : 0/0
  4978 ;;		On exit  : 0/0
  4979 ;;		Unchanged: 0/0
  4980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4981 ;;      Params:         0       0       0       0       0       0       0       0
  4982 ;;      Locals:         0       0       0       0       0       0       0       0
  4983 ;;      Temps:          1       0       0       0       0       0       0       0
  4984 ;;      Totals:         1       0       0       0       0       0       0       0
  4985 ;;Total ram usage:        1 bytes
  4986 ;; Hardware stack levels used:    1
  4987 ;; Hardware stack levels required when called:    1
  4988 ;; This function calls:
  4989 ;;		Nothing
  4990 ;; This function is called by:
  4991 ;;		_main
  4992 ;;		_CRC16_Generate
  4993 ;; This function uses a non-reentrant model
  4994 ;;
  4995                           
  4996                           
  4997                           ;psect for function _CRC16_Init
  4998  0D53                     _CRC16_Init:	
  4999                           
  5000                           ;crc16.c: 30: CRC16_High = 0xFF;
  5001                           
  5002                           ;incstack = 0
  5003                           ; Regs used in _CRC16_Init: [wreg]
  5004  0D53  30FF               	movlw	255
  5005  0D54  00F1               	movwf	??_CRC16_Init
  5006  0D55  0871               	movf	??_CRC16_Init,w
  5007  0D56  0021               	movlb	1	; select bank1
  5008  0D57  00A8               	movwf	_CRC16_High^(0+128)
  5009                           
  5010                           ;crc16.c: 31: CRC16_Low = 0xFF;
  5011  0D58  30FF               	movlw	255
  5012  0D59  00F1               	movwf	??_CRC16_Init
  5013  0D5A  0871               	movf	??_CRC16_Init,w
  5014  0D5B  00A9               	movwf	_CRC16_Low^(0+128)
  5015  0D5C  0008               	return
  5016  0D5D                     __end_of_CRC16_Init:	
  5017                           
  5018                           	psect	text22
  5019  0092                     __ptext22:	
  5020 ;; *************** function _ADC_Enable *****************
  5021 ;; Defined at:
  5022 ;;		line 4 in file "adc.c"
  5023 ;; Parameters:    Size  Location     Type
  5024 ;;  select          1    wreg     unsigned char 
  5025 ;;  port_pin        1    1[COMMON] unsigned char 
  5026 ;; Auto vars:     Size  Location     Type
  5027 ;;  select          1    4[COMMON] unsigned char 
  5028 ;; Return value:  Size  Location     Type
  5029 ;;		None               void
  5030 ;; Registers used:
  5031 ;;		wreg, status,2, status,0
  5032 ;; Tracked objects:
  5033 ;;		On entry : 0/0
  5034 ;;		On exit  : 0/0
  5035 ;;		Unchanged: 0/0
  5036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5037 ;;      Params:         1       0       0       0       0       0       0       0
  5038 ;;      Locals:         1       0       0       0       0       0       0       0
  5039 ;;      Temps:          2       0       0       0       0       0       0       0
  5040 ;;      Totals:         4       0       0       0       0       0       0       0
  5041 ;;Total ram usage:        4 bytes
  5042 ;; Hardware stack levels used:    1
  5043 ;; Hardware stack levels required when called:    1
  5044 ;; This function calls:
  5045 ;;		Nothing
  5046 ;; This function is called by:
  5047 ;;		_main
  5048 ;; This function uses a non-reentrant model
  5049 ;;
  5050                           
  5051                           
  5052                           ;psect for function _ADC_Enable
  5053  0092                     _ADC_Enable:	
  5054                           
  5055                           ;incstack = 0
  5056                           ; Regs used in _ADC_Enable: [wreg+status,2+status,0]
  5057                           ;ADC_Enable@select stored from wreg
  5058  0092  00F4               	movwf	ADC_Enable@select
  5059                           
  5060                           ;adc.c: 5: ADCON1bits.ADCS = 1;
  5061  0093  0021               	movlb	1	; select bank1
  5062  0094  081E               	movf	30,w	;volatile
  5063  0095  398F               	andlw	-113
  5064  0096  3810               	iorlw	16
  5065  0097  009E               	movwf	30	;volatile
  5066                           
  5067                           ;adc.c: 6: if(select) {
  5068  0098  0874               	movf	ADC_Enable@select,w
  5069  0099  1903               	btfsc	3,2
  5070  009A  28B3               	goto	l1942
  5071                           
  5072                           ;adc.c: 8: TRISB |= 1<<port_pin;
  5073  009B  3001               	movlw	1
  5074  009C  00F2               	movwf	??_ADC_Enable
  5075  009D  0A71               	incf	ADC_Enable@port_pin,w
  5076  009E  28A0               	goto	u1154
  5077  009F                     u1155:	
  5078  009F  35F2               	lslf	??_ADC_Enable,f
  5079  00A0                     u1154:	
  5080  00A0  0B89               	decfsz	9,f
  5081  00A1  289F               	goto	u1155
  5082  00A2  0872               	movf	??_ADC_Enable,w
  5083  00A3  00F3               	movwf	??_ADC_Enable+1
  5084  00A4  0873               	movf	??_ADC_Enable+1,w
  5085  00A5  048D               	iorwf	13,f	;volatile
  5086                           
  5087                           ;adc.c: 9: ANSELB |= 1<<port_pin;
  5088  00A6  3001               	movlw	1
  5089  00A7  00F2               	movwf	??_ADC_Enable
  5090  00A8  0A71               	incf	ADC_Enable@port_pin,w
  5091  00A9  28AB               	goto	u1164
  5092  00AA                     u1165:	
  5093  00AA  35F2               	lslf	??_ADC_Enable,f
  5094  00AB                     u1164:	
  5095  00AB  0B89               	decfsz	9,f
  5096  00AC  28AA               	goto	u1165
  5097  00AD  0872               	movf	??_ADC_Enable,w
  5098  00AE  00F3               	movwf	??_ADC_Enable+1
  5099  00AF  0873               	movf	??_ADC_Enable+1,w
  5100  00B0  0023               	movlb	3	; select bank3
  5101  00B1  048D               	iorwf	13,f	;volatile
  5102                           
  5103                           ;adc.c: 10: } else {
  5104  00B2  28CB               	goto	l331
  5105  00B3                     l1942:	
  5106                           
  5107                           ;adc.c: 11: TRISA |= 1<<port_pin;
  5108  00B3  3001               	movlw	1
  5109  00B4  00F2               	movwf	??_ADC_Enable
  5110  00B5  0A71               	incf	ADC_Enable@port_pin,w
  5111  00B6  28B8               	goto	u1174
  5112  00B7                     u1175:	
  5113  00B7  35F2               	lslf	??_ADC_Enable,f
  5114  00B8                     u1174:	
  5115  00B8  0B89               	decfsz	9,f
  5116  00B9  28B7               	goto	u1175
  5117  00BA  0872               	movf	??_ADC_Enable,w
  5118  00BB  00F3               	movwf	??_ADC_Enable+1
  5119  00BC  0873               	movf	??_ADC_Enable+1,w
  5120  00BD  0021               	movlb	1	; select bank1
  5121  00BE  048C               	iorwf	12,f	;volatile
  5122                           
  5123                           ;adc.c: 12: ANSELA |= 1<<port_pin;
  5124  00BF  3001               	movlw	1
  5125  00C0  00F2               	movwf	??_ADC_Enable
  5126  00C1  0A71               	incf	ADC_Enable@port_pin,w
  5127  00C2  28C4               	goto	u1184
  5128  00C3                     u1185:	
  5129  00C3  35F2               	lslf	??_ADC_Enable,f
  5130  00C4                     u1184:	
  5131  00C4  0B89               	decfsz	9,f
  5132  00C5  28C3               	goto	u1185
  5133  00C6  0872               	movf	??_ADC_Enable,w
  5134  00C7  00F3               	movwf	??_ADC_Enable+1
  5135  00C8  0873               	movf	??_ADC_Enable+1,w
  5136  00C9  0023               	movlb	3	; select bank3
  5137  00CA  048C               	iorwf	12,f	;volatile
  5138  00CB                     l331:	
  5139                           
  5140                           ;adc.c: 13: }
  5141                           ;adc.c: 15: ADCON1bits.ADPREF = 0;
  5142  00CB  30FC               	movlw	-4
  5143  00CC  0021               	movlb	1	; select bank1
  5144  00CD  059E               	andwf	30,f	;volatile
  5145                           
  5146                           ;adc.c: 16: ADCON1bits.ADNREF = 0;
  5147  00CE  111E               	bcf	30,2	;volatile
  5148                           
  5149                           ;adc.c: 17: ADCON1bits.ADFM = 1;
  5150  00CF  179E               	bsf	30,7	;volatile
  5151                           
  5152                           ;adc.c: 18: ADCON0bits.ADRMD = 0;
  5153  00D0  139D               	bcf	29,7	;volatile
  5154  00D1  0008               	return
  5155  00D2                     __end_of_ADC_Enable:	
  5156                           
  5157                           	psect	text23
  5158  03F5                     __ptext23:	
  5159 ;; *************** function _XBAPI_Command *****************
  5160 ;; Defined at:
  5161 ;;		line 169 in file "xbee.c"
  5162 ;; Parameters:    Size  Location     Type
  5163 ;;  command         2   29[BANK0 ] unsigned short 
  5164 ;;  data            4   31[BANK0 ] unsigned long 
  5165 ;;  id              2   35[BANK0 ] int 
  5166 ;;  data_valid      2   37[BANK0 ] int 
  5167 ;; Auto vars:     Size  Location     Type
  5168 ;;  atCmdLength     1   45[BANK0 ] unsigned char 
  5169 ;;  check           1   42[BANK0 ] unsigned char 
  5170 ;; Return value:  Size  Location     Type
  5171 ;;                  2   29[BANK0 ] int 
  5172 ;; Registers used:
  5173 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  5174 ;; Tracked objects:
  5175 ;;		On entry : 0/0
  5176 ;;		On exit  : 0/0
  5177 ;;		Unchanged: 0/0
  5178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5179 ;;      Params:         0      10       0       0       0       0       0       0
  5180 ;;      Locals:         0       4       0       0       0       0       0       0
  5181 ;;      Temps:          0       3       0       0       0       0       0       0
  5182 ;;      Totals:         0      17       0       0       0       0       0       0
  5183 ;;Total ram usage:       17 bytes
  5184 ;; Hardware stack levels used:    1
  5185 ;; Hardware stack levels required when called:    4
  5186 ;; This function calls:
  5187 ;;		_XBAPI_HandleFrame
  5188 ;;		_UART_TransmitMsg
  5189 ;;		_checksum
  5190 ;;		_doChecksumVerify
  5191 ;;		_swap_endian_32
  5192 ;; This function is called by:
  5193 ;;		_main
  5194 ;; This function uses a non-reentrant model
  5195 ;;
  5196                           
  5197                           
  5198                           ;psect for function _XBAPI_Command
  5199  03F5                     _XBAPI_Command:	
  5200                           
  5201                           ;xbee.c: 183: byte atCmdLength = (data_valid) ? sizeof(ATCmdFrame) : sizeof(ATCmdFrame_N
      +                          oData);
  5202                           
  5203                           ;incstack = 0
  5204                           ; Regs used in _XBAPI_Command: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+cstack]
  5205  03F5  0020               	movlb	0	; select bank0
  5206  03F6  0846               	movf	XBAPI_Command@data_valid+1,w
  5207  03F7  0445               	iorwf	XBAPI_Command@data_valid,w
  5208  03F8  1D03               	skipz
  5209  03F9  2BFC               	goto	l2538
  5210  03FA  3008               	movlw	8
  5211  03FB  2BFD               	goto	L1
  5212  03FC                     l2538:	
  5213  03FC  300C               	movlw	12
  5214  03FD                     L1:	
  5215  03FD  00CB               	movwf	_XBAPI_Command$876
  5216  03FE  3000               	movlw	0
  5217  03FF  00CC               	movwf	_XBAPI_Command$876+1
  5218  0400  084B               	movf	_XBAPI_Command$876,w
  5219  0401  00C7               	movwf	??_XBAPI_Command
  5220  0402  0847               	movf	??_XBAPI_Command,w
  5221  0403  00CD               	movwf	XBAPI_Command@atCmdLength
  5222                           
  5223                           ;xbee.c: 185: apiFrame.atCmd.start_delimiter = 0x7e;
  5224  0404  307E               	movlw	126
  5225  0405  00C7               	movwf	??_XBAPI_Command
  5226  0406  0847               	movf	??_XBAPI_Command,w
  5227  0407  0022               	movlb	2	; select bank2
  5228  0408  00A0               	movwf	_apiFrame^(0+256)
  5229                           
  5230                           ;xbee.c: 186: apiFrame.atCmd.length[0] = (atCmdLength-4) >> 8;
  5231  0409  0020               	movlb	0	; select bank0
  5232  040A  084D               	movf	XBAPI_Command@atCmdLength,w
  5233  040B  3EFC               	addlw	252
  5234  040C  00C7               	movwf	??_XBAPI_Command
  5235  040D  30FF               	movlw	255
  5236  040E  1803               	skipnc
  5237  040F  3000               	movlw	0
  5238  0410  00C8               	movwf	??_XBAPI_Command+1
  5239  0411  0848               	movf	??_XBAPI_Command+1,w
  5240  0412  00C9               	movwf	??_XBAPI_Command+2
  5241  0413  0849               	movf	??_XBAPI_Command+2,w
  5242  0414  0022               	movlb	2	; select bank2
  5243  0415  00A1               	movwf	(_apiFrame^(0+256)+1)
  5244                           
  5245                           ;xbee.c: 187: apiFrame.atCmd.length[1] = (atCmdLength-4) & 0xFF;
  5246  0416  0020               	movlb	0	; select bank0
  5247  0417  084D               	movf	XBAPI_Command@atCmdLength,w
  5248  0418  3EFC               	addlw	252
  5249  0419  00C7               	movwf	??_XBAPI_Command
  5250  041A  0847               	movf	??_XBAPI_Command,w
  5251  041B  0022               	movlb	2	; select bank2
  5252  041C  00A2               	movwf	(_apiFrame^(0+256)+2)
  5253                           
  5254                           ;xbee.c: 188: apiFrame.atCmd.frame_type = 0x8;
  5255  041D  3008               	movlw	8
  5256  041E  0020               	movlb	0	; select bank0
  5257  041F  00C7               	movwf	??_XBAPI_Command
  5258  0420  0847               	movf	??_XBAPI_Command,w
  5259  0421  0022               	movlb	2	; select bank2
  5260  0422  00A3               	movwf	(_apiFrame^(0+256)+3)
  5261                           
  5262                           ;xbee.c: 189: apiFrame.atCmd.frame_id = id;
  5263  0423  0020               	movlb	0	; select bank0
  5264  0424  0843               	movf	XBAPI_Command@id,w
  5265  0425  00C7               	movwf	??_XBAPI_Command
  5266  0426  0847               	movf	??_XBAPI_Command,w
  5267  0427  0022               	movlb	2	; select bank2
  5268  0428  00A4               	movwf	(_apiFrame^(0+256)+4)
  5269                           
  5270                           ;xbee.c: 190: apiFrame.atCmd.command = command;
  5271  0429  0020               	movlb	0	; select bank0
  5272  042A  083E               	movf	XBAPI_Command@command+1,w
  5273  042B  0022               	movlb	2	; select bank2
  5274  042C  01A6               	clrf	((_apiFrame+1)^(0+256)+5)
  5275  042D  07A6               	addwf	((_apiFrame+1)^(0+256)+5),f
  5276  042E  0020               	movlb	0	; select bank0
  5277  042F  083D               	movf	XBAPI_Command@command,w
  5278  0430  0022               	movlb	2	; select bank2
  5279  0431  01A5               	clrf	(_apiFrame^(0+256)+5)
  5280  0432  07A5               	addwf	(_apiFrame^(0+256)+5),f
  5281                           
  5282                           ;xbee.c: 191: apiFrame.atCmd.data = swap_endian_32(data);
  5283  0433  0020               	movlb	0	; select bank0
  5284  0434  0842               	movf	XBAPI_Command@data+3,w
  5285  0435  00F4               	movwf	?_swap_endian_32+3
  5286  0436  0841               	movf	XBAPI_Command@data+2,w
  5287  0437  00F3               	movwf	?_swap_endian_32+2
  5288  0438  0840               	movf	XBAPI_Command@data+1,w
  5289  0439  00F2               	movwf	?_swap_endian_32+1
  5290  043A  083F               	movf	XBAPI_Command@data,w
  5291  043B  00F1               	movwf	?_swap_endian_32
  5292  043C  3183  2345  3183   	fcall	_swap_endian_32
  5293  043F  0874               	movf	?_swap_endian_32+3,w
  5294  0440  0022               	movlb	2	; select bank2
  5295  0441  00AA               	movwf	((_apiFrame+3)^(0+256)+7)
  5296  0442  0873               	movf	?_swap_endian_32+2,w
  5297  0443  00A9               	movwf	((_apiFrame+2)^(0+256)+7)
  5298  0444  0872               	movf	?_swap_endian_32+1,w
  5299  0445  00A8               	movwf	((_apiFrame+1)^(0+256)+7)
  5300  0446  0871               	movf	?_swap_endian_32,w
  5301  0447  00A7               	movwf	(_apiFrame^(0+256)+7)
  5302                           
  5303                           ;xbee.c: 193: calc_checksum = checksum(apiFrame.buffer+3, atCmdLength-4);
  5304  0448  0020               	movlb	0	; select bank0
  5305  0449  084D               	movf	XBAPI_Command@atCmdLength,w
  5306  044A  3EFC               	addlw	252
  5307  044B  00F1               	movwf	?_checksum
  5308  044C  30FF               	movlw	255
  5309  044D  1803               	skipnc
  5310  044E  3000               	movlw	0
  5311  044F  00F2               	movwf	?_checksum+1
  5312  0450  3023               	movlw	(_apiFrame+3)& (0+255)
  5313  0451  318E  2692  3183   	fcall	_checksum
  5314  0454  0020               	movlb	0	; select bank0
  5315  0455  00C7               	movwf	??_XBAPI_Command
  5316  0456  0847               	movf	??_XBAPI_Command,w
  5317  0457  00FC               	movwf	_calc_checksum
  5318                           
  5319                           ;xbee.c: 194: byte check = doChecksumVerify(apiFrame.buffer+3, atCmdLength-4, calc_check
      +                          sum);
  5320  0458  084D               	movf	XBAPI_Command@atCmdLength,w
  5321  0459  3EFC               	addlw	252
  5322  045A  00F1               	movwf	?_doChecksumVerify
  5323  045B  30FF               	movlw	255
  5324  045C  1803               	skipnc
  5325  045D  3000               	movlw	0
  5326  045E  00F2               	movwf	?_doChecksumVerify+1
  5327  045F  087C               	movf	_calc_checksum,w
  5328  0460  00C7               	movwf	??_XBAPI_Command
  5329  0461  0847               	movf	??_XBAPI_Command,w
  5330  0462  00F3               	movwf	?_doChecksumVerify+2
  5331  0463  3023               	movlw	(_apiFrame+3)& (0+255)
  5332  0464  318E  266C  3183   	fcall	_doChecksumVerify
  5333  0467  0020               	movlb	0	; select bank0
  5334  0468  00C8               	movwf	??_XBAPI_Command+1
  5335  0469  0848               	movf	??_XBAPI_Command+1,w
  5336  046A  00CA               	movwf	XBAPI_Command@check
  5337                           
  5338                           ;xbee.c: 196: if(data_valid) {
  5339  046B  0846               	movf	XBAPI_Command@data_valid+1,w
  5340  046C  0445               	iorwf	XBAPI_Command@data_valid,w
  5341  046D  1903               	skipnz
  5342  046E  2C75               	goto	l2560
  5343                           
  5344                           ;xbee.c: 197: apiFrame.atCmd.checksum = calc_checksum;
  5345  046F  087C               	movf	_calc_checksum,w
  5346  0470  00C7               	movwf	??_XBAPI_Command
  5347  0471  0847               	movf	??_XBAPI_Command,w
  5348  0472  0022               	movlb	2	; select bank2
  5349  0473  00AB               	movwf	(_apiFrame^(0+256)+11)
  5350                           
  5351                           ;xbee.c: 198: } else {
  5352  0474  2C7B               	goto	l2562
  5353  0475                     l2560:	
  5354                           
  5355                           ;xbee.c: 199: apiFrame.atCmdNoData.checksum = calc_checksum;
  5356  0475  087C               	movf	_calc_checksum,w
  5357  0476  0020               	movlb	0	; select bank0
  5358  0477  00C7               	movwf	??_XBAPI_Command
  5359  0478  0847               	movf	??_XBAPI_Command,w
  5360  0479  0022               	movlb	2	; select bank2
  5361  047A  00A7               	movwf	(_apiFrame^(0+256)+7)
  5362  047B                     l2562:	
  5363                           
  5364                           ;xbee.c: 200: }
  5365                           ;xbee.c: 202: UART_TransmitMsg(apiFrame.buffer, atCmdLength, 0);
  5366  047B  0020               	movlb	0	; select bank0
  5367  047C  084D               	movf	XBAPI_Command@atCmdLength,w
  5368  047D  00C7               	movwf	??_XBAPI_Command
  5369  047E  01C8               	clrf	??_XBAPI_Command+1
  5370  047F  0847               	movf	??_XBAPI_Command,w
  5371  0480  00F2               	movwf	?_UART_TransmitMsg
  5372  0481  0848               	movf	??_XBAPI_Command+1,w
  5373  0482  00F3               	movwf	?_UART_TransmitMsg+1
  5374  0483  01F4               	clrf	?_UART_TransmitMsg+2
  5375  0484  3020               	movlw	_apiFrame& (0+255)
  5376  0485  318F  2768  3183   	fcall	_UART_TransmitMsg
  5377                           
  5378                           ;xbee.c: 204: if(id) {
  5379  0488  0020               	movlb	0	; select bank0
  5380  0489  0844               	movf	XBAPI_Command@id+1,w
  5381  048A  0443               	iorwf	XBAPI_Command@id,w
  5382  048B  1903               	skipnz
  5383  048C  2C9F               	goto	l2572
  5384                           
  5385                           ;xbee.c: 205: return XBAPI_HandleFrame(0x88, 1);
  5386  048D  3088               	movlw	136
  5387  048E  00AE               	movwf	?_XBAPI_HandleFrame
  5388  048F  3000               	movlw	0
  5389  0490  00AF               	movwf	?_XBAPI_HandleFrame+1
  5390  0491  3001               	movlw	1
  5391  0492  00B0               	movwf	?_XBAPI_HandleFrame+2
  5392  0493  3000               	movlw	0
  5393  0494  00B1               	movwf	?_XBAPI_HandleFrame+3
  5394  0495  3182  2287         	fcall	_XBAPI_HandleFrame
  5395  0497  0020               	movlb	0	; select bank0
  5396  0498  082F               	movf	?_XBAPI_HandleFrame+1,w
  5397  0499  01BE               	clrf	?_XBAPI_Command+1
  5398  049A  07BE               	addwf	?_XBAPI_Command+1,f
  5399  049B  082E               	movf	?_XBAPI_HandleFrame,w
  5400  049C  01BD               	clrf	?_XBAPI_Command
  5401  049D  07BD               	addwf	?_XBAPI_Command,f
  5402                           
  5403                           ;xbee.c: 206: } else {
  5404  049E  0008               	return
  5405  049F                     l2572:	
  5406                           
  5407                           ;xbee.c: 207: return 0;
  5408  049F  01BD               	clrf	?_XBAPI_Command
  5409  04A0  01BE               	clrf	?_XBAPI_Command+1
  5410  04A1  0008               	return
  5411  04A2                     __end_of_XBAPI_Command:	
  5412                           
  5413                           	psect	text24
  5414  0345                     __ptext24:	
  5415 ;; *************** function _swap_endian_32 *****************
  5416 ;; Defined at:
  5417 ;;		line 158 in file "xbee.c"
  5418 ;; Parameters:    Size  Location     Type
  5419 ;;  n               4    1[COMMON] unsigned long 
  5420 ;; Auto vars:     Size  Location     Type
  5421 ;;  r               4    5[COMMON] unsigned long 
  5422 ;; Return value:  Size  Location     Type
  5423 ;;                  4    1[COMMON] unsigned long 
  5424 ;; Registers used:
  5425 ;;		wreg, status,2, status,0
  5426 ;; Tracked objects:
  5427 ;;		On entry : 0/0
  5428 ;;		On exit  : 0/0
  5429 ;;		Unchanged: 0/0
  5430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5431 ;;      Params:         4       0       0       0       0       0       0       0
  5432 ;;      Locals:         4       0       0       0       0       0       0       0
  5433 ;;      Temps:          0       8       0       0       0       0       0       0
  5434 ;;      Totals:         8       8       0       0       0       0       0       0
  5435 ;;Total ram usage:       16 bytes
  5436 ;; Hardware stack levels used:    1
  5437 ;; Hardware stack levels required when called:    1
  5438 ;; This function calls:
  5439 ;;		Nothing
  5440 ;; This function is called by:
  5441 ;;		_XBAPI_Command
  5442 ;; This function uses a non-reentrant model
  5443 ;;
  5444                           
  5445                           
  5446                           ;psect for function _swap_endian_32
  5447  0345                     _swap_endian_32:	
  5448                           
  5449                           ;xbee.c: 159: unsigned long r = 0;
  5450                           
  5451                           ;incstack = 0
  5452                           ; Regs used in _swap_endian_32: [wreg+status,2+status,0]
  5453  0345  3000               	movlw	0
  5454  0346  00F8               	movwf	swap_endian_32@r+3
  5455  0347  3000               	movlw	0
  5456  0348  00F7               	movwf	swap_endian_32@r+2
  5457  0349  3000               	movlw	0
  5458  034A  00F6               	movwf	swap_endian_32@r+1
  5459  034B  3000               	movlw	0
  5460  034C  00F5               	movwf	swap_endian_32@r
  5461                           
  5462                           ;xbee.c: 160: r |= (n&0xFF) << 24;
  5463  034D  30FF               	movlw	255
  5464  034E  0571               	andwf	swap_endian_32@n,w
  5465  034F  0020               	movlb	0	; select bank0
  5466  0350  00A0               	movwf	??_swap_endian_32
  5467  0351  3000               	movlw	0
  5468  0352  0572               	andwf	swap_endian_32@n+1,w
  5469  0353  00A1               	movwf	??_swap_endian_32+1
  5470  0354  3000               	movlw	0
  5471  0355  0573               	andwf	swap_endian_32@n+2,w
  5472  0356  00A2               	movwf	??_swap_endian_32+2
  5473  0357  3000               	movlw	0
  5474  0358  0574               	andwf	swap_endian_32@n+3,w
  5475  0359  00A3               	movwf	??_swap_endian_32+3
  5476  035A  3018               	movlw	24
  5477  035B                     u2215:	
  5478  035B  35A0               	lslf	??_swap_endian_32,f
  5479  035C  0DA1               	rlf	??_swap_endian_32+1,f
  5480  035D  0DA2               	rlf	??_swap_endian_32+2,f
  5481  035E  0DA3               	rlf	??_swap_endian_32+3,f
  5482  035F  0B89               	decfsz	9,f
  5483  0360  2B5B               	goto	u2215
  5484  0361  0820               	movf	??_swap_endian_32,w
  5485  0362  04F5               	iorwf	swap_endian_32@r,f
  5486  0363  0821               	movf	??_swap_endian_32+1,w
  5487  0364  04F6               	iorwf	swap_endian_32@r+1,f
  5488  0365  0822               	movf	??_swap_endian_32+2,w
  5489  0366  04F7               	iorwf	swap_endian_32@r+2,f
  5490  0367  0823               	movf	??_swap_endian_32+3,w
  5491  0368  04F8               	iorwf	swap_endian_32@r+3,f
  5492                           
  5493                           ;xbee.c: 161: r |= ((n>>8)&0xFF) << 16;
  5494  0369  30FF               	movlw	255
  5495  036A  00A0               	movwf	??_swap_endian_32
  5496  036B  3000               	movlw	0
  5497  036C  00A1               	movwf	??_swap_endian_32+1
  5498  036D  3000               	movlw	0
  5499  036E  00A2               	movwf	??_swap_endian_32+2
  5500  036F  3000               	movlw	0
  5501  0370  00A3               	movwf	??_swap_endian_32+3
  5502  0371  0871               	movf	swap_endian_32@n,w
  5503  0372  00A4               	movwf	??_swap_endian_32+4
  5504  0373  0872               	movf	swap_endian_32@n+1,w
  5505  0374  00A5               	movwf	??_swap_endian_32+5
  5506  0375  0873               	movf	swap_endian_32@n+2,w
  5507  0376  00A6               	movwf	??_swap_endian_32+6
  5508  0377  0874               	movf	swap_endian_32@n+3,w
  5509  0378  00A7               	movwf	??_swap_endian_32+7
  5510  0379  3008               	movlw	8
  5511  037A                     u2225:	
  5512  037A  36A7               	lsrf	??_swap_endian_32+7,f
  5513  037B  0CA6               	rrf	??_swap_endian_32+6,f
  5514  037C  0CA5               	rrf	??_swap_endian_32+5,f
  5515  037D  0CA4               	rrf	??_swap_endian_32+4,f
  5516  037E  0B89               	decfsz	9,f
  5517  037F  2B7A               	goto	u2225
  5518  0380  0824               	movf	??_swap_endian_32+4,w
  5519  0381  05A0               	andwf	??_swap_endian_32,f
  5520  0382  0825               	movf	??_swap_endian_32+5,w
  5521  0383  05A1               	andwf	??_swap_endian_32+1,f
  5522  0384  0826               	movf	??_swap_endian_32+6,w
  5523  0385  05A2               	andwf	??_swap_endian_32+2,f
  5524  0386  0827               	movf	??_swap_endian_32+7,w
  5525  0387  05A3               	andwf	??_swap_endian_32+3,f
  5526  0388  3010               	movlw	16
  5527  0389                     u2235:	
  5528  0389  35A0               	lslf	??_swap_endian_32,f
  5529  038A  0DA1               	rlf	??_swap_endian_32+1,f
  5530  038B  0DA2               	rlf	??_swap_endian_32+2,f
  5531  038C  0DA3               	rlf	??_swap_endian_32+3,f
  5532  038D  0B89               	decfsz	9,f
  5533  038E  2B89               	goto	u2235
  5534  038F  0820               	movf	??_swap_endian_32,w
  5535  0390  04F5               	iorwf	swap_endian_32@r,f
  5536  0391  0821               	movf	??_swap_endian_32+1,w
  5537  0392  04F6               	iorwf	swap_endian_32@r+1,f
  5538  0393  0822               	movf	??_swap_endian_32+2,w
  5539  0394  04F7               	iorwf	swap_endian_32@r+2,f
  5540  0395  0823               	movf	??_swap_endian_32+3,w
  5541  0396  04F8               	iorwf	swap_endian_32@r+3,f
  5542                           
  5543                           ;xbee.c: 162: r |= ((n>>16)&0xFF) << 8;
  5544  0397  30FF               	movlw	255
  5545  0398  00A0               	movwf	??_swap_endian_32
  5546  0399  3000               	movlw	0
  5547  039A  00A1               	movwf	??_swap_endian_32+1
  5548  039B  3000               	movlw	0
  5549  039C  00A2               	movwf	??_swap_endian_32+2
  5550  039D  3000               	movlw	0
  5551  039E  00A3               	movwf	??_swap_endian_32+3
  5552  039F  0871               	movf	swap_endian_32@n,w
  5553  03A0  00A4               	movwf	??_swap_endian_32+4
  5554  03A1  0872               	movf	swap_endian_32@n+1,w
  5555  03A2  00A5               	movwf	??_swap_endian_32+5
  5556  03A3  0873               	movf	swap_endian_32@n+2,w
  5557  03A4  00A6               	movwf	??_swap_endian_32+6
  5558  03A5  0874               	movf	swap_endian_32@n+3,w
  5559  03A6  00A7               	movwf	??_swap_endian_32+7
  5560  03A7  3010               	movlw	16
  5561  03A8                     u2245:	
  5562  03A8  36A7               	lsrf	??_swap_endian_32+7,f
  5563  03A9  0CA6               	rrf	??_swap_endian_32+6,f
  5564  03AA  0CA5               	rrf	??_swap_endian_32+5,f
  5565  03AB  0CA4               	rrf	??_swap_endian_32+4,f
  5566  03AC  0B89               	decfsz	9,f
  5567  03AD  2BA8               	goto	u2245
  5568  03AE  0824               	movf	??_swap_endian_32+4,w
  5569  03AF  05A0               	andwf	??_swap_endian_32,f
  5570  03B0  0825               	movf	??_swap_endian_32+5,w
  5571  03B1  05A1               	andwf	??_swap_endian_32+1,f
  5572  03B2  0826               	movf	??_swap_endian_32+6,w
  5573  03B3  05A2               	andwf	??_swap_endian_32+2,f
  5574  03B4  0827               	movf	??_swap_endian_32+7,w
  5575  03B5  05A3               	andwf	??_swap_endian_32+3,f
  5576  03B6  3008               	movlw	8
  5577  03B7                     u2255:	
  5578  03B7  35A0               	lslf	??_swap_endian_32,f
  5579  03B8  0DA1               	rlf	??_swap_endian_32+1,f
  5580  03B9  0DA2               	rlf	??_swap_endian_32+2,f
  5581  03BA  0DA3               	rlf	??_swap_endian_32+3,f
  5582  03BB  0B89               	decfsz	9,f
  5583  03BC  2BB7               	goto	u2255
  5584  03BD  0820               	movf	??_swap_endian_32,w
  5585  03BE  04F5               	iorwf	swap_endian_32@r,f
  5586  03BF  0821               	movf	??_swap_endian_32+1,w
  5587  03C0  04F6               	iorwf	swap_endian_32@r+1,f
  5588  03C1  0822               	movf	??_swap_endian_32+2,w
  5589  03C2  04F7               	iorwf	swap_endian_32@r+2,f
  5590  03C3  0823               	movf	??_swap_endian_32+3,w
  5591  03C4  04F8               	iorwf	swap_endian_32@r+3,f
  5592                           
  5593                           ;xbee.c: 163: r |= ((n>>24)&0xFF);
  5594  03C5  30FF               	movlw	255
  5595  03C6  00A0               	movwf	??_swap_endian_32
  5596  03C7  3000               	movlw	0
  5597  03C8  00A1               	movwf	??_swap_endian_32+1
  5598  03C9  3000               	movlw	0
  5599  03CA  00A2               	movwf	??_swap_endian_32+2
  5600  03CB  3000               	movlw	0
  5601  03CC  00A3               	movwf	??_swap_endian_32+3
  5602  03CD  0871               	movf	swap_endian_32@n,w
  5603  03CE  00A4               	movwf	??_swap_endian_32+4
  5604  03CF  0872               	movf	swap_endian_32@n+1,w
  5605  03D0  00A5               	movwf	??_swap_endian_32+5
  5606  03D1  0873               	movf	swap_endian_32@n+2,w
  5607  03D2  00A6               	movwf	??_swap_endian_32+6
  5608  03D3  0874               	movf	swap_endian_32@n+3,w
  5609  03D4  00A7               	movwf	??_swap_endian_32+7
  5610  03D5  3018               	movlw	24
  5611  03D6                     u2265:	
  5612  03D6  36A7               	lsrf	??_swap_endian_32+7,f
  5613  03D7  0CA6               	rrf	??_swap_endian_32+6,f
  5614  03D8  0CA5               	rrf	??_swap_endian_32+5,f
  5615  03D9  0CA4               	rrf	??_swap_endian_32+4,f
  5616  03DA  0B89               	decfsz	9,f
  5617  03DB  2BD6               	goto	u2265
  5618  03DC  0824               	movf	??_swap_endian_32+4,w
  5619  03DD  05A0               	andwf	??_swap_endian_32,f
  5620  03DE  0825               	movf	??_swap_endian_32+5,w
  5621  03DF  05A1               	andwf	??_swap_endian_32+1,f
  5622  03E0  0826               	movf	??_swap_endian_32+6,w
  5623  03E1  05A2               	andwf	??_swap_endian_32+2,f
  5624  03E2  0827               	movf	??_swap_endian_32+7,w
  5625  03E3  05A3               	andwf	??_swap_endian_32+3,f
  5626  03E4  0820               	movf	??_swap_endian_32,w
  5627  03E5  04F5               	iorwf	swap_endian_32@r,f
  5628  03E6  0821               	movf	??_swap_endian_32+1,w
  5629  03E7  04F6               	iorwf	swap_endian_32@r+1,f
  5630  03E8  0822               	movf	??_swap_endian_32+2,w
  5631  03E9  04F7               	iorwf	swap_endian_32@r+2,f
  5632  03EA  0823               	movf	??_swap_endian_32+3,w
  5633  03EB  04F8               	iorwf	swap_endian_32@r+3,f
  5634                           
  5635                           ;xbee.c: 165: return r;
  5636  03EC  0878               	movf	swap_endian_32@r+3,w
  5637  03ED  00F4               	movwf	?_swap_endian_32+3
  5638  03EE  0877               	movf	swap_endian_32@r+2,w
  5639  03EF  00F3               	movwf	?_swap_endian_32+2
  5640  03F0  0876               	movf	swap_endian_32@r+1,w
  5641  03F1  00F2               	movwf	?_swap_endian_32+1
  5642  03F2  0875               	movf	swap_endian_32@r,w
  5643  03F3  00F1               	movwf	?_swap_endian_32
  5644  03F4  0008               	return
  5645  03F5                     __end_of_swap_endian_32:	
  5646                           
  5647                           	psect	text25
  5648  0E6C                     __ptext25:	
  5649 ;; *************** function _doChecksumVerify *****************
  5650 ;; Defined at:
  5651 ;;		line 103 in file "xbee.c"
  5652 ;; Parameters:    Size  Location     Type
  5653 ;;  address         1    wreg     PTR unsigned char 
  5654 ;;		 -> apiFrame(60), 
  5655 ;;  length          2    1[COMMON] int 
  5656 ;;  checksum        1    3[COMMON] unsigned char 
  5657 ;; Auto vars:     Size  Location     Type
  5658 ;;  address         1    6[COMMON] PTR unsigned char 
  5659 ;;		 -> apiFrame(60), 
  5660 ;;  i               2    8[COMMON] int 
  5661 ;;  check           1    7[COMMON] unsigned char 
  5662 ;; Return value:  Size  Location     Type
  5663 ;;                  1    wreg      unsigned char 
  5664 ;; Registers used:
  5665 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5666 ;; Tracked objects:
  5667 ;;		On entry : 0/0
  5668 ;;		On exit  : 0/0
  5669 ;;		Unchanged: 0/0
  5670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5671 ;;      Params:         3       0       0       0       0       0       0       0
  5672 ;;      Locals:         4       0       0       0       0       0       0       0
  5673 ;;      Temps:          2       0       0       0       0       0       0       0
  5674 ;;      Totals:         9       0       0       0       0       0       0       0
  5675 ;;Total ram usage:        9 bytes
  5676 ;; Hardware stack levels used:    1
  5677 ;; Hardware stack levels required when called:    1
  5678 ;; This function calls:
  5679 ;;		Nothing
  5680 ;; This function is called by:
  5681 ;;		_XBAPI_Command
  5682 ;; This function uses a non-reentrant model
  5683 ;;
  5684                           
  5685                           
  5686                           ;psect for function _doChecksumVerify
  5687  0E6C                     _doChecksumVerify:	
  5688                           
  5689                           ;incstack = 0
  5690                           ; Regs used in _doChecksumVerify: [wreg+fsr1l+fsr1h+status,2+status,0]
  5691                           ;doChecksumVerify@address stored from wreg
  5692  0E6C  00F6               	movwf	doChecksumVerify@address
  5693                           
  5694                           ;xbee.c: 104: unsigned char check = 0;
  5695  0E6D  01F7               	clrf	doChecksumVerify@check
  5696                           
  5697                           ;xbee.c: 106: int i;
  5698                           ;xbee.c: 107: for(i=0; i<length; i++) {
  5699  0E6E  01F8               	clrf	doChecksumVerify@i
  5700  0E6F  01F9               	clrf	doChecksumVerify@i+1
  5701  0E70                     l2202:	
  5702  0E70  0879               	movf	doChecksumVerify@i+1,w
  5703  0E71  3A80               	xorlw	128
  5704  0E72  00F4               	movwf	??_doChecksumVerify
  5705  0E73  0872               	movf	doChecksumVerify@length+1,w
  5706  0E74  3A80               	xorlw	128
  5707  0E75  0274               	subwf	??_doChecksumVerify,w
  5708  0E76  1D03               	skipz
  5709  0E77  2E7A               	goto	u1505
  5710  0E78  0871               	movf	doChecksumVerify@length,w
  5711  0E79  0278               	subwf	doChecksumVerify@i,w
  5712  0E7A                     u1505:	
  5713  0E7A  1803               	btfsc	3,0
  5714  0E7B  2E8C               	goto	l2204
  5715                           
  5716                           ;xbee.c: 108: check += address[i];
  5717  0E7C  0878               	movf	doChecksumVerify@i,w
  5718  0E7D  0776               	addwf	doChecksumVerify@address,w
  5719  0E7E  00F4               	movwf	??_doChecksumVerify
  5720  0E7F  0874               	movf	??_doChecksumVerify,w
  5721  0E80  0086               	movwf	6
  5722  0E81  3001               	movlw	1	; select bank2/3
  5723  0E82  0087               	movwf	7
  5724  0E83  0801               	movf	1,w
  5725  0E84  00F5               	movwf	??_doChecksumVerify+1
  5726  0E85  0875               	movf	??_doChecksumVerify+1,w
  5727  0E86  07F7               	addwf	doChecksumVerify@check,f
  5728  0E87  3001               	movlw	1
  5729  0E88  07F8               	addwf	doChecksumVerify@i,f
  5730  0E89  3000               	movlw	0
  5731  0E8A  3DF9               	addwfc	doChecksumVerify@i+1,f
  5732  0E8B  2E70               	goto	l2202
  5733  0E8C                     l2204:	
  5734                           
  5735                           ;xbee.c: 109: }
  5736                           ;xbee.c: 111: check += checksum;
  5737  0E8C  0873               	movf	doChecksumVerify@checksum,w
  5738  0E8D  00F4               	movwf	??_doChecksumVerify
  5739  0E8E  0874               	movf	??_doChecksumVerify,w
  5740  0E8F  07F7               	addwf	doChecksumVerify@check,f
  5741                           
  5742                           ;xbee.c: 113: return check;
  5743  0E90  0877               	movf	doChecksumVerify@check,w
  5744  0E91  0008               	return
  5745  0E92                     __end_of_doChecksumVerify:	
  5746                           
  5747                           	psect	text26
  5748  0E92                     __ptext26:	
  5749 ;; *************** function _checksum *****************
  5750 ;; Defined at:
  5751 ;;		line 90 in file "xbee.c"
  5752 ;; Parameters:    Size  Location     Type
  5753 ;;  addr            1    wreg     PTR void 
  5754 ;;		 -> apiFrame(60), 
  5755 ;;  length          2    1[COMMON] int 
  5756 ;; Auto vars:     Size  Location     Type
  5757 ;;  addr            1    5[COMMON] PTR void 
  5758 ;;		 -> apiFrame(60), 
  5759 ;;  i               2    8[COMMON] int 
  5760 ;;  checksum        1    7[COMMON] unsigned char 
  5761 ;;  address         1    6[COMMON] PTR unsigned char 
  5762 ;;		 -> apiFrame(60), 
  5763 ;; Return value:  Size  Location     Type
  5764 ;;                  1    wreg      unsigned char 
  5765 ;; Registers used:
  5766 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5767 ;; Tracked objects:
  5768 ;;		On entry : 0/0
  5769 ;;		On exit  : 0/0
  5770 ;;		Unchanged: 0/0
  5771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5772 ;;      Params:         2       0       0       0       0       0       0       0
  5773 ;;      Locals:         5       0       0       0       0       0       0       0
  5774 ;;      Temps:          2       0       0       0       0       0       0       0
  5775 ;;      Totals:         9       0       0       0       0       0       0       0
  5776 ;;Total ram usage:        9 bytes
  5777 ;; Hardware stack levels used:    1
  5778 ;; Hardware stack levels required when called:    1
  5779 ;; This function calls:
  5780 ;;		Nothing
  5781 ;; This function is called by:
  5782 ;;		_XBAPI_Transmit
  5783 ;;		_XBAPI_Command
  5784 ;; This function uses a non-reentrant model
  5785 ;;
  5786                           
  5787                           
  5788                           ;psect for function _checksum
  5789  0E92                     _checksum:	
  5790                           
  5791                           ;incstack = 0
  5792                           ; Regs used in _checksum: [wreg+fsr1l+fsr1h+status,2+status,0]
  5793                           ;checksum@addr stored from wreg
  5794  0E92  00F5               	movwf	checksum@addr
  5795                           
  5796                           ;xbee.c: 91: unsigned char* address = (unsigned char*) addr;
  5797  0E93  0875               	movf	checksum@addr,w
  5798  0E94  00F3               	movwf	??_checksum
  5799  0E95  0873               	movf	??_checksum,w
  5800  0E96  00F6               	movwf	checksum@address
  5801                           
  5802                           ;xbee.c: 94: unsigned char checksum = 0;
  5803  0E97  01F7               	clrf	checksum@checksum
  5804                           
  5805                           ;xbee.c: 95: int i;
  5806                           ;xbee.c: 96: for(i=0; i<length; i++) {
  5807  0E98  01F8               	clrf	checksum@i
  5808  0E99  01F9               	clrf	checksum@i+1
  5809  0E9A                     l2190:	
  5810  0E9A  0879               	movf	checksum@i+1,w
  5811  0E9B  3A80               	xorlw	128
  5812  0E9C  00F3               	movwf	??_checksum
  5813  0E9D  0872               	movf	checksum@length+1,w
  5814  0E9E  3A80               	xorlw	128
  5815  0E9F  0273               	subwf	??_checksum,w
  5816  0EA0  1D03               	skipz
  5817  0EA1  2EA4               	goto	u1495
  5818  0EA2  0871               	movf	checksum@length,w
  5819  0EA3  0278               	subwf	checksum@i,w
  5820  0EA4                     u1495:	
  5821  0EA4  1803               	btfsc	3,0
  5822  0EA5  2EB6               	goto	l2192
  5823                           
  5824                           ;xbee.c: 97: checksum += address[i];
  5825  0EA6  0878               	movf	checksum@i,w
  5826  0EA7  0776               	addwf	checksum@address,w
  5827  0EA8  00F3               	movwf	??_checksum
  5828  0EA9  0873               	movf	??_checksum,w
  5829  0EAA  0086               	movwf	6
  5830  0EAB  3001               	movlw	1	; select bank2/3
  5831  0EAC  0087               	movwf	7
  5832  0EAD  0801               	movf	1,w
  5833  0EAE  00F4               	movwf	??_checksum+1
  5834  0EAF  0874               	movf	??_checksum+1,w
  5835  0EB0  07F7               	addwf	checksum@checksum,f
  5836  0EB1  3001               	movlw	1
  5837  0EB2  07F8               	addwf	checksum@i,f
  5838  0EB3  3000               	movlw	0
  5839  0EB4  3DF9               	addwfc	checksum@i+1,f
  5840  0EB5  2E9A               	goto	l2190
  5841  0EB6                     l2192:	
  5842                           
  5843                           ;xbee.c: 98: }
  5844                           ;xbee.c: 100: return 0xFF - checksum;
  5845  0EB6  0377               	decf	checksum@checksum,w
  5846  0EB7  3AFF               	xorlw	255
  5847  0EB8  3EFF               	addlw	255
  5848  0EB9  0008               	return
  5849  0EBA                     __end_of_checksum:	
  5850                           
  5851                           	psect	text27
  5852  0F68                     __ptext27:	
  5853 ;; *************** function _UART_TransmitMsg *****************
  5854 ;; Defined at:
  5855 ;;		line 27 in file "uart.c"
  5856 ;; Parameters:    Size  Location     Type
  5857 ;;  _msg            1    wreg     PTR  unsigned char 
  5858 ;;		 -> apiFrame(60), 
  5859 ;;  len             2    2[COMMON] int 
  5860 ;;  end_char        1    4[COMMON] const unsigned char 
  5861 ;; Auto vars:     Size  Location     Type
  5862 ;;  _msg            1    6[COMMON] PTR  unsigned char 
  5863 ;;		 -> apiFrame(60), 
  5864 ;;  i               2    7[COMMON] int 
  5865 ;; Return value:  Size  Location     Type
  5866 ;;		None               void
  5867 ;; Registers used:
  5868 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5869 ;; Tracked objects:
  5870 ;;		On entry : 0/0
  5871 ;;		On exit  : 0/0
  5872 ;;		Unchanged: 0/0
  5873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5874 ;;      Params:         3       0       0       0       0       0       0       0
  5875 ;;      Locals:         3       0       0       0       0       0       0       0
  5876 ;;      Temps:          1       0       0       0       0       0       0       0
  5877 ;;      Totals:         7       0       0       0       0       0       0       0
  5878 ;;Total ram usage:        7 bytes
  5879 ;; Hardware stack levels used:    1
  5880 ;; Hardware stack levels required when called:    2
  5881 ;; This function calls:
  5882 ;;		_UART_Transmit
  5883 ;; This function is called by:
  5884 ;;		_XBAPI_Transmit
  5885 ;;		_XBAPI_Command
  5886 ;;		_XBee_Send
  5887 ;; This function uses a non-reentrant model
  5888 ;;
  5889                           
  5890                           
  5891                           ;psect for function _UART_TransmitMsg
  5892  0F68                     _UART_TransmitMsg:	
  5893                           
  5894                           ;incstack = 0
  5895                           ; Regs used in _UART_TransmitMsg: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5896                           ;UART_TransmitMsg@_msg stored from wreg
  5897  0F68  00F6               	movwf	UART_TransmitMsg@_msg
  5898                           
  5899                           ;uart.c: 29: int i;
  5900                           ;uart.c: 30: for(i=0; i<len; i++) {
  5901  0F69  01F7               	clrf	UART_TransmitMsg@i
  5902  0F6A  01F8               	clrf	UART_TransmitMsg@i+1
  5903  0F6B                     l154:	
  5904  0F6B  0878               	movf	UART_TransmitMsg@i+1,w
  5905  0F6C  3A80               	xorlw	128
  5906  0F6D  00F5               	movwf	??_UART_TransmitMsg
  5907  0F6E  0873               	movf	UART_TransmitMsg@len+1,w
  5908  0F6F  3A80               	xorlw	128
  5909  0F70  0275               	subwf	??_UART_TransmitMsg,w
  5910  0F71  1D03               	skipz
  5911  0F72  2F75               	goto	u1375
  5912  0F73  0872               	movf	UART_TransmitMsg@len,w
  5913  0F74  0277               	subwf	UART_TransmitMsg@i,w
  5914  0F75                     u1375:	
  5915  0F75  1803               	btfsc	3,0
  5916  0F76  2F95               	goto	l158
  5917                           
  5918                           ;uart.c: 31: UART_Transmit(_msg[i]);
  5919  0F77  0877               	movf	UART_TransmitMsg@i,w
  5920  0F78  0776               	addwf	UART_TransmitMsg@_msg,w
  5921  0F79  00F5               	movwf	??_UART_TransmitMsg
  5922  0F7A  0875               	movf	??_UART_TransmitMsg,w
  5923  0F7B  0086               	movwf	6
  5924  0F7C  3001               	movlw	1	; select bank2/3
  5925  0F7D  0087               	movwf	7
  5926  0F7E  0801               	movf	1,w
  5927  0F7F  318D  254A  318F   	fcall	_UART_Transmit
  5928                           
  5929                           ;uart.c: 33: if(end_char && _msg[i] == end_char) {
  5930  0F82  0874               	movf	UART_TransmitMsg@end_char,w
  5931  0F83  1903               	btfsc	3,2
  5932  0F84  2F90               	goto	l2126
  5933  0F85  0877               	movf	UART_TransmitMsg@i,w
  5934  0F86  0776               	addwf	UART_TransmitMsg@_msg,w
  5935  0F87  00F5               	movwf	??_UART_TransmitMsg
  5936  0F88  0875               	movf	??_UART_TransmitMsg,w
  5937  0F89  0086               	movwf	6
  5938  0F8A  3001               	movlw	1	; select bank2/3
  5939  0F8B  0087               	movwf	7
  5940  0F8C  0801               	movf	1,w
  5941  0F8D  0674               	xorwf	UART_TransmitMsg@end_char,w
  5942  0F8E  1903               	btfsc	3,2
  5943  0F8F  2F95               	goto	l158
  5944  0F90                     l2126:	
  5945                           ;uart.c: 34: break;
  5946                           
  5947  0F90  3001               	movlw	1
  5948  0F91  07F7               	addwf	UART_TransmitMsg@i,f
  5949  0F92  3000               	movlw	0
  5950  0F93  3DF8               	addwfc	UART_TransmitMsg@i+1,f
  5951  0F94  2F6B               	goto	l154
  5952  0F95                     l158:	
  5953                           ;uart.c: 35: }
  5954                           ;uart.c: 36: }
  5955                           ;uart.c: 38: while(!TX1STAbits.TRMT) {}
  5956                           
  5957  0F95  0023               	movlb	3	; select bank3
  5958  0F96  189E               	btfsc	30,1	;volatile
  5959  0F97  0008               	return
  5960  0F98  2F95               	goto	l158
  5961  0F99                     __end_of_UART_TransmitMsg:	
  5962                           
  5963                           	psect	text28
  5964  0D4A                     __ptext28:	
  5965 ;; *************** function _UART_Transmit *****************
  5966 ;; Defined at:
  5967 ;;		line 17 in file "uart.c"
  5968 ;; Parameters:    Size  Location     Type
  5969 ;;  c               1    wreg     volatile unsigned char 
  5970 ;; Auto vars:     Size  Location     Type
  5971 ;;  c               1    1[COMMON] volatile unsigned char 
  5972 ;; Return value:  Size  Location     Type
  5973 ;;		None               void
  5974 ;; Registers used:
  5975 ;;		wreg
  5976 ;; Tracked objects:
  5977 ;;		On entry : 0/0
  5978 ;;		On exit  : 0/0
  5979 ;;		Unchanged: 0/0
  5980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5981 ;;      Params:         0       0       0       0       0       0       0       0
  5982 ;;      Locals:         1       0       0       0       0       0       0       0
  5983 ;;      Temps:          0       0       0       0       0       0       0       0
  5984 ;;      Totals:         1       0       0       0       0       0       0       0
  5985 ;;Total ram usage:        1 bytes
  5986 ;; Hardware stack levels used:    1
  5987 ;; Hardware stack levels required when called:    1
  5988 ;; This function calls:
  5989 ;;		Nothing
  5990 ;; This function is called by:
  5991 ;;		_UART_TransmitMsg
  5992 ;; This function uses a non-reentrant model
  5993 ;;
  5994                           
  5995                           
  5996                           ;psect for function _UART_Transmit
  5997  0D4A                     _UART_Transmit:	
  5998                           
  5999                           ;incstack = 0
  6000                           ; Regs used in _UART_Transmit: [wreg]
  6001                           ;UART_Transmit@c stored from wreg
  6002  0D4A  00F1               	movwf	UART_Transmit@c	;volatile
  6003  0D4B                     l145:	
  6004                           ;uart.c: 18: while(!OSCSTATbits.OSTS) {}
  6005                           
  6006  0D4B  0021               	movlb	1	; select bank1
  6007  0D4C  1E9A               	btfss	26,5	;volatile
  6008  0D4D  2D4B               	goto	l145
  6009  0D4E                     l148:	
  6010                           ;uart.c: 20: while(!TXSTAbits.TRMT) {}
  6011                           
  6012  0D4E  0023               	movlb	3	; select bank3
  6013  0D4F  1C9E               	btfss	30,1	;volatile
  6014  0D50  2D4E               	goto	l148
  6015                           
  6016                           ;uart.c: 22: TX1REG = c;
  6017  0D51  009A               	movwf	26	;volatile
  6018  0D52  0008               	return
  6019  0D53                     __end_of_UART_Transmit:	
  6020                           
  6021                           	psect	text29
  6022  0287                     __ptext29:	
  6023 ;; *************** function _XBAPI_HandleFrame *****************
  6024 ;; Defined at:
  6025 ;;		line 214 in file "xbee.c"
  6026 ;; Parameters:    Size  Location     Type
  6027 ;;  expected        2   14[BANK0 ] int 
  6028 ;;  do_tmo          2   16[BANK0 ] int 
  6029 ;; Auto vars:     Size  Location     Type
  6030 ;;  packet          1   22[BANK0 ] PTR struct .
  6031 ;;		 -> apiFrame(60), 
  6032 ;;  received_len    2   23[BANK0 ] unsigned short 
  6033 ;;  bytes_read      2   20[BANK0 ] int 
  6034 ;;  tmo             4   25[BANK0 ] long 
  6035 ;; Return value:  Size  Location     Type
  6036 ;;                  2   14[BANK0 ] int 
  6037 ;; Registers used:
  6038 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  6039 ;; Tracked objects:
  6040 ;;		On entry : 0/0
  6041 ;;		On exit  : 0/0
  6042 ;;		Unchanged: 0/0
  6043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6044 ;;      Params:         0       4       0       0       0       0       0       0
  6045 ;;      Locals:         0       9       0       0       0       0       0       0
  6046 ;;      Temps:          0       2       0       0       0       0       0       0
  6047 ;;      Totals:         0      15       0       0       0       0       0       0
  6048 ;;Total ram usage:       15 bytes
  6049 ;; Hardware stack levels used:    1
  6050 ;; Hardware stack levels required when called:    3
  6051 ;; This function calls:
  6052 ;;		_UART_ReceiveMsgTmo
  6053 ;;		_memcpy
  6054 ;; This function is called by:
  6055 ;;		_main
  6056 ;;		_XBAPI_Transmit
  6057 ;;		_XBAPI_Command
  6058 ;; This function uses a non-reentrant model
  6059 ;;
  6060                           
  6061                           
  6062                           ;psect for function _XBAPI_HandleFrame
  6063  0287                     _XBAPI_HandleFrame:	
  6064                           
  6065                           ;xbee.c: 217: long tmo = (do_tmo) ? 8000000>>1 : 0;
  6066                           
  6067                           ;incstack = 0
  6068                           ; Regs used in _XBAPI_HandleFrame: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+cstack]
  6069  0287  0020               	movlb	0	; select bank0
  6070  0288  0831               	movf	XBAPI_HandleFrame@do_tmo+1,w
  6071  0289  0430               	iorwf	XBAPI_HandleFrame@do_tmo,w
  6072  028A  1D03               	skipz
  6073  028B  2A92               	goto	l2588
  6074  028C  3000               	movlw	0
  6075  028D  00BC               	movwf	XBAPI_HandleFrame@tmo+3
  6076  028E  3000               	movlw	0
  6077  028F  00BB               	movwf	XBAPI_HandleFrame@tmo+2
  6078  0290  3000               	movlw	0
  6079  0291  2A97               	goto	L2
  6080  0292                     l2588:	
  6081  0292  3000               	movlw	0
  6082  0293  00BC               	movwf	XBAPI_HandleFrame@tmo+3
  6083  0294  303D               	movlw	61
  6084  0295  00BB               	movwf	XBAPI_HandleFrame@tmo+2
  6085  0296  3009               	movlw	9
  6086  0297                     L2:	
  6087  0297  00BA               	movwf	XBAPI_HandleFrame@tmo+1
  6088  0298  3000               	movlw	0
  6089  0299  00B9               	movwf	XBAPI_HandleFrame@tmo
  6090  029A                     l2590:	
  6091                           ;xbee.c: 219: while (1) {
  6092                           
  6093                           
  6094                           ;xbee.c: 220: int bytes_read = UART_ReceiveMsgTmo(apiFrame.buffer, 3, 0, tmo);
  6095  029A  3003               	movlw	3
  6096  029B  00A0               	movwf	?_UART_ReceiveMsgTmo
  6097  029C  3000               	movlw	0
  6098  029D  00A1               	movwf	?_UART_ReceiveMsgTmo+1
  6099  029E  01A2               	clrf	?_UART_ReceiveMsgTmo+2
  6100  029F  083C               	movf	XBAPI_HandleFrame@tmo+3,w
  6101  02A0  00A6               	movwf	?_UART_ReceiveMsgTmo+6
  6102  02A1  083B               	movf	XBAPI_HandleFrame@tmo+2,w
  6103  02A2  00A5               	movwf	?_UART_ReceiveMsgTmo+5
  6104  02A3  083A               	movf	XBAPI_HandleFrame@tmo+1,w
  6105  02A4  00A4               	movwf	?_UART_ReceiveMsgTmo+4
  6106  02A5  0839               	movf	XBAPI_HandleFrame@tmo,w
  6107  02A6  00A3               	movwf	?_UART_ReceiveMsgTmo+3
  6108  02A7  3020               	movlw	_apiFrame& (0+255)
  6109  02A8  3186  2669  3182   	fcall	_UART_ReceiveMsgTmo
  6110  02AB  0020               	movlb	0	; select bank0
  6111  02AC  0821               	movf	?_UART_ReceiveMsgTmo+1,w
  6112  02AD  01B5               	clrf	XBAPI_HandleFrame@bytes_read+1
  6113  02AE  07B5               	addwf	XBAPI_HandleFrame@bytes_read+1,f
  6114  02AF  0820               	movf	?_UART_ReceiveMsgTmo,w
  6115  02B0  01B4               	clrf	XBAPI_HandleFrame@bytes_read
  6116  02B1  07B4               	addwf	XBAPI_HandleFrame@bytes_read,f
  6117                           
  6118                           ;xbee.c: 221: if(bytes_read<3) {
  6119  02B2  0835               	movf	XBAPI_HandleFrame@bytes_read+1,w
  6120  02B3  3A80               	xorlw	128
  6121  02B4  00FF               	movwf	127
  6122  02B5  3080               	movlw	128
  6123  02B6  027F               	subwf	127,w
  6124  02B7  1D03               	skipz
  6125  02B8  2ABB               	goto	u2035
  6126  02B9  3003               	movlw	3
  6127  02BA  0234               	subwf	XBAPI_HandleFrame@bytes_read,w
  6128  02BB                     u2035:	
  6129  02BB  1803               	skipnc
  6130  02BC  2AC3               	goto	l2598
  6131                           
  6132                           ;xbee.c: 222: return -2;
  6133  02BD  30FE               	movlw	254
  6134  02BE  0020               	movlb	0	; select bank0
  6135  02BF  00AE               	movwf	?_XBAPI_HandleFrame
  6136  02C0  30FF               	movlw	255
  6137  02C1  00AF               	movwf	?_XBAPI_HandleFrame+1
  6138  02C2  0008               	return
  6139  02C3                     l2598:	
  6140                           
  6141                           ;xbee.c: 223: }
  6142                           ;xbee.c: 225: unsigned short received_length = apiFrame.buffer[2];
  6143  02C3  0022               	movlb	2	; select bank2
  6144  02C4  0822               	movf	(_apiFrame^(0+256)+2),w
  6145  02C5  0020               	movlb	0	; select bank0
  6146  02C6  00B2               	movwf	??_XBAPI_HandleFrame
  6147  02C7  01B3               	clrf	??_XBAPI_HandleFrame+1
  6148  02C8  0832               	movf	??_XBAPI_HandleFrame,w
  6149  02C9  00B7               	movwf	XBAPI_HandleFrame@received_length
  6150  02CA  0833               	movf	??_XBAPI_HandleFrame+1,w
  6151  02CB  00B8               	movwf	XBAPI_HandleFrame@received_length+1
  6152                           
  6153                           ;xbee.c: 226: received_length |= (apiFrame.buffer[1] << 8);
  6154  02CC  0022               	movlb	2	; select bank2
  6155  02CD  0821               	movf	(_apiFrame^(0+256)+1),w
  6156  02CE  0020               	movlb	0	; select bank0
  6157  02CF  00B2               	movwf	??_XBAPI_HandleFrame
  6158  02D0  01B3               	clrf	??_XBAPI_HandleFrame+1
  6159  02D1  0832               	movf	??_XBAPI_HandleFrame,w
  6160  02D2  00B3               	movwf	??_XBAPI_HandleFrame+1
  6161  02D3  01B2               	clrf	??_XBAPI_HandleFrame
  6162  02D4  0832               	movf	??_XBAPI_HandleFrame,w
  6163  02D5  04B7               	iorwf	XBAPI_HandleFrame@received_length,f
  6164  02D6  0833               	movf	??_XBAPI_HandleFrame+1,w
  6165  02D7  04B8               	iorwf	XBAPI_HandleFrame@received_length+1,f
  6166                           
  6167                           ;xbee.c: 228: UART_ReceiveMsgTmo(apiFrame.buffer + 3, received_length + 1, 0, tmo);
  6168  02D8  0837               	movf	XBAPI_HandleFrame@received_length,w
  6169  02D9  3E01               	addlw	1
  6170  02DA  00A0               	movwf	?_UART_ReceiveMsgTmo
  6171  02DB  3000               	movlw	0
  6172  02DC  3D38               	addwfc	XBAPI_HandleFrame@received_length+1,w
  6173  02DD  00A1               	movwf	?_UART_ReceiveMsgTmo+1
  6174  02DE  01A2               	clrf	?_UART_ReceiveMsgTmo+2
  6175  02DF  083C               	movf	XBAPI_HandleFrame@tmo+3,w
  6176  02E0  00A6               	movwf	?_UART_ReceiveMsgTmo+6
  6177  02E1  083B               	movf	XBAPI_HandleFrame@tmo+2,w
  6178  02E2  00A5               	movwf	?_UART_ReceiveMsgTmo+5
  6179  02E3  083A               	movf	XBAPI_HandleFrame@tmo+1,w
  6180  02E4  00A4               	movwf	?_UART_ReceiveMsgTmo+4
  6181  02E5  0839               	movf	XBAPI_HandleFrame@tmo,w
  6182  02E6  00A3               	movwf	?_UART_ReceiveMsgTmo+3
  6183  02E7  3023               	movlw	(_apiFrame+3)& (0+255)
  6184  02E8  3186  2669  3182   	fcall	_UART_ReceiveMsgTmo
  6185                           
  6186                           ;xbee.c: 230: if (apiFrame.rx.frame_type != expected && expected) {
  6187  02EB  0022               	movlb	2	; select bank2
  6188  02EC  0823               	movf	(_apiFrame^(0+256)+3),w
  6189  02ED  0020               	movlb	0	; select bank0
  6190  02EE  00B2               	movwf	??_XBAPI_HandleFrame
  6191  02EF  01B3               	clrf	??_XBAPI_HandleFrame+1
  6192  02F0  082F               	movf	XBAPI_HandleFrame@expected+1,w
  6193  02F1  0633               	xorwf	??_XBAPI_HandleFrame+1,w
  6194  02F2  1D03               	skipz
  6195  02F3  2AF6               	goto	u2045
  6196  02F4  082E               	movf	XBAPI_HandleFrame@expected,w
  6197  02F5  0632               	xorwf	??_XBAPI_HandleFrame,w
  6198  02F6                     u2045:	
  6199  02F6  1903               	skipnz
  6200  02F7  2B33               	goto	l2630
  6201  02F8  082F               	movf	XBAPI_HandleFrame@expected+1,w
  6202  02F9  042E               	iorwf	XBAPI_HandleFrame@expected,w
  6203  02FA  1D03               	btfss	3,2
  6204  02FB  2A9A               	goto	l2590
  6205  02FC  2B33               	goto	l2630
  6206  02FD                     l2612:	
  6207                           ;xbee.c: 242: case 0x90: {
  6208                           
  6209                           ;xbee.c: 236: }
  6210                           ;xbee.c: 237: }
  6211                           ;xbee.c: 241: switch(apiFrame.rx.frame_type) {
  6212                           
  6213                           ;xbee.c: 235: break;
  6214                           
  6215                           ;xbee.c: 234: } else {
  6216                           
  6217                           ;xbee.c: 232: continue;
  6218                           
  6219                           
  6220                           ;xbee.c: 243: Packet* packet = &apiFrame.rx.packet;
  6221  02FD  3030               	movlw	(_apiFrame+16)& (0+255)
  6222  02FE  0020               	movlb	0	; select bank0
  6223  02FF  00B2               	movwf	??_XBAPI_HandleFrame
  6224  0300  0832               	movf	??_XBAPI_HandleFrame,w
  6225  0301  00B6               	movwf	XBAPI_HandleFrame@packet
  6226                           
  6227                           ;xbee.c: 244: switch(packet->header.command) {
  6228  0302  2B13               	goto	l2618
  6229  0303                     l2614:	
  6230                           ;xbee.c: 245: case 0x04:
  6231                           
  6232                           
  6233                           ;xbee.c: 246: {
  6234                           ;xbee.c: 247: memcpy(&dest_address, &apiFrame.rx.source_address, sizeof(XBeeAddress));
  6235  0303  30E4               	movlw	low _dest_address
  6236  0304  00F1               	movwf	?_memcpy
  6237  0305  3000               	movlw	high _dest_address
  6238  0306  00F2               	movwf	?_memcpy+1
  6239  0307  3025               	movlw	low (_apiFrame+5)
  6240  0308  00F3               	movwf	?_memcpy+2
  6241  0309  3001               	movlw	high (_apiFrame+5)
  6242  030A  00F4               	movwf	?_memcpy+3
  6243  030B  3008               	movlw	8
  6244  030C  00F5               	movwf	?_memcpy+4
  6245  030D  3000               	movlw	0
  6246  030E  00F6               	movwf	?_memcpy+5
  6247  030F  3180  20D2  3182   	fcall	_memcpy
  6248                           
  6249                           ;xbee.c: 252: }
  6250                           
  6251                           ;xbee.c: 251: } break;
  6252  0312  2B3F               	goto	l2632
  6253  0313                     l2618:	
  6254  0313  0020               	movlb	0	; select bank0
  6255  0314  0836               	movf	XBAPI_HandleFrame@packet,w
  6256  0315  3E05               	addlw	5
  6257  0316  0086               	movwf	6
  6258  0317  3001               	movlw	1	; select bank2/3
  6259  0318  0087               	movwf	7
  6260  0319  0801               	movf	1,w
  6261                           
  6262                           ; Switch size 1, requested type "space"
  6263                           ; Number of cases is 1, Range of values is 4 to 4
  6264                           ; switch strategies available:
  6265                           ; Name         Instructions Cycles
  6266                           ; simple_byte            4     3 (average)
  6267                           ; direct_byte           11     9 (fixed)
  6268                           ; jumptable            263     9 (fixed)
  6269                           ;	Chosen strategy is simple_byte
  6270  031A  3A04               	xorlw	4	; case 4
  6271  031B  1903               	skipnz
  6272  031C  2B03               	goto	l2614
  6273  031D  2B3F               	goto	l2632
  6274                           
  6275                           ;xbee.c: 254: } break;
  6276  031E  2B3F               	goto	l2632
  6277  031F                     l2620:	
  6278                           ;xbee.c: 256: case 0x8B: {
  6279                           
  6280                           
  6281                           ;xbee.c: 258: return apiFrame.txStatus.delivery_status;
  6282  031F  0022               	movlb	2	; select bank2
  6283  0320  0828               	movf	(_apiFrame^(0+256)+8),w
  6284  0321  0020               	movlb	0	; select bank0
  6285  0322  00B2               	movwf	??_XBAPI_HandleFrame
  6286  0323  01B3               	clrf	??_XBAPI_HandleFrame+1
  6287  0324  0832               	movf	??_XBAPI_HandleFrame,w
  6288  0325  00AE               	movwf	?_XBAPI_HandleFrame
  6289  0326  0833               	movf	??_XBAPI_HandleFrame+1,w
  6290  0327  00AF               	movwf	?_XBAPI_HandleFrame+1
  6291  0328  0008               	return
  6292  0329                     l2624:	
  6293                           ;xbee.c: 259: }
  6294                           ;xbee.c: 261: case 0x88: {
  6295                           
  6296                           
  6297                           ;xbee.c: 262: return apiFrame.atCmdResponse.cmd_status;
  6298  0329  0022               	movlb	2	; select bank2
  6299  032A  0827               	movf	(_apiFrame^(0+256)+7),w
  6300  032B  0020               	movlb	0	; select bank0
  6301  032C  00B2               	movwf	??_XBAPI_HandleFrame
  6302  032D  01B3               	clrf	??_XBAPI_HandleFrame+1
  6303  032E  0832               	movf	??_XBAPI_HandleFrame,w
  6304  032F  00AE               	movwf	?_XBAPI_HandleFrame
  6305  0330  0833               	movf	??_XBAPI_HandleFrame+1,w
  6306  0331  00AF               	movwf	?_XBAPI_HandleFrame+1
  6307  0332  0008               	return
  6308  0333                     l2630:	
  6309                           ;xbee.c: 267: }
  6310                           
  6311                           ;xbee.c: 266: break;
  6312                           
  6313                           ;xbee.c: 263: }
  6314                           ;xbee.c: 265: default:
  6315                           
  6316  0333  0022               	movlb	2	; select bank2
  6317  0334  0823               	movf	(_apiFrame^(0+256)+3),w
  6318                           
  6319                           ; Switch size 1, requested type "space"
  6320                           ; Number of cases is 3, Range of values is 136 to 144
  6321                           ; switch strategies available:
  6322                           ; Name         Instructions Cycles
  6323                           ; simple_byte           10     6 (average)
  6324                           ; direct_byte           27     9 (fixed)
  6325                           ; jumptable            263     9 (fixed)
  6326                           ;	Chosen strategy is simple_byte
  6327  0335  3A88               	xorlw	136	; case 136
  6328  0336  1903               	skipnz
  6329  0337  2B29               	goto	l2624
  6330  0338  3A03               	xorlw	3	; case 139
  6331  0339  1903               	skipnz
  6332  033A  2B1F               	goto	l2620
  6333  033B  3A1B               	xorlw	27	; case 144
  6334  033C  1903               	skipnz
  6335  033D  2AFD               	goto	l2612
  6336  033E  2B3F               	goto	l2632
  6337  033F                     l2632:	
  6338                           
  6339                           ;xbee.c: 269: return -1;
  6340  033F  30FF               	movlw	255
  6341  0340  0020               	movlb	0	; select bank0
  6342  0341  00AE               	movwf	?_XBAPI_HandleFrame
  6343  0342  30FF               	movlw	255
  6344  0343  00AF               	movwf	?_XBAPI_HandleFrame+1
  6345  0344  0008               	return
  6346  0345                     __end_of_XBAPI_HandleFrame:	
  6347                           
  6348                           	psect	text30
  6349  00D2                     __ptext30:	
  6350 ;; *************** function _memcpy *****************
  6351 ;; Defined at:
  6352 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\common\memcpy.c"
  6353 ;; Parameters:    Size  Location     Type
  6354 ;;  d1              2    1[COMMON] PTR void 
  6355 ;;		 -> dest_address(8), apiFrame(60), 
  6356 ;;  s1              2    3[COMMON] PTR const void 
  6357 ;;		 -> packet_buffer(32), dest_address(8), apiFrame(60), 
  6358 ;;  n               2    5[COMMON] unsigned int 
  6359 ;; Auto vars:     Size  Location     Type
  6360 ;;  s               2   10[COMMON] PTR const unsigned char 
  6361 ;;		 -> packet_buffer(32), dest_address(8), apiFrame(60), 
  6362 ;;  d               2    8[COMMON] PTR unsigned char 
  6363 ;;		 -> dest_address(8), apiFrame(60), 
  6364 ;; Return value:  Size  Location     Type
  6365 ;;                  2    wreg      PTR void 
  6366 ;; Registers used:
  6367 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6368 ;; Tracked objects:
  6369 ;;		On entry : 0/0
  6370 ;;		On exit  : 0/0
  6371 ;;		Unchanged: 0/0
  6372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6373 ;;      Params:         6       0       0       0       0       0       0       0
  6374 ;;      Locals:         4       0       0       0       0       0       0       0
  6375 ;;      Temps:          1       0       0       0       0       0       0       0
  6376 ;;      Totals:        11       0       0       0       0       0       0       0
  6377 ;;Total ram usage:       11 bytes
  6378 ;; Hardware stack levels used:    1
  6379 ;; Hardware stack levels required when called:    1
  6380 ;; This function calls:
  6381 ;;		Nothing
  6382 ;; This function is called by:
  6383 ;;		_XBAPI_Transmit
  6384 ;;		_XBAPI_HandleFrame
  6385 ;; This function uses a non-reentrant model
  6386 ;;
  6387                           
  6388                           
  6389                           ;psect for function _memcpy
  6390  00D2                     _memcpy:	
  6391                           
  6392                           ;incstack = 0
  6393                           ; Regs used in _memcpy: [wreg+fsr1l+fsr1h+status,2+status,0]
  6394  00D2  0874               	movf	memcpy@s1+1,w
  6395  00D3  01FB               	clrf	memcpy@s+1
  6396  00D4  07FB               	addwf	memcpy@s+1,f
  6397  00D5  0873               	movf	memcpy@s1,w
  6398  00D6  01FA               	clrf	memcpy@s
  6399  00D7  07FA               	addwf	memcpy@s,f
  6400  00D8  0872               	movf	memcpy@d1+1,w
  6401  00D9  01F9               	clrf	memcpy@d+1
  6402  00DA  07F9               	addwf	memcpy@d+1,f
  6403  00DB  0871               	movf	memcpy@d1,w
  6404  00DC  01F8               	clrf	memcpy@d
  6405  00DD  07F8               	addwf	memcpy@d,f
  6406  00DE                     l2262:	
  6407  00DE  3001               	movlw	1
  6408  00DF  02F5               	subwf	memcpy@n,f
  6409  00E0  3000               	movlw	0
  6410  00E1  3BF6               	subwfb	memcpy@n+1,f
  6411  00E2  30FF               	movlw	255
  6412  00E3  0676               	xorwf	memcpy@n+1,w
  6413  00E4  1D03               	skipz
  6414  00E5  28E8               	goto	u1545
  6415  00E6  30FF               	movlw	255
  6416  00E7  0675               	xorwf	memcpy@n,w
  6417  00E8                     u1545:	
  6418  00E8  1903               	btfsc	3,2
  6419  00E9  0008               	return
  6420  00EA  087A               	movf	memcpy@s,w
  6421  00EB  0086               	movwf	6
  6422  00EC  087B               	movf	memcpy@s+1,w
  6423  00ED  0087               	movwf	7
  6424  00EE  0801               	movf	1,w
  6425  00EF  00F7               	movwf	??_memcpy
  6426  00F0  0878               	movf	memcpy@d,w
  6427  00F1  0086               	movwf	6
  6428  00F2  0879               	movf	memcpy@d+1,w
  6429  00F3  0087               	movwf	7
  6430  00F4  0877               	movf	??_memcpy,w
  6431  00F5  0081               	movwf	1
  6432  00F6  3001               	movlw	1
  6433  00F7  07FA               	addwf	memcpy@s,f
  6434  00F8  3000               	movlw	0
  6435  00F9  3DFB               	addwfc	memcpy@s+1,f
  6436  00FA  3001               	movlw	1
  6437  00FB  07F8               	addwf	memcpy@d,f
  6438  00FC  3000               	movlw	0
  6439  00FD  3DF9               	addwfc	memcpy@d+1,f
  6440  00FE  28DE               	goto	l2262
  6441  00FF                     __end_of_memcpy:	
  6442                           ;	Return value of _memcpy is never used
  6443                           
  6444                           
  6445                           	psect	text31
  6446  0669                     __ptext31:	
  6447 ;; *************** function _UART_ReceiveMsgTmo *****************
  6448 ;; Defined at:
  6449 ;;		line 70 in file "uart.c"
  6450 ;; Parameters:    Size  Location     Type
  6451 ;;  msg             1    wreg     PTR unsigned char 
  6452 ;;		 -> apiFrame(60), 
  6453 ;;  len             2    0[BANK0 ] int 
  6454 ;;  end_char        1    2[BANK0 ] unsigned char 
  6455 ;;  tmo             4    3[BANK0 ] long 
  6456 ;; Auto vars:     Size  Location     Type
  6457 ;;  msg             1    9[BANK0 ] PTR unsigned char 
  6458 ;;		 -> apiFrame(60), 
  6459 ;;  c               2   10[BANK0 ] short 
  6460 ;;  i               2   12[BANK0 ] int 
  6461 ;; Return value:  Size  Location     Type
  6462 ;;                  2    0[BANK0 ] int 
  6463 ;; Registers used:
  6464 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  6465 ;; Tracked objects:
  6466 ;;		On entry : 0/0
  6467 ;;		On exit  : 0/0
  6468 ;;		Unchanged: 0/0
  6469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6470 ;;      Params:         0       7       0       0       0       0       0       0
  6471 ;;      Locals:         0       5       0       0       0       0       0       0
  6472 ;;      Temps:          0       2       0       0       0       0       0       0
  6473 ;;      Totals:         0      14       0       0       0       0       0       0
  6474 ;;Total ram usage:       14 bytes
  6475 ;; Hardware stack levels used:    1
  6476 ;; Hardware stack levels required when called:    2
  6477 ;; This function calls:
  6478 ;;		_UART_Receive
  6479 ;; This function is called by:
  6480 ;;		_XBAPI_HandleFrame
  6481 ;;		_UART_ReceiveMsg
  6482 ;; This function uses a non-reentrant model
  6483 ;;
  6484                           
  6485                           
  6486                           ;psect for function _UART_ReceiveMsgTmo
  6487  0669                     _UART_ReceiveMsgTmo:	
  6488                           
  6489                           ;incstack = 0
  6490                           ; Regs used in _UART_ReceiveMsgTmo: [wreg+fsr1l+fsr1h+status,2+status,0+btemp+1+pclath+c
      +                          stack]
  6491                           ;UART_ReceiveMsgTmo@msg stored from wreg
  6492  0669  0020               	movlb	0	; select bank0
  6493  066A  00A9               	movwf	UART_ReceiveMsgTmo@msg
  6494                           
  6495                           ;uart.c: 71: int i;
  6496                           ;uart.c: 75: for(i=0; i<len; i++) {
  6497  066B  01AC               	clrf	UART_ReceiveMsgTmo@i
  6498  066C  01AD               	clrf	UART_ReceiveMsgTmo@i+1
  6499  066D                     l178:	
  6500  066D  082D               	movf	UART_ReceiveMsgTmo@i+1,w
  6501  066E  3A80               	xorlw	128
  6502  066F  00A7               	movwf	??_UART_ReceiveMsgTmo
  6503  0670  0821               	movf	UART_ReceiveMsgTmo@len+1,w
  6504  0671  3A80               	xorlw	128
  6505  0672  0227               	subwf	??_UART_ReceiveMsgTmo,w
  6506  0673  1D03               	skipz
  6507  0674  2E77               	goto	u2175
  6508  0675  0820               	movf	UART_ReceiveMsgTmo@len,w
  6509  0676  022C               	subwf	UART_ReceiveMsgTmo@i,w
  6510  0677                     u2175:	
  6511  0677  1803               	btfsc	3,0
  6512  0678  2EBA               	goto	l184
  6513                           
  6514                           ;uart.c: 76: short c;
  6515                           ;uart.c: 77: c = UART_Receive(tmo);
  6516  0679  0020               	movlb	0	; select bank0
  6517  067A  0826               	movf	UART_ReceiveMsgTmo@tmo+3,w
  6518  067B  00F4               	movwf	?_UART_Receive+3
  6519  067C  0825               	movf	UART_ReceiveMsgTmo@tmo+2,w
  6520  067D  00F3               	movwf	?_UART_Receive+2
  6521  067E  0824               	movf	UART_ReceiveMsgTmo@tmo+1,w
  6522  067F  00F2               	movwf	?_UART_Receive+1
  6523  0680  0823               	movf	UART_ReceiveMsgTmo@tmo,w
  6524  0681  00F1               	movwf	?_UART_Receive
  6525  0682  3185  25BA  3186   	fcall	_UART_Receive
  6526  0685  0872               	movf	?_UART_Receive+1,w
  6527  0686  0020               	movlb	0	; select bank0
  6528  0687  01AB               	clrf	UART_ReceiveMsgTmo@c+1
  6529  0688  07AB               	addwf	UART_ReceiveMsgTmo@c+1,f
  6530  0689  0871               	movf	?_UART_Receive,w
  6531  068A  01AA               	clrf	UART_ReceiveMsgTmo@c
  6532  068B  07AA               	addwf	UART_ReceiveMsgTmo@c,f
  6533                           
  6534                           ;uart.c: 78: if(c!=0x100) {
  6535  068C  3001               	movlw	1
  6536  068D  062B               	xorwf	UART_ReceiveMsgTmo@c+1,w
  6537  068E  1D03               	skipz
  6538  068F  2E92               	goto	u2145
  6539  0690  3000               	movlw	0
  6540  0691  062A               	xorwf	UART_ReceiveMsgTmo@c,w
  6541  0692                     u2145:	
  6542  0692  1903               	skipnz
  6543  0693  2EA0               	goto	l2726
  6544                           
  6545                           ;uart.c: 79: msg[i] = c;
  6546  0694  082A               	movf	UART_ReceiveMsgTmo@c,w
  6547  0695  00A7               	movwf	??_UART_ReceiveMsgTmo
  6548  0696  082C               	movf	UART_ReceiveMsgTmo@i,w
  6549  0697  0729               	addwf	UART_ReceiveMsgTmo@msg,w
  6550  0698  00A8               	movwf	??_UART_ReceiveMsgTmo+1
  6551  0699  0828               	movf	??_UART_ReceiveMsgTmo+1,w
  6552  069A  0086               	movwf	6
  6553  069B  3001               	movlw	1	; select bank2/3
  6554  069C  0087               	movwf	7
  6555  069D  0827               	movf	??_UART_ReceiveMsgTmo,w
  6556  069E  0081               	movwf	1
  6557                           
  6558                           ;uart.c: 80: } else {
  6559  069F  2EA7               	goto	l2730
  6560  06A0                     l2726:	
  6561                           
  6562                           ;uart.c: 81: return i;
  6563  06A0  082D               	movf	UART_ReceiveMsgTmo@i+1,w
  6564  06A1  01A1               	clrf	?_UART_ReceiveMsgTmo+1
  6565  06A2  07A1               	addwf	?_UART_ReceiveMsgTmo+1,f
  6566  06A3  082C               	movf	UART_ReceiveMsgTmo@i,w
  6567  06A4  01A0               	clrf	?_UART_ReceiveMsgTmo
  6568  06A5  07A0               	addwf	?_UART_ReceiveMsgTmo,f
  6569  06A6  0008               	return
  6570  06A7                     l2730:	
  6571                           
  6572                           ;uart.c: 82: }
  6573                           ;uart.c: 84: if(msg[i] == end_char && end_char) {
  6574  06A7  082C               	movf	UART_ReceiveMsgTmo@i,w
  6575  06A8  0729               	addwf	UART_ReceiveMsgTmo@msg,w
  6576  06A9  00A7               	movwf	??_UART_ReceiveMsgTmo
  6577  06AA  0827               	movf	??_UART_ReceiveMsgTmo,w
  6578  06AB  0086               	movwf	6
  6579  06AC  3001               	movlw	1	; select bank2/3
  6580  06AD  0087               	movwf	7
  6581  06AE  0801               	movf	1,w
  6582  06AF  0622               	xorwf	UART_ReceiveMsgTmo@end_char,w
  6583  06B0  1D03               	skipz
  6584  06B1  2EB5               	goto	l2736
  6585  06B2  0822               	movf	UART_ReceiveMsgTmo@end_char,w
  6586  06B3  1D03               	skipz
  6587                           
  6588                           ;uart.c: 85: break;
  6589  06B4  2EBA               	goto	l184
  6590  06B5                     l2736:	
  6591  06B5  3001               	movlw	1
  6592  06B6  07AC               	addwf	UART_ReceiveMsgTmo@i,f
  6593  06B7  3000               	movlw	0
  6594  06B8  3DAD               	addwfc	UART_ReceiveMsgTmo@i+1,f
  6595  06B9  2E6D               	goto	l178
  6596  06BA                     l184:	
  6597                           
  6598                           ;uart.c: 86: }
  6599                           ;uart.c: 87: }
  6600                           ;uart.c: 89: SWDTEN = 0;
  6601  06BA  0021               	movlb	1	; select bank1
  6602  06BB  1017               	bcf	23,0	;volatile
  6603  06BC  0008               	return
  6604  06BD                     __end_of_UART_ReceiveMsgTmo:	
  6605                           
  6606                           	psect	text32
  6607  05BA                     __ptext32:	
  6608 ;; *************** function _UART_Receive *****************
  6609 ;; Defined at:
  6610 ;;		line 43 in file "uart.c"
  6611 ;; Parameters:    Size  Location     Type
  6612 ;;  tmo             4    1[COMMON] long 
  6613 ;; Auto vars:     Size  Location     Type
  6614 ;;  i               4    7[COMMON] long 
  6615 ;; Return value:  Size  Location     Type
  6616 ;;                  2    1[COMMON] short 
  6617 ;; Registers used:
  6618 ;;		wreg, btemp+1
  6619 ;; Tracked objects:
  6620 ;;		On entry : 0/0
  6621 ;;		On exit  : 0/0
  6622 ;;		Unchanged: 0/0
  6623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6624 ;;      Params:         4       0       0       0       0       0       0       0
  6625 ;;      Locals:         4       0       0       0       0       0       0       0
  6626 ;;      Temps:          2       0       0       0       0       0       0       0
  6627 ;;      Totals:        10       0       0       0       0       0       0       0
  6628 ;;Total ram usage:       10 bytes
  6629 ;; Hardware stack levels used:    1
  6630 ;; Hardware stack levels required when called:    1
  6631 ;; This function calls:
  6632 ;;		Nothing
  6633 ;; This function is called by:
  6634 ;;		_UART_ReceiveMsgTmo
  6635 ;; This function uses a non-reentrant model
  6636 ;;
  6637                           
  6638                           
  6639                           ;psect for function _UART_Receive
  6640  05BA                     _UART_Receive:	
  6641  05BA                     l164:	
  6642                           ;uart.c: 44: while(!OSCSTATbits.OSTS) {}
  6643                           
  6644                           ;incstack = 0
  6645                           ; Regs used in _UART_Receive: [wreg+btemp+1]
  6646                           
  6647  05BA  0021               	movlb	1	; select bank1
  6648  05BB  1E9A               	btfss	26,5	;volatile
  6649  05BC  2DBA               	goto	l164
  6650                           
  6651                           ;uart.c: 45: long i=0;
  6652  05BD  3000               	movlw	0
  6653  05BE  00FA               	movwf	UART_Receive@i+3
  6654  05BF  3000               	movlw	0
  6655  05C0  00F9               	movwf	UART_Receive@i+2
  6656  05C1  3000               	movlw	0
  6657  05C2  00F8               	movwf	UART_Receive@i+1
  6658  05C3  3000               	movlw	0
  6659  05C4  00F7               	movwf	UART_Receive@i
  6660  05C5                     l167:	
  6661                           ;uart.c: 47: while(!PIR1bits.RCIF) {i++; if(tmo && i>=tmo) {break;} }
  6662                           
  6663  05C5  0020               	movlb	0	; select bank0
  6664  05C6  1A91               	btfsc	17,5	;volatile
  6665  05C7  2DEA               	goto	l2138
  6666  05C8  3001               	movlw	1
  6667  05C9  07F7               	addwf	UART_Receive@i,f
  6668  05CA  3000               	movlw	0
  6669  05CB  3DF8               	addwfc	UART_Receive@i+1,f
  6670  05CC  3000               	movlw	0
  6671  05CD  3DF9               	addwfc	UART_Receive@i+2,f
  6672  05CE  3000               	movlw	0
  6673  05CF  3DFA               	addwfc	UART_Receive@i+3,f
  6674  05D0  0874               	movf	UART_Receive@tmo+3,w
  6675  05D1  0473               	iorwf	UART_Receive@tmo+2,w
  6676  05D2  0472               	iorwf	UART_Receive@tmo+1,w
  6677  05D3  0471               	iorwf	UART_Receive@tmo,w
  6678  05D4  1903               	skipnz
  6679  05D5  2DC5               	goto	l167
  6680  05D6  087A               	movf	UART_Receive@i+3,w
  6681  05D7  3A80               	xorlw	128
  6682  05D8  00FF               	movwf	127
  6683  05D9  0874               	movf	UART_Receive@tmo+3,w
  6684  05DA  3A80               	xorlw	128
  6685  05DB  027F               	subwf	127,w
  6686  05DC  1D03               	skipz
  6687  05DD  2DE8               	goto	u1413
  6688  05DE  0873               	movf	UART_Receive@tmo+2,w
  6689  05DF  0279               	subwf	UART_Receive@i+2,w
  6690  05E0  1D03               	skipz
  6691  05E1  2DE8               	goto	u1413
  6692  05E2  0872               	movf	UART_Receive@tmo+1,w
  6693  05E3  0278               	subwf	UART_Receive@i+1,w
  6694  05E4  1D03               	skipz
  6695  05E5  2DE8               	goto	u1413
  6696  05E6  0871               	movf	UART_Receive@tmo,w
  6697  05E7  0277               	subwf	UART_Receive@i,w
  6698  05E8                     u1413:	
  6699  05E8  1C03               	skipc
  6700  05E9  2DC5               	goto	l167
  6701  05EA                     l2138:	
  6702                           
  6703                           ;uart.c: 49: return (i<tmo || !tmo) ? RC1REG : 0x100;
  6704  05EA  087A               	movf	UART_Receive@i+3,w
  6705  05EB  3A80               	xorlw	128
  6706  05EC  00FF               	movwf	127
  6707  05ED  0874               	movf	UART_Receive@tmo+3,w
  6708  05EE  3A80               	xorlw	128
  6709  05EF  027F               	subwf	127,w
  6710  05F0  1D03               	skipz
  6711  05F1  2DFC               	goto	u1433
  6712  05F2  0873               	movf	UART_Receive@tmo+2,w
  6713  05F3  0279               	subwf	UART_Receive@i+2,w
  6714  05F4  1D03               	skipz
  6715  05F5  2DFC               	goto	u1433
  6716  05F6  0872               	movf	UART_Receive@tmo+1,w
  6717  05F7  0278               	subwf	UART_Receive@i+1,w
  6718  05F8  1D03               	skipz
  6719  05F9  2DFC               	goto	u1433
  6720  05FA  0871               	movf	UART_Receive@tmo,w
  6721  05FB  0277               	subwf	UART_Receive@i,w
  6722  05FC                     u1433:	
  6723  05FC  1C03               	skipc
  6724  05FD  2E09               	goto	l2144
  6725  05FE  0874               	movf	UART_Receive@tmo+3,w
  6726  05FF  0473               	iorwf	UART_Receive@tmo+2,w
  6727  0600  0472               	iorwf	UART_Receive@tmo+1,w
  6728  0601  0471               	iorwf	UART_Receive@tmo,w
  6729  0602  1903               	skipnz
  6730  0603  2E09               	goto	l2144
  6731  0604  3000               	movlw	0
  6732  0605  00F1               	movwf	?_UART_Receive
  6733  0606  3001               	movlw	1
  6734  0607  00F2               	movwf	?_UART_Receive+1
  6735  0608  0008               	return
  6736  0609                     l2144:	
  6737  0609  0023               	movlb	3	; select bank3
  6738  060A  0819               	movf	25,w	;volatile
  6739  060B  00F5               	movwf	??_UART_Receive
  6740  060C  01F6               	clrf	??_UART_Receive+1
  6741  060D  0875               	movf	??_UART_Receive,w
  6742  060E  00F1               	movwf	?_UART_Receive
  6743  060F  0876               	movf	??_UART_Receive+1,w
  6744  0610  00F2               	movwf	?_UART_Receive+1
  6745  0611  0008               	return
  6746  0612                     __end_of_UART_Receive:	
  6747                           
  6748                           	psect	text33
  6749  0EE2                     __ptext33:	
  6750 ;; *************** function _EEPROM_Write *****************
  6751 ;; Defined at:
  6752 ;;		line 18 in file "eeprom.c"
  6753 ;; Parameters:    Size  Location     Type
  6754 ;;  address         1    wreg     unsigned char 
  6755 ;;  data            1    1[COMMON] PTR unsigned char 
  6756 ;;		 -> intervalData(4), calibrationData(6), 
  6757 ;;  length          2    2[COMMON] int 
  6758 ;; Auto vars:     Size  Location     Type
  6759 ;;  address         1    5[COMMON] unsigned char 
  6760 ;;  i               1    6[COMMON] unsigned char 
  6761 ;; Return value:  Size  Location     Type
  6762 ;;		None               void
  6763 ;; Registers used:
  6764 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6765 ;; Tracked objects:
  6766 ;;		On entry : 0/0
  6767 ;;		On exit  : 0/0
  6768 ;;		Unchanged: 0/0
  6769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6770 ;;      Params:         3       0       0       0       0       0       0       0
  6771 ;;      Locals:         2       0       0       0       0       0       0       0
  6772 ;;      Temps:          1       0       0       0       0       0       0       0
  6773 ;;      Totals:         6       0       0       0       0       0       0       0
  6774 ;;Total ram usage:        6 bytes
  6775 ;; Hardware stack levels used:    1
  6776 ;; Hardware stack levels required when called:    1
  6777 ;; This function calls:
  6778 ;;		Nothing
  6779 ;; This function is called by:
  6780 ;;		_main
  6781 ;; This function uses a non-reentrant model
  6782 ;;
  6783                           
  6784                           
  6785                           ;psect for function _EEPROM_Write
  6786  0EE2                     _EEPROM_Write:	
  6787                           
  6788                           ;incstack = 0
  6789                           ; Regs used in _EEPROM_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  6790                           ;EEPROM_Write@address stored from wreg
  6791  0EE2  00F5               	movwf	EEPROM_Write@address
  6792                           
  6793                           ;eeprom.c: 19: unsigned char i;
  6794                           ;eeprom.c: 20: for(i=0; i<length; i++) {
  6795  0EE3  01F6               	clrf	EEPROM_Write@i
  6796  0EE4                     l1882:	
  6797  0EE4  0873               	movf	EEPROM_Write@length+1,w
  6798  0EE5  3A80               	xorlw	128
  6799  0EE6  3C80               	sublw	128
  6800  0EE7  1D03               	skipz
  6801  0EE8  2EEB               	goto	u1085
  6802  0EE9  0872               	movf	EEPROM_Write@length,w
  6803  0EEA  0276               	subwf	EEPROM_Write@i,w
  6804  0EEB                     u1085:	
  6805  0EEB  1803               	btfsc	3,0
  6806  0EEC  2F0A               	goto	l369
  6807                           
  6808                           ;eeprom.c: 21: EEADRL = address+i;
  6809  0EED  0875               	movf	EEPROM_Write@address,w
  6810  0EEE  0776               	addwf	EEPROM_Write@i,w
  6811  0EEF  0023               	movlb	3	; select bank3
  6812  0EF0  0091               	movwf	17	;volatile
  6813                           
  6814                           ;eeprom.c: 22: EEDATL = data[i];
  6815  0EF1  0876               	movf	EEPROM_Write@i,w
  6816  0EF2  0771               	addwf	EEPROM_Write@data,w
  6817  0EF3  00F4               	movwf	??_EEPROM_Write
  6818  0EF4  0874               	movf	??_EEPROM_Write,w
  6819  0EF5  0086               	movwf	6
  6820  0EF6  0187               	clrf	7
  6821  0EF7  0801               	movf	1,w
  6822  0EF8  0093               	movwf	19	;volatile
  6823                           
  6824                           ;eeprom.c: 24: EECON1bits.WREN = 1;
  6825  0EF9  1515               	bsf	21,2	;volatile
  6826                           
  6827                           ;eeprom.c: 25: EECON2 = 0x55;
  6828  0EFA  3055               	movlw	85
  6829  0EFB  0096               	movwf	22	;volatile
  6830                           
  6831                           ;eeprom.c: 26: EECON2 = 0xAA;
  6832  0EFC  30AA               	movlw	170
  6833  0EFD  0096               	movwf	22	;volatile
  6834                           
  6835                           ;eeprom.c: 27: EECON1bits.WR = 1;
  6836  0EFE  1495               	bsf	21,1	;volatile
  6837  0EFF                     l366:	
  6838                           ;eeprom.c: 30: while(!PIR2bits.EEIF) {}
  6839                           
  6840  0EFF  0020               	movlb	0	; select bank0
  6841  0F00  1E12               	btfss	18,4	;volatile
  6842  0F01  2EFF               	goto	l366
  6843                           
  6844                           ;eeprom.c: 31: PIR2bits.EEIF = 0;
  6845  0F02  1212               	bcf	18,4	;volatile
  6846                           
  6847                           ;eeprom.c: 32: EECON1bits.WREN = 0;
  6848  0F03  0023               	movlb	3	; select bank3
  6849  0F04  1115               	bcf	21,2	;volatile
  6850  0F05  3001               	movlw	1
  6851  0F06  00F4               	movwf	??_EEPROM_Write
  6852  0F07  0874               	movf	??_EEPROM_Write,w
  6853  0F08  07F6               	addwf	EEPROM_Write@i,f
  6854  0F09  2EE4               	goto	l1882
  6855  0F0A                     l369:	
  6856                           
  6857                           ;eeprom.c: 33: }
  6858                           ;eeprom.c: 35: EECON1bits.WREN = 0;
  6859  0F0A  0023               	movlb	3	; select bank3
  6860  0F0B  1115               	bcf	21,2	;volatile
  6861  0F0C  0008               	return
  6862  0F0D                     __end_of_EEPROM_Write:	
  6863                           
  6864                           	psect	text34
  6865  0DCE                     __ptext34:	
  6866 ;; *************** function _memset *****************
  6867 ;; Defined at:
  6868 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\common\memset.c"
  6869 ;; Parameters:    Size  Location     Type
  6870 ;;  p1              1    wreg     PTR void 
  6871 ;;		 -> calibrationData(6), 
  6872 ;;  c               2    1[COMMON] int 
  6873 ;;  n               2    3[COMMON] unsigned int 
  6874 ;; Auto vars:     Size  Location     Type
  6875 ;;  p1              1    6[COMMON] PTR void 
  6876 ;;		 -> calibrationData(6), 
  6877 ;;  p               1    7[COMMON] PTR unsigned char 
  6878 ;;		 -> calibrationData(6), 
  6879 ;; Return value:  Size  Location     Type
  6880 ;;                  1    wreg      PTR void 
  6881 ;; Registers used:
  6882 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6883 ;; Tracked objects:
  6884 ;;		On entry : 0/0
  6885 ;;		On exit  : 0/0
  6886 ;;		Unchanged: 0/0
  6887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6888 ;;      Params:         4       0       0       0       0       0       0       0
  6889 ;;      Locals:         2       0       0       0       0       0       0       0
  6890 ;;      Temps:          1       0       0       0       0       0       0       0
  6891 ;;      Totals:         7       0       0       0       0       0       0       0
  6892 ;;Total ram usage:        7 bytes
  6893 ;; Hardware stack levels used:    1
  6894 ;; Hardware stack levels required when called:    1
  6895 ;; This function calls:
  6896 ;;		Nothing
  6897 ;; This function is called by:
  6898 ;;		_main
  6899 ;; This function uses a non-reentrant model
  6900 ;;
  6901                           
  6902                           
  6903                           ;psect for function _memset
  6904  0DCE                     _memset:	
  6905                           
  6906                           ;incstack = 0
  6907                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  6908                           ;memset@p1 stored from wreg
  6909  0DCE  00F6               	movwf	memset@p1
  6910  0DCF  0876               	movf	memset@p1,w
  6911  0DD0  00F5               	movwf	??_memset
  6912  0DD1  0875               	movf	??_memset,w
  6913  0DD2  00F7               	movwf	memset@p
  6914  0DD3                     l1864:	
  6915  0DD3  3001               	movlw	1
  6916  0DD4  02F3               	subwf	memset@n,f
  6917  0DD5  3000               	movlw	0
  6918  0DD6  3BF4               	subwfb	memset@n+1,f
  6919  0DD7  30FF               	movlw	255
  6920  0DD8  0674               	xorwf	memset@n+1,w
  6921  0DD9  1D03               	skipz
  6922  0DDA  2DDD               	goto	u1065
  6923  0DDB  30FF               	movlw	255
  6924  0DDC  0673               	xorwf	memset@n,w
  6925  0DDD                     u1065:	
  6926  0DDD  1903               	btfsc	3,2
  6927  0DDE  0008               	return
  6928  0DDF  0871               	movf	memset@c,w
  6929  0DE0  00F5               	movwf	??_memset
  6930  0DE1  0877               	movf	memset@p,w
  6931  0DE2  0086               	movwf	6
  6932  0DE3  0187               	clrf	7
  6933  0DE4  0875               	movf	??_memset,w
  6934  0DE5  0081               	movwf	1
  6935  0DE6  3001               	movlw	1
  6936  0DE7  00F5               	movwf	??_memset
  6937  0DE8  0875               	movf	??_memset,w
  6938  0DE9  07F7               	addwf	memset@p,f
  6939  0DEA  2DD3               	goto	l1864
  6940  0DEB                     __end_of_memset:	
  6941                           ;	Return value of _memset is never used
  6942                           
  6943                           
  6944                           	psect	text35
  6945  0E08                     __ptext35:	
  6946 ;; *************** function _EEPROM_Read *****************
  6947 ;; Defined at:
  6948 ;;		line 6 in file "eeprom.c"
  6949 ;; Parameters:    Size  Location     Type
  6950 ;;  address         1    wreg     unsigned char 
  6951 ;;  data            1    1[COMMON] PTR unsigned char 
  6952 ;;		 -> intervalData(4), calibrationData(6), 
  6953 ;;  length          2    2[COMMON] int 
  6954 ;; Auto vars:     Size  Location     Type
  6955 ;;  address         1    6[COMMON] unsigned char 
  6956 ;;  i               1    7[COMMON] unsigned char 
  6957 ;; Return value:  Size  Location     Type
  6958 ;;		None               void
  6959 ;; Registers used:
  6960 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6961 ;; Tracked objects:
  6962 ;;		On entry : 0/0
  6963 ;;		On exit  : 0/0
  6964 ;;		Unchanged: 0/0
  6965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6966 ;;      Params:         3       0       0       0       0       0       0       0
  6967 ;;      Locals:         2       0       0       0       0       0       0       0
  6968 ;;      Temps:          2       0       0       0       0       0       0       0
  6969 ;;      Totals:         7       0       0       0       0       0       0       0
  6970 ;;Total ram usage:        7 bytes
  6971 ;; Hardware stack levels used:    1
  6972 ;; Hardware stack levels required when called:    1
  6973 ;; This function calls:
  6974 ;;		Nothing
  6975 ;; This function is called by:
  6976 ;;		_main
  6977 ;; This function uses a non-reentrant model
  6978 ;;
  6979                           
  6980                           
  6981                           ;psect for function _EEPROM_Read
  6982  0E08                     _EEPROM_Read:	
  6983                           
  6984                           ;incstack = 0
  6985                           ; Regs used in _EEPROM_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  6986                           ;EEPROM_Read@address stored from wreg
  6987  0E08  00F6               	movwf	EEPROM_Read@address
  6988                           
  6989                           ;eeprom.c: 7: unsigned char i;
  6990                           ;eeprom.c: 8: for(i=0; i<length; i++) {
  6991  0E09  01F7               	clrf	EEPROM_Read@i
  6992  0E0A                     l1856:	
  6993  0E0A  0873               	movf	EEPROM_Read@length+1,w
  6994  0E0B  3A80               	xorlw	128
  6995  0E0C  3C80               	sublw	128
  6996  0E0D  1D03               	skipz
  6997  0E0E  2E11               	goto	u1055
  6998  0E0F  0872               	movf	EEPROM_Read@length,w
  6999  0E10  0277               	subwf	EEPROM_Read@i,w
  7000  0E11                     u1055:	
  7001  0E11  1803               	btfsc	3,0
  7002  0E12  0008               	return
  7003                           
  7004                           ;eeprom.c: 9: EEADRL = address+i;
  7005  0E13  0876               	movf	EEPROM_Read@address,w
  7006  0E14  0777               	addwf	EEPROM_Read@i,w
  7007  0E15  0023               	movlb	3	; select bank3
  7008  0E16  0091               	movwf	17	;volatile
  7009                           
  7010                           ;eeprom.c: 10: EECON1bits.EEPGD = 0;
  7011  0E17  1395               	bcf	21,7	;volatile
  7012                           
  7013                           ;eeprom.c: 11: EECON1bits.CFGS = 0;
  7014  0E18  1315               	bcf	21,6	;volatile
  7015                           
  7016                           ;eeprom.c: 12: EECON1bits.RD = 1;
  7017  0E19  1415               	bsf	21,0	;volatile
  7018                           
  7019                           ;eeprom.c: 13: data[i] = EEDATL;
  7020  0E1A  0813               	movf	19,w	;volatile
  7021  0E1B  00F4               	movwf	??_EEPROM_Read
  7022  0E1C  0877               	movf	EEPROM_Read@i,w
  7023  0E1D  0771               	addwf	EEPROM_Read@data,w
  7024  0E1E  00F5               	movwf	??_EEPROM_Read+1
  7025  0E1F  0875               	movf	??_EEPROM_Read+1,w
  7026  0E20  0086               	movwf	6
  7027  0E21  0187               	clrf	7
  7028  0E22  0874               	movf	??_EEPROM_Read,w
  7029  0E23  0081               	movwf	1
  7030  0E24  3001               	movlw	1
  7031  0E25  00F4               	movwf	??_EEPROM_Read
  7032  0E26  0874               	movf	??_EEPROM_Read,w
  7033  0E27  07F7               	addwf	EEPROM_Read@i,f
  7034  0E28  2E0A               	goto	l1856
  7035  0E29                     __end_of_EEPROM_Read:	
  7036                           
  7037                           	psect	text36
  7038  07EC                     __ptext36:	
  7039 ;; *************** function _pulseLed *****************
  7040 ;; Defined at:
  7041 ;;		line 32 in file "main.c"
  7042 ;; Parameters:    Size  Location     Type
  7043 ;;  ticks           2    1[BANK0 ] int 
  7044 ;; Auto vars:     Size  Location     Type
  7045 ;;		None
  7046 ;; Return value:  Size  Location     Type
  7047 ;;		None               void
  7048 ;; Registers used:
  7049 ;;		wreg, status,2, status,0, pclath, cstack
  7050 ;; Tracked objects:
  7051 ;;		On entry : 0/0
  7052 ;;		On exit  : 0/0
  7053 ;;		Unchanged: 0/0
  7054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7055 ;;      Params:         0       2       0       0       0       0       0       0
  7056 ;;      Locals:         0       0       0       0       0       0       0       0
  7057 ;;      Temps:          0       0       0       0       0       0       0       0
  7058 ;;      Totals:         0       2       0       0       0       0       0       0
  7059 ;;Total ram usage:        2 bytes
  7060 ;; Hardware stack levels used:    1
  7061 ;; Hardware stack levels required when called:    3
  7062 ;; This function calls:
  7063 ;;		_timer1_poll_delay
  7064 ;; This function is called by:
  7065 ;;		_main
  7066 ;; This function uses a non-reentrant model
  7067 ;;
  7068                           
  7069                           
  7070                           ;psect for function _pulseLed
  7071  07EC                     _pulseLed:	
  7072                           
  7073                           ;main.c: 33: PORTCbits.RC3 = 1;
  7074                           
  7075                           ;incstack = 0
  7076                           ; Regs used in _pulseLed: [wreg+status,2+status,0+pclath+cstack]
  7077  07EC  0020               	movlb	0	; select bank0
  7078  07ED  158E               	bsf	14,3	;volatile
  7079                           
  7080                           ;main.c: 34: timer1_poll_delay(ticks, 3);
  7081  07EE  0822               	movf	pulseLed@ticks+1,w
  7082  07EF  01F8               	clrf	?_timer1_poll_delay+1
  7083  07F0  07F8               	addwf	?_timer1_poll_delay+1,f
  7084  07F1  0821               	movf	pulseLed@ticks,w
  7085  07F2  01F7               	clrf	?_timer1_poll_delay
  7086  07F3  07F7               	addwf	?_timer1_poll_delay,f
  7087  07F4  3003               	movlw	3
  7088  07F5  00F9               	movwf	?_timer1_poll_delay+2
  7089  07F6  3000               	movlw	0
  7090  07F7  00FA               	movwf	?_timer1_poll_delay+3
  7091  07F8  3180  2011         	fcall	_timer1_poll_delay
  7092                           
  7093                           ;main.c: 35: PORTCbits.RC3 = 0;
  7094  07FA  0020               	movlb	0	; select bank0
  7095  07FB  118E               	bcf	14,3	;volatile
  7096  07FC  0008               	return
  7097  07FD                     __end_of_pulseLed:	
  7098                           
  7099                           	psect	text37
  7100  0011                     __ptext37:	
  7101 ;; *************** function _timer1_poll_delay *****************
  7102 ;; Defined at:
  7103 ;;		line 17 in file "timer.c"
  7104 ;; Parameters:    Size  Location     Type
  7105 ;;  ticks           2    7[COMMON] unsigned short 
  7106 ;;  division        2    9[COMMON] int 
  7107 ;; Auto vars:     Size  Location     Type
  7108 ;;  tmr1_turned_    1    0[BANK0 ] unsigned char 
  7109 ;; Return value:  Size  Location     Type
  7110 ;;		None               void
  7111 ;; Registers used:
  7112 ;;		wreg, status,2, status,0, pclath, cstack
  7113 ;; Tracked objects:
  7114 ;;		On entry : 0/0
  7115 ;;		On exit  : 0/0
  7116 ;;		Unchanged: 0/0
  7117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7118 ;;      Params:         4       0       0       0       0       0       0       0
  7119 ;;      Locals:         0       1       0       0       0       0       0       0
  7120 ;;      Temps:          1       0       0       0       0       0       0       0
  7121 ;;      Totals:         5       1       0       0       0       0       0       0
  7122 ;;Total ram usage:        6 bytes
  7123 ;; Hardware stack levels used:    1
  7124 ;; Hardware stack levels required when called:    2
  7125 ;; This function calls:
  7126 ;;		_Timer1_Init
  7127 ;;		_Timer1_Disable
  7128 ;; This function is called by:
  7129 ;;		_pulseLed
  7130 ;;		_timer1_poll_delay_ms
  7131 ;;		_ADC_ReadOne
  7132 ;; This function uses a non-reentrant model
  7133 ;;
  7134                           
  7135                           
  7136                           ;psect for function _timer1_poll_delay
  7137  0011                     _timer1_poll_delay:	
  7138                           
  7139                           ;timer.c: 21: Timer1_Disable();
  7140                           
  7141                           ;incstack = 0
  7142                           ; Regs used in _timer1_poll_delay: [wreg+status,2+status,0+pclath+cstack]
  7143  0011  318D  2530  3180   	fcall	_Timer1_Disable
  7144                           
  7145                           ;timer.c: 23: TMR1 = 0;
  7146  0014  0020               	movlb	0	; select bank0
  7147  0015  0196               	clrf	22	;volatile
  7148  0016  0197               	clrf	23	;volatile
  7149                           
  7150                           ;timer.c: 25: Timer1_Init(1, division);
  7151  0017  3001               	movlw	1
  7152  0018  00F1               	movwf	?_Timer1_Init
  7153  0019  3000               	movlw	0
  7154  001A  00F2               	movwf	?_Timer1_Init+1
  7155  001B  087A               	movf	timer1_poll_delay@division+1,w
  7156  001C  01F4               	clrf	?_Timer1_Init+3
  7157  001D  07F4               	addwf	?_Timer1_Init+3,f
  7158  001E  0879               	movf	timer1_poll_delay@division,w
  7159  001F  01F3               	clrf	?_Timer1_Init+2
  7160  0020  07F3               	addwf	?_Timer1_Init+2,f
  7161  0021  318D  256D  3180   	fcall	_Timer1_Init
  7162                           
  7163                           ;timer.c: 27: unsigned char tmr1_turned_on = 0;
  7164  0024  0020               	movlb	0	; select bank0
  7165  0025  01A0               	clrf	timer1_poll_delay@tmr1_turned_on
  7166  0026                     l2454:	
  7167                           ;timer.c: 29: while(tmr1_turned_on < 3) {
  7168                           
  7169  0026  3003               	movlw	3
  7170  0027  0220               	subwf	timer1_poll_delay@tmr1_turned_on,w
  7171  0028  1803               	btfsc	3,0
  7172  0029  2848               	goto	l2456
  7173                           
  7174                           ;timer.c: 32: if(T1CONbits.TMR1ON == 0) {
  7175  002A  1818               	btfsc	24,0	;volatile
  7176  002B  2840               	goto	l2450
  7177                           
  7178                           ;timer.c: 34: Timer1_Init(1, division);
  7179  002C  3001               	movlw	1
  7180  002D  00F1               	movwf	?_Timer1_Init
  7181  002E  3000               	movlw	0
  7182  002F  00F2               	movwf	?_Timer1_Init+1
  7183  0030  087A               	movf	timer1_poll_delay@division+1,w
  7184  0031  01F4               	clrf	?_Timer1_Init+3
  7185  0032  07F4               	addwf	?_Timer1_Init+3,f
  7186  0033  0879               	movf	timer1_poll_delay@division,w
  7187  0034  01F3               	clrf	?_Timer1_Init+2
  7188  0035  07F3               	addwf	?_Timer1_Init+2,f
  7189  0036  318D  256D  3180   	fcall	_Timer1_Init
  7190                           
  7191                           ;timer.c: 35: TMR1 = 0;
  7192  0039  0020               	movlb	0	; select bank0
  7193  003A  0196               	clrf	22	;volatile
  7194  003B  0197               	clrf	23	;volatile
  7195                           
  7196                           ;timer.c: 36: tmr1_turned_on ++;
  7197  003C  3001               	movlw	1
  7198  003D  00FB               	movwf	??_timer1_poll_delay
  7199  003E  087B               	movf	??_timer1_poll_delay,w
  7200  003F  07A0               	addwf	timer1_poll_delay@tmr1_turned_on,f
  7201  0040                     l2450:	
  7202                           
  7203                           ;timer.c: 37: }
  7204                           ;timer.c: 39: if(TMR1 >= ticks) {
  7205  0040  0878               	movf	timer1_poll_delay@ticks+1,w
  7206  0041  0217               	subwf	23,w	;volatile
  7207  0042  1D03               	skipz
  7208  0043  2846               	goto	u1925
  7209  0044  0877               	movf	timer1_poll_delay@ticks,w
  7210  0045  0216               	subwf	22,w	;volatile
  7211  0046                     u1925:	
  7212  0046  1C03               	skipc
  7213  0047  2826               	goto	l2454
  7214  0048                     l2456:	
  7215                           ;timer.c: 40: break;
  7216                           
  7217                           
  7218                           ;timer.c: 41: }
  7219                           ;timer.c: 42: }
  7220                           ;timer.c: 44: if(tmr1_turned_on >= 3) {
  7221  0048  3003               	movlw	3
  7222  0049  0220               	subwf	timer1_poll_delay@tmr1_turned_on,w
  7223  004A  1C03               	skipc
  7224  004B  284F               	goto	l2460
  7225                           
  7226                           ;timer.c: 45: tmr1_err = 1;
  7227  004C  0021               	movlb	1	; select bank1
  7228  004D  01AB               	clrf	_tmr1_err^(0+128)
  7229  004E  0AAB               	incf	_tmr1_err^(0+128),f
  7230  004F                     l2460:	
  7231                           
  7232                           ;timer.c: 46: }
  7233                           ;timer.c: 48: Timer1_Disable();
  7234  004F  318D  2530         	fcall	_Timer1_Disable
  7235  0051  0008               	return
  7236  0052                     __end_of_timer1_poll_delay:	
  7237                           
  7238                           	psect	text38
  7239  0D30                     __ptext38:	
  7240 ;; *************** function _Timer1_Disable *****************
  7241 ;; Defined at:
  7242 ;;		line 67 in file "timer.c"
  7243 ;; Parameters:    Size  Location     Type
  7244 ;;		None
  7245 ;; Auto vars:     Size  Location     Type
  7246 ;;		None
  7247 ;; Return value:  Size  Location     Type
  7248 ;;		None               void
  7249 ;; Registers used:
  7250 ;;		None
  7251 ;; Tracked objects:
  7252 ;;		On entry : 0/0
  7253 ;;		On exit  : 0/0
  7254 ;;		Unchanged: 0/0
  7255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7256 ;;      Params:         0       0       0       0       0       0       0       0
  7257 ;;      Locals:         0       0       0       0       0       0       0       0
  7258 ;;      Temps:          0       0       0       0       0       0       0       0
  7259 ;;      Totals:         0       0       0       0       0       0       0       0
  7260 ;;Total ram usage:        0 bytes
  7261 ;; Hardware stack levels used:    1
  7262 ;; Hardware stack levels required when called:    1
  7263 ;; This function calls:
  7264 ;;		Nothing
  7265 ;; This function is called by:
  7266 ;;		_timer1_poll_delay
  7267 ;; This function uses a non-reentrant model
  7268 ;;
  7269                           
  7270                           
  7271                           ;psect for function _Timer1_Disable
  7272  0D30                     _Timer1_Disable:	
  7273                           
  7274                           ;timer.c: 68: T1CONbits.TMR1ON = 0;
  7275                           
  7276                           ;incstack = 0
  7277                           ; Regs used in _Timer1_Disable: []
  7278  0D30  0020               	movlb	0	; select bank0
  7279  0D31  1018               	bcf	24,0	;volatile
  7280  0D32  0008               	return
  7281  0D33                     __end_of_Timer1_Disable:	
  7282                           
  7283                           	psect	text39
  7284  0D6D                     __ptext39:	
  7285 ;; *************** function _Timer1_Init *****************
  7286 ;; Defined at:
  7287 ;;		line 5 in file "timer.c"
  7288 ;; Parameters:    Size  Location     Type
  7289 ;;  tmr1cs          2    1[COMMON] int 
  7290 ;;  t1ckps          2    3[COMMON] int 
  7291 ;; Auto vars:     Size  Location     Type
  7292 ;;		None
  7293 ;; Return value:  Size  Location     Type
  7294 ;;		None               void
  7295 ;; Registers used:
  7296 ;;		wreg, status,2, status,0
  7297 ;; Tracked objects:
  7298 ;;		On entry : 0/0
  7299 ;;		On exit  : 0/0
  7300 ;;		Unchanged: 0/0
  7301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7302 ;;      Params:         4       0       0       0       0       0       0       0
  7303 ;;      Locals:         0       0       0       0       0       0       0       0
  7304 ;;      Temps:          1       0       0       0       0       0       0       0
  7305 ;;      Totals:         5       0       0       0       0       0       0       0
  7306 ;;Total ram usage:        5 bytes
  7307 ;; Hardware stack levels used:    1
  7308 ;; Hardware stack levels required when called:    1
  7309 ;; This function calls:
  7310 ;;		Nothing
  7311 ;; This function is called by:
  7312 ;;		_timer1_poll_delay
  7313 ;; This function uses a non-reentrant model
  7314 ;;
  7315                           
  7316                           
  7317                           ;psect for function _Timer1_Init
  7318  0D6D                     _Timer1_Init:	
  7319                           
  7320                           ;timer.c: 6: T1CONbits.TMR1CS = tmr1cs;
  7321                           
  7322                           ;incstack = 0
  7323                           ; Regs used in _Timer1_Init: [wreg+status,2+status,0]
  7324  0D6D  0871               	movf	Timer1_Init@tmr1cs,w
  7325  0D6E  00F5               	movwf	??_Timer1_Init
  7326  0D6F  0EF5               	swapf	??_Timer1_Init,f
  7327  0D70  0DF5               	rlf	??_Timer1_Init,f
  7328  0D71  0DF5               	rlf	??_Timer1_Init,f
  7329  0D72  0020               	movlb	0	; select bank0
  7330  0D73  0818               	movf	24,w	;volatile
  7331  0D74  0675               	xorwf	??_Timer1_Init,w
  7332  0D75  393F               	andlw	-193
  7333  0D76  0675               	xorwf	??_Timer1_Init,w
  7334  0D77  0098               	movwf	24	;volatile
  7335                           
  7336                           ;timer.c: 7: T1CONbits.TMR1ON = 1;
  7337  0D78  1418               	bsf	24,0	;volatile
  7338                           
  7339                           ;timer.c: 8: T1GCONbits.TMR1GE = 0;
  7340  0D79  1399               	bcf	25,7	;volatile
  7341                           
  7342                           ;timer.c: 10: T1CONbits.T1CKPS = t1ckps;
  7343  0D7A  0873               	movf	Timer1_Init@t1ckps,w
  7344  0D7B  00F5               	movwf	??_Timer1_Init
  7345  0D7C  0EF5               	swapf	??_Timer1_Init,f
  7346  0D7D  0818               	movf	24,w	;volatile
  7347  0D7E  0675               	xorwf	??_Timer1_Init,w
  7348  0D7F  39CF               	andlw	-49
  7349  0D80  0675               	xorwf	??_Timer1_Init,w
  7350  0D81  0098               	movwf	24	;volatile
  7351  0D82  0008               	return
  7352  0D83                     __end_of_Timer1_Init:	
  7353                           
  7354                           	psect	intentry
  7355  0004                     __pintentry:	
  7356 ;; *************** function _isr *****************
  7357 ;; Defined at:
  7358 ;;		line 38 in file "main.c"
  7359 ;; Parameters:    Size  Location     Type
  7360 ;;		None
  7361 ;; Auto vars:     Size  Location     Type
  7362 ;;		None
  7363 ;; Return value:  Size  Location     Type
  7364 ;;		None               void
  7365 ;; Registers used:
  7366 ;;		None
  7367 ;; Tracked objects:
  7368 ;;		On entry : 0/0
  7369 ;;		On exit  : 0/0
  7370 ;;		Unchanged: 0/0
  7371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7372 ;;      Params:         0       0       0       0       0       0       0       0
  7373 ;;      Locals:         0       0       0       0       0       0       0       0
  7374 ;;      Temps:          1       0       0       0       0       0       0       0
  7375 ;;      Totals:         1       0       0       0       0       0       0       0
  7376 ;;Total ram usage:        1 bytes
  7377 ;; Hardware stack levels used:    1
  7378 ;; This function calls:
  7379 ;;		Nothing
  7380 ;; This function is called by:
  7381 ;;		Interrupt level 1
  7382 ;; This function uses a non-reentrant model
  7383 ;;
  7384                           
  7385  0004                     _isr:	
  7386                           
  7387                           ;incstack = 0
  7388                           ; Regs used in _isr: []
  7389  0004  3180               	pagesel	$
  7390  0005  0020               	movlb	0	; select bank0
  7391  0006  087F               	movf	127,w
  7392  0007  00F0               	movwf	??_isr
  7393                           
  7394                           ;main.c: 39: if(PIR1bits.TMR1IF==1) {
  7395  0008  1811               	btfsc	17,0	;volatile
  7396                           
  7397                           ;main.c: 40: PIR1bits.TMR1IF = 0;
  7398  0009  1011               	bcf	17,0	;volatile
  7399                           
  7400                           ;main.c: 41: }
  7401                           ;main.c: 43: if(PIR1bits.RCIF==1) {
  7402  000A  1A91               	btfsc	17,5	;volatile
  7403                           
  7404                           ;main.c: 44: PIR1bits.RCIF = 0;
  7405  000B  1291               	bcf	17,5	;volatile
  7406  000C  0870               	movf	??_isr,w
  7407  000D  00FF               	movwf	127
  7408  000E  0009               	retfie
  7409  000F                     __end_of_isr:	
  7410  0001                     
  7411                           	psect	functab
  7412  0100                     __pfunctab:	
  7413  0100                     __fptable:	
  7414  0100                     fptable:	
  7415  0100  3181               	movlp	high fptable
  7416  0101  0782               	addwf	2,f
  7417  0102                     fpbase:	
  7418  0102  2902               	goto	fpbase	; Call via a null pointer and you will get stuck here.
  7419  0103                     fp__ADC_Read:	
  7420  0103                     entry__ADC_Read:	
  7421  0103  3187  2F5E         	ljmp	_ADC_Read
  7422  0105                     __end_of__fptable:	
  7423  007E                     btemp	set	126	;btemp
  7424  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        72
    BSS         116
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     76      76
    BANK1            80     13      76
    BANK2            80      0      60
    BANK3            80      0      64
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6             5      0       0

Pointer List with Targets:

    ?_CRC16_Generate	unsigned short  size(1) Largest target is 0

    ?_ADC_Read	unsigned int  size(1) Largest target is 0

    ?___awdiv	int  size(1) Largest target is 0

    ?_ADC_ReadOne	unsigned int  size(1) Largest target is 0

    ?_swap_endian_32	unsigned long  size(1) Largest target is 0

    ?_XBAPI_Transmit	int  size(1) Largest target is 0

    ?_memcpy	PTR void  size(2) Largest target is 60
		 -> dest_address(BANK1[8]), apiFrame(BANK2[60]), 

    ?_UART_ReceiveMsgTmo	int  size(1) Largest target is 0

    ?_UART_Receive	short  size(1) Largest target is 0

    ?___wmul	unsigned int  size(1) Largest target is 0

    ?_XBAPI_HandleFrame	int  size(1) Largest target is 0

    ?_XBAPI_Command	int  size(1) Largest target is 0

    ?_memset	PTR void  size(1) Largest target is 6
		 -> calibrationData(BANK1[6]), 

    ?___aldiv	long  size(1) Largest target is 0

    memset@p1	PTR void  size(1) Largest target is 6
		 -> calibrationData(BANK1[6]), 

    memset@p	PTR unsigned char  size(1) Largest target is 6
		 -> calibrationData(BANK1[6]), 

    memcpy@d1	PTR void  size(2) Largest target is 60
		 -> dest_address(BANK1[8]), apiFrame(BANK2[60]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 60
		 -> dest_address(BANK1[8]), apiFrame(BANK2[60]), 

    memcpy@s1	PTR const void  size(2) Largest target is 60
		 -> packet_buffer(BANK1[32]), dest_address(BANK1[8]), apiFrame(BANK2[60]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 60
		 -> packet_buffer(BANK1[32]), dest_address(BANK1[8]), apiFrame(BANK2[60]), 

    CRC16_Generate@msg	PTR unsigned char  size(1) Largest target is 32
		 -> packet_buffer(BANK1[32]), 

    SendPacket@packet	PTR struct . size(1) Largest target is 32
		 -> packet_buffer(BANK1[32]), 

    EEPROM_Write@data	PTR unsigned char  size(1) Largest target is 6
		 -> intervalData(BANK1[4]), calibrationData(BANK1[6]), 

    EEPROM_Read@data	PTR unsigned char  size(1) Largest target is 6
		 -> intervalData(BANK1[4]), calibrationData(BANK1[6]), 

    XBAPI_HandleFrame@packet	PTR struct . size(1) Largest target is 60
		 -> apiFrame(BANK2[60]), 

    XBAPI_Transmit@data	PTR const unsigned char  size(1) Largest target is 32
		 -> packet_buffer(BANK1[32]), 

    sp__memcpy	PTR void  size(2) Largest target is 60
		 -> dest_address(BANK1[8]), apiFrame(BANK2[60]), 

    XBAPI_Transmit@address	PTR struct __XBeeAddress size(1) Largest target is 8
		 -> dest_address(BANK1[8]), 

    doChecksumVerify@address	PTR unsigned char  size(1) Largest target is 60
		 -> apiFrame(BANK2[60]), 

    checksum@addr	PTR void  size(1) Largest target is 60
		 -> apiFrame(BANK2[60]), 

    checksum@address	PTR unsigned char  size(1) Largest target is 60
		 -> apiFrame(BANK2[60]), 

    UART_ReceiveMsgTmo@msg	PTR unsigned char  size(1) Largest target is 60
		 -> apiFrame(BANK2[60]), 

    UART_TransmitMsg@_msg	PTR  unsigned char  size(1) Largest target is 60
		 -> apiFrame(BANK2[60]), 

    sp__memset	PTR void  size(1) Largest target is 6
		 -> calibrationData(BANK1[6]), 


Critical Paths under _main in COMMON

    _SendReport->_CRC16_Generate
    _ADC_ReadOne->_timer1_poll_delay
    _SendReceiverBroadcastRequest->_CRC16_Generate
    _XBAPI_Transmit->_memcpy
    _timer1_poll_delay_ms->_timer1_poll_delay
    _CRC16_Generate->_CRC16_Update
    _CRC16_Update->_CRC16_Update4Bits
    _UART_TransmitMsg->_UART_Transmit
    _XBAPI_HandleFrame->_memcpy
    _UART_ReceiveMsgTmo->_UART_Receive
    _pulseLed->_timer1_poll_delay
    _timer1_poll_delay->___wmul

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_SendReport
    _SendReport->_SendPacket
    _XBee_Wake->_XBee_Enable
    _ADC_Read->_ADC_ReadOne
    _ADC_ReadOne->_timer1_poll_delay
    _SendReceiverBroadcastRequest->_SendPacket
    _SendPacket->_XBAPI_Transmit
    _XBee_Reset->_XBee_Enable
    _timer1_poll_delay_ms->_timer1_poll_delay
    _XBee_Enable->_UART_Init
    _UART_Init->___aldiv
    ___aldiv->_ADC_Read
    _XBAPI_Command->_XBAPI_HandleFrame
    _XBAPI_HandleFrame->_UART_ReceiveMsgTmo
    _pulseLed->_timer1_poll_delay

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    13      4   11826
                                             72 BANK0      4     0      4
                                              0 BANK1     13    13      0
                           _pulseLed
                        _EEPROM_Read
                             _memset
                       _EEPROM_Write
                        _XBee_Enable
                      _XBAPI_Command
                       _XBee_Disable
                         _ADC_Enable
                         _CRC16_Init
       _SendReceiverBroadcastRequest
                  _XBAPI_HandleFrame
                           _ADC_Read
                          _XBee_Wake
                         _SendReport
                         _XBee_Sleep
                              _sleep
                            ___aldiv
 ---------------------------------------------------------------------------------
 (1) _XBee_Sleep                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SendReport                                           9     1      8    2886
                                             63 BANK0      9     1      8
                     _CRC16_Generate
                         _SendPacket
 ---------------------------------------------------------------------------------
 (1) _XBee_Wake                                            4     4      0     846
                                             48 BANK0      4     4      0
                        _XBee_Enable
                       _XBee_Disable
               _timer1_poll_delay_ms
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                            15    13      2     925
                                              7 BANK0     15    13      2
                        _ADC_ReadOne
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     300
                                              1 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _ADC_ReadOne                                          6     4      2     288
                                              1 BANK0      6     4      2
                  _timer1_poll_delay
 ---------------------------------------------------------------------------------
 (1) _SendReceiverBroadcastRequest                         1     1      0    2762
                                             63 BANK0      1     1      0
                     _CRC16_Generate
                         _SendPacket
 ---------------------------------------------------------------------------------
 (2) _SendPacket                                           4     4      0    2498
                                             59 BANK0      4     4      0
                     _XBAPI_Transmit
 ---------------------------------------------------------------------------------
 (3) _XBAPI_Transmit                                      11     6      5    2430
                                             48 BANK0     11     6      5
                  _XBAPI_HandleFrame
                   _UART_TransmitMsg
                         _XBee_Reset
                           _checksum
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _XBee_Reset                                           0     0      0     781
                        _XBee_Enable
                       _XBee_Disable
               _timer1_poll_delay_ms
 ---------------------------------------------------------------------------------
 (5) _timer1_poll_delay_ms                                 2     0      2     346
                                              1 BANK0      2     0      2
                  _timer1_poll_delay
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4      92
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (5) _XBee_Disable                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _XBee_Enable                                          2     0      2     435
                                             46 BANK0      2     0      2
                              _sleep
                          _UART_Init
 ---------------------------------------------------------------------------------
 (6) _UART_Init                                            9     7      2     345
                                             37 BANK0      9     7      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             15     7      8     300
                                             22 BANK0     15     7      8
                           _ADC_Read (ARG)
 ---------------------------------------------------------------------------------
 (1) _sleep                                                4     2      2      46
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (2) _CRC16_Generate                                       6     4      2     264
                                             11 COMMON     1     1      0
                                              0 BANK0      5     3      2
                         _CRC16_Init
                       _CRC16_Update
 ---------------------------------------------------------------------------------
 (3) _CRC16_Update                                         2     2      0     134
                                              9 COMMON     2     2      0
                  _CRC16_Update4Bits
 ---------------------------------------------------------------------------------
 (4) _CRC16_Update4Bits                                    8     8      0      90
                                              1 COMMON     8     8      0
 ---------------------------------------------------------------------------------
 (3) _CRC16_Init                                           1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_Enable                                           4     3      1     110
                                              1 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _XBAPI_Command                                       17     7     10    1929
                                             29 BANK0     17     7     10
                  _XBAPI_HandleFrame
                   _UART_TransmitMsg
                           _checksum
                   _doChecksumVerify
                     _swap_endian_32
 ---------------------------------------------------------------------------------
 (2) _swap_endian_32                                      16    12      4     170
                                              1 COMMON     8     4      4
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (2) _doChecksumVerify                                     9     6      3     137
                                              1 COMMON     9     6      3
 ---------------------------------------------------------------------------------
 (4) _checksum                                             9     7      2     137
                                              1 COMMON     9     7      2
 ---------------------------------------------------------------------------------
 (4) _UART_TransmitMsg                                     7     4      3     200
                                              2 COMMON     7     4      3
                      _UART_Transmit
 ---------------------------------------------------------------------------------
 (5) _UART_Transmit                                        1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _XBAPI_HandleFrame                                   15    11      4     901
                                             14 BANK0     15    11      4
                 _UART_ReceiveMsgTmo
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _memcpy                                              11     5      6     120
                                              1 COMMON    11     5      6
 ---------------------------------------------------------------------------------
 (5) _UART_ReceiveMsgTmo                                  14     7      7     515
                                              0 BANK0     14     7      7
                       _UART_Receive
 ---------------------------------------------------------------------------------
 (6) _UART_Receive                                        10     6      4     134
                                              1 COMMON    10     6      4
 ---------------------------------------------------------------------------------
 (1) _EEPROM_Write                                         6     3      3     134
                                              1 COMMON     6     3      3
 ---------------------------------------------------------------------------------
 (1) _memset                                               7     3      4      96
                                              1 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (1) _EEPROM_Read                                          7     4      3     134
                                              1 COMMON     7     4      3
 ---------------------------------------------------------------------------------
 (1) _pulseLed                                             2     0      2     254
                                              1 BANK0      2     0      2
                  _timer1_poll_delay
 ---------------------------------------------------------------------------------
 (6) _timer1_poll_delay                                    6     2      4     223
                                              7 COMMON     5     1      4
                                              0 BANK0      1     1      0
                        _Timer1_Init
                     _Timer1_Disable
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (7) _Timer1_Disable                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _Timer1_Init                                          5     1      4      62
                                              1 COMMON     5     1      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _isr                                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _pulseLed
     _timer1_poll_delay
       _Timer1_Init
       _Timer1_Disable
       ___wmul (ARG)
   _EEPROM_Read
   _memset
   _EEPROM_Write
   _XBee_Enable
     _sleep
     _UART_Init
       ___aldiv
         _ADC_Read (ARG)
           _ADC_ReadOne
             _timer1_poll_delay
               _Timer1_Init
               _Timer1_Disable
               ___wmul (ARG)
           ___awdiv
   _XBAPI_Command
     _XBAPI_HandleFrame
       _UART_ReceiveMsgTmo
         _UART_Receive
       _memcpy
     _UART_TransmitMsg
       _UART_Transmit
     _checksum
     _doChecksumVerify
     _swap_endian_32
   _XBee_Disable
   _ADC_Enable
   _CRC16_Init
   _SendReceiverBroadcastRequest
     _CRC16_Generate
       _CRC16_Init
       _CRC16_Update
         _CRC16_Update4Bits
     _SendPacket
       _XBAPI_Transmit
         _XBAPI_HandleFrame
           _UART_ReceiveMsgTmo
             _UART_Receive
           _memcpy
         _UART_TransmitMsg
           _UART_Transmit
         _XBee_Reset
           _XBee_Enable
             _sleep
             _UART_Init
               ___aldiv
                 _ADC_Read (ARG)
                   _ADC_ReadOne
                     _timer1_poll_delay
                       _Timer1_Init
                       _Timer1_Disable
                       ___wmul (ARG)
                   ___awdiv
           _XBee_Disable
           _timer1_poll_delay_ms
             _timer1_poll_delay
               _Timer1_Init
               _Timer1_Disable
               ___wmul (ARG)
             ___wmul
         _checksum
         _memcpy
   _XBAPI_HandleFrame
     _UART_ReceiveMsgTmo
       _UART_Receive
     _memcpy
   _ADC_Read
     _ADC_ReadOne
       _timer1_poll_delay
         _Timer1_Init
         _Timer1_Disable
         ___wmul (ARG)
     ___awdiv
   _XBee_Wake
     _XBee_Enable
       _sleep
       _UART_Init
         ___aldiv
           _ADC_Read (ARG)
             _ADC_ReadOne
               _timer1_poll_delay
                 _Timer1_Init
                 _Timer1_Disable
                 ___wmul (ARG)
             ___awdiv
     _XBee_Disable
     _timer1_poll_delay_ms
       _timer1_poll_delay
         _Timer1_Init
         _Timer1_Disable
         ___wmul (ARG)
       ___wmul
   _SendReport
     _CRC16_Generate
       _CRC16_Init
       _CRC16_Update
         _CRC16_Update4Bits
     _SendPacket
       _XBAPI_Transmit
         _XBAPI_HandleFrame
           _UART_ReceiveMsgTmo
             _UART_Receive
           _memcpy
         _UART_TransmitMsg
           _UART_Transmit
         _XBee_Reset
           _XBee_Enable
             _sleep
             _UART_Init
               ___aldiv
                 _ADC_Read (ARG)
                   _ADC_ReadOne
                     _timer1_poll_delay
                       _Timer1_Init
                       _Timer1_Disable
                       ___wmul (ARG)
                   ___awdiv
           _XBee_Disable
           _timer1_poll_delay_ms
             _timer1_poll_delay
               _Timer1_Init
               _Timer1_Disable
               ___wmul (ARG)
             ___wmul
         _checksum
         _memcpy
   _XBee_Sleep
   _sleep
   ___aldiv
     _ADC_Read (ARG)
       _ADC_ReadOne
         _timer1_poll_delay
           _Timer1_Init
           _Timer1_Disable
           ___wmul (ARG)
       ___awdiv

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1E5      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       7       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     121       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     4C      4C       6       95.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      D      4C       8       95.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      3C      10       75.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      40      12       80.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6             5      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6                5      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0     128      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.20 build 52243 
Symbol Table                                                                                   Sat Jul 27 06:21:36 2013

                                    pc 0002                                     l75 01A2  
                                   l79 01D1                           ___awdiv@sign 0077  
                  ___wmul@multiplicand 0073                    __size_of_ADC_Enable 0040  
            __size_of_doChecksumVerify 0026                __size_of_swap_endian_32 00B0  
                                  l221 0E2E          __size_of_timer1_poll_delay_ms 001B  
                                  l145 0D4B                                    l233 061C  
                                  l154 0F6B                                    l218 0E2C  
                                  l331 00CB                                    l164 05BA  
                                  l148 0D4E                                    l158 0F95  
                                  l167 05C5                                    l335 0FB5  
                                  l184 06BA                                    l178 066D  
                                  l366 0EFF                                    l369 0F0A  
                                  l546 0549                                    l876 0DF3  
                                  _isr 0004                                    wreg 0009  
                  __size_of_CRC16_Init 000A                           __CFG_FOSC$HS 0000  
                         __CFG_LVP$OFF 0000                                   l2202 0E70  
                                 l2204 0E8C                                   l2126 0F90  
                                 l2144 0609                                   l2138 05EA  
                                 l2402 0701                                   l2412 0DED  
                                 l2262 00DE                                   l2190 0E9A  
                                 l2094 0D85                                   l2406 0709  
                                 l2192 0EB6                                   l2344 056A  
                                 l2336 055A                                   l2450 0040  
                                 l2362 05B1                                   l2354 0598  
                                 l2346 0578                                   l2506 01D2  
                                 l2460 004F                                   l2620 031F  
                                 l2612 02FD                                   l2380 06D2  
                                 l2454 0026                                   l2614 0303  
                                 l2630 0333                                   l2358 05A3  
                                 l2390 06DA                                   l2374 06C7  
                                 l2518 01F1                                   l2456 0048  
                                 l2624 0329                                   l2632 033F  
                                 l2560 0475                                   l2392 06E6  
                                 l2730 06A7                                   l2618 0313  
                                 l2562 047B                                   l2538 03FC  
                                 l2642 0764                                   l2490 0171  
                                 l2482 0147                                   l2572 049F  
                                 l2660 0794                                   l2726 06A0  
                                 l2590 029A                                   l1942 00B3  
                                 l2830 0F5D                                   l2398 06F8  
                                 l2654 0780                                   l2670 063A  
                                 l1856 0E0A                                   l1864 0DD3  
                                 l2736 06B5                                   l2648 0779  
                                 l1882 0EE4                                   l2770 04E2  
                                 l2842 0EC9                                   l2498 01A3  
                                 l2588 0292                                   l2828 0F40  
                                 l2772 04E6                                   l2598 02C3  
                                 l2838 0EC6                   __size_of_ADC_ReadOne 0032  
                                 l2788 0530                                   ?_isr 0070  
                                 u1055 0E11                                   u1065 0DDD  
                                 u2113 0638                                   u1154 00A0  
                                 u2035 02BB                                   u1155 009F  
                                 u1315 0D8B                                   u2123 064C  
                                 u1164 00AB                                   u1085 0EEB  
                                 u1413 05E8                                   u2045 02F6  
                                 u1165 00AA                                   u1325 0FF0  
                                 u2205 052C                                   u1174 00B8  
                                 u2215 035B                                   u1175 00B7  
                                 u1184 00C4                                   u1433 05FC  
                                 u2145 0692                                   u1505 0E7A  
                                 u2225 037A                                   u1185 00C3  
                                 u2235 0389                                   u2245 03A8  
                                 u2175 0677                                   u1375 0F75  
                                 u2255 03B7                                   u1545 00E8  
                                 u2265 03D6                                   u1705 056D  
                                 u2285 0F4A                                   u1725 0579  
                                 u1805 06DD                                   u1495 0EA4  
                                 u1655 07AD                                   u1735 058D  
                                 u1665 0D61                                   u1745 0599  
                                 u1825 06E7                                   u1835 06F1  
                                 u1925 0046                                   u1845 06F9  
                                 u1955 0128                                   u1885 0DF4  
                                 u1965 015B                                   u1895 0DF9  
                                 _TMR1 0016                             _XBee_Reset 0D9B  
                           _XBee_Sleep 07FD                                   _main 0105  
                                 fsr0h 0005                                   fsr1h 0007  
                                 fsr0l 0004                                   indf0 0000  
                                 indf1 0001                                   fsr1l 0006  
                                 btemp 007E                       __end_of_ADC_Read 07A8  
                                 start 000F                  __end_of_XBAPI_Command 04A2  
                     ??_CRC16_Generate 007B                  doChecksumVerify@check 0077  
             __end_of_UART_TransmitMsg 0F99                   __end_of_EEPROM_Write 0F0D  
                                ??_isr 0070         ??_SendReceiverBroadcastRequest 005F  
                      __end_of___aldiv 05BA                                  ?_main 0068  
          __size_of_UART_ReceiveMsgTmo 0054                        __end_of___awdiv 0710  
                                _ADRES 009B                        ___awdiv@divisor 0071  
                     checksum@checksum 0077                        ___awdiv@counter 0076  
                                _SPBRG 019B                                  _TRISA 008C  
                                _TRISB 008D                                  _TRISC 008E  
                          _XBee_Enable 0E29                       SendPacket@packet 005D  
                  UART_ReceiveMsgTmo@c 002A                         _XBAPI_Transmit 04A2  
                  UART_ReceiveMsgTmo@i 002C                     __size_of_UART_Init 0035  
                     SendPacket@status 005E                                  _error 00A4  
                                _sleep 0D83                                  fpbase 0102  
                                status 0003                                  wtemp0 007E  
                     EEPROM_Write@data 0071                   __size_of_EEPROM_Read 0021  
                __size_of_CRC16_Update 0010                        __initialization 0F0D  
                         __end_of_main 0287                     __size_of_XBee_Wake 0057  
                __size_of_XBee_Disable 0003                                 ??_main 00D7  
               doChecksumVerify@length 0071                      Timer1_Init@t1ckps 0073  
               __end_of_XBAPI_Transmit 0538                         __CFG_PLLEN$OFF 0000  
                    Timer1_Init@tmr1cs 0071                             _SendPacket 0EBA  
                       _Timer1_Disable 0D30                   XBAPI_Transmit@length 0051  
                               _EEADRL 0191                                 _EEDATL 0193  
                               _EECON2 0196                       ___awdiv@dividend 0073  
                               ?_sleep 0071                              ADC_Read@i 0035  
                 CRC16_Update4Bits@val 0077                 timer1_poll_delay@ticks 0077  
                           _SendReport 0710                                 _ANSELA 018C  
                               _ANSELB 018D                                 _RC1REG 0199  
                         ??_ADC_Enable 0072                           _CRC16_Update 0D5D  
                               _TX1REG 019A                            ?_XBee_Reset 0070  
                          ?_XBee_Sleep 0070                                 _SWDTEN 04B8  
                     __end_of__fptable 0105                 timer1_poll_delay_ms@ms 0021  
                     __end_of_checksum 0EBA                           ??_CRC16_Init 0071  
                    doChecksumVerify@i 0078                          ??_Timer1_Init 0075  
                         _XBee_Disable 0D33                          _packet_buffer 00AD  
                    __end_of_UART_Init 1000                        XBee_Enable@baud 004E  
                            ??___aldiv 003E                                 ___wmul 0DEB  
                            ??___awdiv 0075                        ADC_Read@channel 0027  
                               _memcpy 00D2                                 _memset 0DCE  
                     ___awdiv@quotient 0078                         _swap_endian_32 0345  
                     _doChecksumVerify 0E6C                     __end_of_ADC_Enable 00D2  
                               fptable 0100                        ?_XBAPI_Transmit 0050  
                               fptotal 0001                              ?_ADC_Read 0027  
     XBAPI_HandleFrame@received_length 0037                 __end_of_Timer1_Disable 0D33  
                               sleep@i 0073                     __end_of_CRC16_Init 0D5D  
                     __end_of_pulseLed 07FD                      CRC16_Generate@len 0020  
                    CRC16_Generate@msg 0022                      __end_of_XBee_Wake 0669  
              __end_of__initialization 0F35                  __end_of_UART_Transmit 0D53  
                __size_of_EEPROM_Write 002B                         __pcstackCOMMON 0070  
                         __pidataBANK1 0D42                           __pidataBANK3 0052  
               __end_of_swap_endian_32 03F5                          __end_of_sleep 0D9B  
                  __end_of_Timer1_Init 0D83                          pulseLed@ticks 0021  
                  __size_of_XBee_Reset 0018                    __size_of_XBee_Sleep 0003  
              doChecksumVerify@address 0076                             ??_ADC_Read 0029  
                      ?_Timer1_Disable 0070                            ?_SendPacket 0070  
                              ??_sleep 0073                            ?_SendReport 005F  
                         _EEPROM_Write 0EE2                             __pbssBANK1 00A0  
                           __pbssBANK2 0120           __end_of_timer1_poll_delay_ms 0DCE  
             UART_TransmitMsg@end_char 0074                      XBAPI_Command@data 003F  
                      XBAPI_Command@id 0043                  XBAPI_Transmit@address 0056  
                           __pmaintext 0105                                ?___wmul 0071  
                           __pintentry 0004                        ?_swap_endian_32 0071  
                    ?_UART_TransmitMsg 0072                                ?_memcpy 0071  
                              ?_memset 0071                          _calc_checksum 007C  
                       UART_Init@spbrg 004C                     ??_UART_TransmitMsg 0075  
                            ?_checksum 0071                           ?_XBee_Enable 004E  
                        ??_ADC_ReadOne 0023                XBAPI_Command@data_valid 0045  
                        ?_UART_Receive 0071                  UART_ReceiveMsgTmo@len 0020  
                UART_ReceiveMsgTmo@msg 0029                  UART_ReceiveMsgTmo@tmo 0023  
                            _CRC16_Reg 00A0                              _CRC16_Low 00A9  
                          _Timer1_Init 0D6D                           _dest_address 00E4  
                              ___aldiv 0538                                ___awdiv 06BD  
                      __size_of___wmul 001D                              ?_pulseLed 0021  
                  __size_of_SendPacket 0028             __end_of_UART_ReceiveMsgTmo 06BD  
                      _CRC16_LookupLow 01C0                    __size_of_SendReport 004E  
                      __size_of_memcpy 002D                        __size_of_memset 001D  
                              _cmd_itr 00A2                                __ptext1 07FD  
                              __ptext2 0710                                __ptext3 0612  
                              __ptext4 075E                                __ptext5 06BD  
                              __ptext6 0F99                                __ptext7 0E4A  
                              __ptext8 0EBA                                __ptext9 04A2  
                            _T1CONbits 0018                           __size_of_isr 000B  
                           ??_checksum 0073                       ___aldiv@dividend 003A  
               __size_of_XBAPI_Command 00AD                      _timer1_poll_delay 0011  
                              clrloop0 0D3D                   end_of_initialization 0F35  
                   ?_timer1_poll_delay 0077                         ??_UART_Receive 0075  
                              memcpy@d 0078                                memcpy@n 0075  
                              memcpy@s 007A                    __end_of_ADC_ReadOne 0FCB  
                        ??_EEPROM_Read 0074                           ??_XBee_Reset 007C  
                         ??_XBee_Sleep 0071                                init_ram 0D36  
                              memset@c 0071               __end_of_doChecksumVerify 0E92  
                              memset@n 0073                                memset@p 0077  
                              initloop 0D37                      _XBAPI_HandleFrame 0287  
                 UART_TransmitMsg@_msg 0076                         UART_Transmit@c 0071  
                  ??_timer1_poll_delay 007B                    SendReport@thermBeta 0063  
                   ?_XBAPI_HandleFrame 002E                       ___aldiv@quotient 0041  
                           ??_pulseLed 007C                       ??_XBAPI_Transmit 0055  
                  ??_XBAPI_HandleFrame 0032                              _UART_Init 0FCB  
              __size_of_CRC16_Generate 0030                              _PORTBbits 000D  
                            _PORTCbits 000E                   _timer1_poll_delay_ms 0DB3  
                    _XBAPI_Command$876 004B                     __end_of_XBee_Reset 0DB3  
                   __end_of_XBee_Sleep 0800              __end_of_timer1_poll_delay 0052  
                   EEPROM_Write@length 0072                      __size_of_ADC_Read 004A  
                       _last_xbee_baud 00A6                         entry__ADC_Read 0103  
            __end_of_XBAPI_HandleFrame 0345                          EEPROM_Write@i 0076  
                         _frame_id_itr 00AA                              _TXSTAbits 019E  
                            _XBee_Wake 0612                          _XBAPI_Command 03F5  
                  __end_of_EEPROM_Read 0E29                        checksum@address 0076  
                   CRC16_Update4Bits@t 0078                         __end_of___wmul 0E08  
                           ?_UART_Init 0045                       ??_Timer1_Disable 0071  
                ?_timer1_poll_delay_ms 0021                         __end_of_memcpy 00FF  
                 XBAPI_Command@command 003D                         __end_of_memset 0DEB  
                  start_initialization 0F0D                     _XBAPI_Transmit$864 0057  
                          _ADC_ReadOne 0F99                            __end_of_isr 000F  
                         ??_SendPacket 005B                   __size_of_XBee_Enable 0021  
                         ??_SendReport 0067                    XBAPI_Transmit@error 0059  
             doChecksumVerify@checksum 0073                             ?_XBee_Wake 0070  
                       ?_XBAPI_Command 003D                       ??_swap_endian_32 0020  
                             ??___wmul 0075                            __pdataBANK1 00E4  
                          __pdataBANK3 01A0                     __end_of_SendPacket 0EE2  
                             ??_memcpy 0077                               ??_memset 0075  
          XBAPI_HandleFrame@bytes_read 0034                     __end_of_SendReport 075E  
                 __end_of_UART_Receive 0612             __size_of_timer1_poll_delay 0041  
                          __pbssCOMMON 007C                 __size_of_UART_Transmit 0009  
                        __pcstackBANK0 0020                          __pcstackBANK1 00D7  
                    __size_of__fptable 0005                     XBAPI_Command@check 004A  
                    __size_of_checksum 0028              __size_of_UART_TransmitMsg 0031  
           __size_of_XBAPI_HandleFrame 00BE                            _EEPROM_Read 0E08  
                         ?_Timer1_Init 0071                              _main$1774 00E0  
                            __pfunctab 0100                          UART_Init@baud 0045  
                             ?___aldiv 0036                               ?___awdiv 0071  
             XBAPI_Command@atCmdLength 004D                 ??_timer1_poll_delay_ms 007C  
                          ??_UART_Init 0047                      UART_TransmitMsg@i 0077  
                       _CRC16_Generate 0F38                      __size_of_pulseLed 0011  
                        UART_Receive@i 0077                           checksum@addr 0075  
                             _ADC_Read 075E                            ADC_Read@res 002B  
                          ADC_Read@sum 0033                       __CFG_WDTE$SWDTEN 0000  
                   _UART_ReceiveMsgTmo 0669                         __size_of_sleep 0018  
                        ?_CRC16_Update 0070                              checksum@i 0078  
                      ___aldiv@divisor 0036                        ___aldiv@counter 003F  
                  ?_UART_ReceiveMsgTmo 0020                         ___wmul@product 0075  
                      ??_XBAPI_Command 0047                      ?_doChecksumVerify 0071  
                            clear_ram0 0D3C                      _CRC16_Update4Bits 07A8  
                          ??_XBee_Wake 007C                           _intervalData 00D3  
                        ?_XBee_Disable 0070                    UART_TransmitMsg@len 0072  
                   ??_doChecksumVerify 0074                          _UART_Transmit 0D4A  
                             _PIR1bits 0011                               _PIR2bits 0012  
                   ?_CRC16_Update4Bits 0070                 __end_of_CRC16_Generate 0F68  
                         EEPROM_Read@i 0077                    ??_CRC16_Update4Bits 0071  
                 ??_UART_ReceiveMsgTmo 0027                             _ADCON0bits 009D  
                           _ADCON1bits 009E                      ___wmul@multiplier 0071  
                      UART_Receive@tmo 0071        timer1_poll_delay@tmr1_turned_on 0020  
                       ??_CRC16_Update 0079                        _calibrationData 00CD  
                       checksum@length 0071                             _ADC_Enable 0092  
            __end_of_CRC16_Update4Bits 07EC                         ??_XBee_Disable 0071  
                           _EECON1bits 0195                     XBAPI_Transmit@data 0050  
                           _CRC16_High 00A8                         ?_UART_Transmit 0070  
                           _CRC16_Init 0D53                  __size_of_UART_Receive 0058  
                      ?_CRC16_Generate 0020                       __size_of___aldiv 0082  
                      CRC16_Generate@i 0023                       __size_of___awdiv 0053  
           UART_ReceiveMsgTmo@end_char 0022                       _CRC16_LookupHigh 01A0  
              XBAPI_HandleFrame@do_tmo 0030                               __fptable 0100  
              XBAPI_HandleFrame@packet 0036                               _apiFrame 0120  
                             _checksum 0E92         SendReport@thermistorResistance 005F  
                         ?_ADC_ReadOne 0021                               __ptext10 0D9B  
                             __ptext11 0DB3                               __ptext20 07A8  
                             __ptext12 0DEB                               __ptext21 0D53  
                             __ptext13 0D33                             _T1GCONbits 0019  
                             __ptext30 00D2                               __ptext22 0092  
                             __ptext14 0E29                               __ptext31 0669  
                             __ptext23 03F5                               __ptext15 0FCB  
                             __ptext32 05BA                               __ptext24 0345  
                             __ptext16 0538                               __ptext33 0EE2  
                             __ptext25 0E6C                               __ptext17 0D83  
                             __ptext34 0DCE                               __ptext26 0E92  
                             __ptext18 0F38                               __ptext35 0E08  
                             __ptext27 0F68                               __ptext19 0D5D  
                             __ptext36 07EC                               __ptext28 0D4A  
                             __ptext37 0011                               __ptext29 0287  
                             __ptext38 0D30                               __ptext39 0D6D  
                     _UART_TransmitMsg 0F68                          ?_EEPROM_Write 0071  
                SendReport@thermRes25C 0061                           sleep@seconds 0071  
                          fp__ADC_Read 0103                          __size_of_main 0182  
                 XBAPI_HandleFrame@tmo 0039                           _UART_Receive 05BA  
 __end_of_SendReceiverBroadcastRequest 0E6C  __size_of_SendReceiverBroadcastRequest 0022  
         _SendReceiverBroadcastRequest 0E4A                               _tmr1_err 00AB  
                           _RC1STAbits 019D                   __size_of_Timer1_Init 0016  
                             _pulseLed 07EC               main@thermistorResistance 00DC  
                             main@argc 0068                               main@argv 006A  
                           XBee_Wake@i 0050                            _OSCSTATbits 009A  
                SendReport@topResValue 0065                          ??_XBee_Enable 007C  
                             memcpy@d1 0071                               memcpy@s1 0073  
              __size_of_XBAPI_Transmit 0096                               memset@p1 0076  
            XBAPI_HandleFrame@expected 002E                         ??_EEPROM_Write 0074  
                             intlevel1 0100                            ?_ADC_Enable 0071  
           __size_of_CRC16_Update4Bits 0044                        ??_UART_Transmit 0071  
                         ?_EEPROM_Read 0071                            ?_CRC16_Init 0070  
                   EEPROM_Read@address 0076          ?_SendReceiverBroadcastRequest 0070  
                   ADC_ReadOne@channel 0024                   __end_of_CRC16_Update 0D6D  
                      swap_endian_32@n 0071                        swap_endian_32@r 0075  
                      CRC16_Update@val 007A                       XBAPI_Transmit@id 0053  
                   ADC_Enable@port_pin 0071                        _xbee_reset_flag 00AC  
                 __end_of_XBee_Disable 0D36                           ___aldiv@sign 0040  
                           _WDTCONbits 0097                             _TX1STAbits 019E  
                    EEPROM_Read@length 0072              timer1_poll_delay@division 0079  
              __size_of_Timer1_Disable 0003                    __end_of_XBee_Enable 0E4A  
                    ADC_ReadOne@result 0025                       ADC_Enable@select 0074  
                      EEPROM_Read@data 0071                    EEPROM_Write@address 0075  
